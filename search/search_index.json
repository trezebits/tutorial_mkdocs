{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"\ud83d\udcd4 Introducci\u00f3n","text":""},{"location":"index.html#mi-guia-personalpara-crear-documentacion","title":"Mi gu\u00eda personalpara crear documentaci\u00f3n","text":"<p>En este cuaderno voy a hacer un recorrido por las herramientas que utilizo para reunir y publicar mis notas.</p> <p>Aunque no soy un profesional de la inform\u00e1tica, me gusta explorar todo lo relacionado con el mundo de los ordenadores y crear mi colecci\u00f3n de apuntes. Organizo la documentaci\u00f3n en forma de cuadernos, y cuando uno de ellos llega a materializarse en algo publicable, lo comparto siguiendo el proceso que vamos a ver a continuaci\u00f3n.</p> <p>Mis fuentes son muy variadas. En el caso de este cuaderno en particular, el principal elemento de consulta es la documentaci\u00f3n de Material for MkDocs, el software que utilizo para convertir mis archivos de texto en p\u00e1ginas web.</p> <p></p> <p>Fecha \u00faltima actualizaci\u00f3n: 15-may-2025</p>"},{"location":"001Archivos.html","title":"Anatom\u00eda de una p\u00e1gina web","text":"<p>Dado que vamos a mostrar nuestra documentaci\u00f3n en forma de p\u00e1ginas web, comencemos por \"destripar\" lo que obtenemos cuando navegamos por la red. </p>"},{"location":"001Archivos.html#archivos","title":"Archivos","text":"<p>T\u00edpicamente, toda sesi\u00f3n comienza introduciendo una URL en nuestro navegador. Por ejemplo:</p> <pre><code>https://www.google.com/\n</code></pre> <p>Lo que sucede en ese momento es que nuestra compa\u00f1\u00eda de comunicaciones (la empresa de telefon\u00eda, u otra) act\u00faa como Proveedor de Servicios de Internet (ISP) y desencadena todo el proceso para traducir la URL, localizar el servidor web donde se aloja la p\u00e1gina (en este ejemplo, Google) y descargar los contenidos, que se visualizar\u00e1n en la ventana del navegador.</p> <p>Inicialmente se descarga la p\u00e1gina principal, o la solicitada, si la URL lo especifica. A medida que vayamos pulsando en los enlaces que hay en el texto, se ir\u00e1n descargando y mostrando otras p\u00e1ginas.</p> <p>Cada p\u00e1gina web es, en esencia, un archivo de texto. Si incluye im\u00e1genes u otros elementos gr\u00e1ficos o audiovisuales, estos se descargan en paralelo, como archivos independientes. El navegador tomar\u00e1 los ficheros y har\u00e1 una composici\u00f3n \"al vuelo\" para obtener la presentaci\u00f3n a visualizar.</p> <p>Ve\u00e1moslo con un ejemplo. Supongamos, como ejemplo, un sitio web que tiene:</p> <ul> <li>una p\u00e1gina principal, con enlaces al resto de p\u00e1ginas</li> <li>dos adicionales, la p\u00e1gina 2 y la 3, a las que se accede desde la principal, y que tienen enlaces de vuelta a esta</li> <li>la p\u00e1gina 3 muestra unas im\u00e1genes, que se descargan al mismo tiempo.</li> </ul> <p>Esquem\u00e1ticamente ser\u00eda:</p> <pre><code>flowchart TD\n  A[P\u00e1gina 1 principal&lt;br&gt;que contiene un texto&lt;br&gt;con enlaces a otras p\u00e1ginas];\n  A --&gt; |descarga de p\u00e1gina 2| B[P\u00e1gina 2];\n  A --&gt; |descarga de p\u00e1gina 3| C[P\u00e1gina 3 con im\u00e1genes&lt;br&gt;que se descargan en paralelo] \n  A --&gt; |descarga junto a p\u00e1gina 3| D[imagen1.jpg&lt;br&gt;imagen2.jpg];\n  B --&gt; |enlace de vuelta| A;\n  C --&gt; E[P\u00e1gina 3 resultante];\n  D --&gt; E\n  E --&gt; |enlace de vuelta| A;\n</code></pre> <p>En el servidor web tendremos, b\u00e1sicamente, cinco ficheros:</p> <ul> <li>tres archivos con texto</li> <li>dos archivos de im\u00e1genes</li> </ul>"},{"location":"001Archivos.html#archivos-de-texto","title":"Archivos de texto","text":"<p>En l\u00edneas generales, en el mundo de los ordenadores existen dos tipos de ficheros:</p> <ul> <li> <p>los \"binarios\", formados por ceros y unos que representan im\u00e1genes, sonido, etc.</p> </li> <li> <p>los de texto, que consisten exclusivamente en una secuencia de caracteres.</p> </li> </ul> <p>Para crear documentos de texto podemos utilizar dos tipos de programa:</p> <ul> <li> <p>Editores Rich text format, donde los documentos incluyen texto, im\u00e1genes, tipograf\u00eda, y toda clase de elementos gr\u00e1ficos. T\u00edpicamente, estos ficheros se suelen guardar en formato binario.</p> <p></p> </li> <li> <p>Editores Plain text, que no admiten elementos gr\u00e1ficos ni informaci\u00f3n a\u00f1adida sobre estilos de letra:</p> <p></p> </li> </ul> <p>Acerca del t\u00e9rmino 'plain text'</p> <p>En algunos manuales t\u00e9cnicos, a los archivos plain text se les llama ficheros de \"texto plano\". Realmente no tiene nada que ver con que sea plano o redondo. La traducci\u00f3n correcta ser\u00eda \"texto sin m\u00e1s\".</p> <p>Existe un caso especial de archivos \"plain text\". Son aquellos que contienen anotaciones que acompa\u00f1an al texto, con informaci\u00f3n sobre formato de presentaci\u00f3n. A estas anotaciones se les llama \"marcas\".</p> <p>Las p\u00e1ginas web son archivos plain text con unas marcas que proporcionan al navegador todo lo que necesita saber para establecer el aspecto final de la visualizaci\u00f3n y la forma de insertar en el documento el resto de archivos (im\u00e1genes, etc) descargados en paralelo.</p>"},{"location":"001Archivos.html#marcas","title":"Marcas","text":"<p>Supongamos, por ejemplo, que una p\u00e1gina web muestra el siguiente contenido:</p>  Un texto en negrita y este otro en cursiva.  <p>El archivo que se descarga es un plain text que contiene lo siguiente:</p> <pre><code>Un texto &lt;b&gt;en negrita&lt;/b&gt; y este otro &lt;i&gt;en cursiva&lt;/i&gt;.\n</code></pre> <p>Las marcas de las p\u00e1ginas web se denominan etiquetas, y se delimitan entre dos \u00e1ngulos <code>&lt; &gt;</code>. El navegador no las muestra en la pantalla, pero las utilizar\u00e1 para determinar el formato de presentaci\u00f3n de la p\u00e1gina. En nuestro ejemplo:</p> <ul> <li>La etiqueta <code>&lt;b&gt;</code> indica el comienzo del texto en negrita (bold).</li> <li>La etiqueta <code>&lt;/b&gt;</code> indica el fin del texto en negrita.</li> <li>La etiqueta <code>&lt;i&gt;</code> indica el comienzo del texto en cursiva (it\u00e1lica).</li> <li>La etiqueta <code>&lt;/i&gt;</code> indica el fin del texto en cursiva.</li> </ul> <p>Estas etiquetas han de respetar unas reglas de sintaxis que se denominan lenguaje de marcas. Existen numerosos lenguajes de marcado. V\u00e9ase Wikipedia. Las p\u00e1ginas web utilizan una sintaxis denominada HTML, abreviatura de HyperText Markup Language.</p> <p>En una primera aproximaci\u00f3n, se podr\u00eda decir que, para crear una p\u00e1gina web, todo lo que necesitamos es un editor de plain text para escribir texto que lleve etiquetas HTML. Veamos esto con m\u00e1s detalle.</p>"},{"location":"001Archivos.html#anatomia-de-un-archivo-html","title":"Anatom\u00eda de un archivo HTML","text":"<p>Volvamos a nuestro ejemplo. Supongamos que queremos mostrar lo siguiente en la ventana del navegador:</p> <p></p> <p>El contenido del archivo de texto descargado ser\u00eda algo as\u00ed como:</p> <pre><code>&lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n        &lt;body&gt;\n\n            &lt;h1&gt;Mi primer documento&lt;/h1&gt;\n\n            &lt;p&gt;Un texto &lt;b&gt;en negrita&lt;/b&gt; \n            y este otro &lt;i&gt;en cursiva&lt;/i&gt;.\n            &lt;/p&gt;\n\n        &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre> <p>Para ensayar con el formato HTML, probemos a copiar este texto a nuestro editor plain text. Lo guardamos asign\u00e1ndole un nombre con sufijo <code>.html</code>, por ejemplo, <code>prueba.hmtl</code>. </p> <p>No es necesario que lo copiemos a un servidor web. Con tenerlo en nuestro disco duro, basta. Al hacer doble clic sobre el fichero, el sistema lo identificar\u00e1 como p\u00e1gina web, y lo visualizar\u00e1 en la ventana del navegador.</p> <p>Editores de plain text</p> <p>Para editar archivos plain text, Windows proporciona, desde sus origenes, un peque\u00f1o editor llamado \"Bloc de notas\". \u00a1Cuidado al guardar el archivo!. El editor suele a\u00f1adir autom\u00e1ticamente la extensi\u00f3n <code>.txt</code> al nombre, por lo que es una caracter\u00edstica que debemos desactivar. Las p\u00e1ginas web llevan el sufijo <code>.html</code></p> <p>Los ordenadores Mac vienen con un sencillo editor llamado TextEdit, que admite archivos en formato RTF (por defecto) o de texto simple. Debemos cambiar la configuraci\u00f3n del editor para que se guarden como texto sin formato.</p> <p>Los sistemas Linux suelen proporcionar de serie uno o varios editores, pero eso depende de la distribuci\u00f3n instalada, Ubuntu, Fedora, etc.</p> <p>Si no nos convence el editor que se suministra por defecto con nuestro sistema, tenemos cientos de editores a nuestra disposici\u00f3n en la red. V\u00e9ase Wikipedia</p> <p>Analicemos el contenido de este primer ejemplo. Algunas l\u00edneas est\u00e1n sangradas (espaciado a la izquierda) y otras est\u00e1n en blanco. Todo eso es puramente decorativo, y ser\u00e1 ignorado por el navegador. El resultado final ser\u00eda el mismo si el contenido del archivo fuera:</p> <pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Mi primer documento&lt;/h1&gt;\n&lt;p&gt;Un texto &lt;b&gt;en negrita&lt;/b&gt;y este otro &lt;i&gt;en cursiva&lt;/i&gt;.\n&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre> <p>...pero al usar el editor de textos, resulta m\u00e1s c\u00f3modo utilizar un formato que sea amigable.</p> <p>Veamos ahora el significado de las etiquetas. Todo documento web suele empezar con <code>&lt;!DOCTYPE html&gt;</code>, lo que indica que se trata de un archivo en formato HTML. Las etiquetas <code>&lt;html&gt;</code> y <code>&lt;/html&gt;</code> delimitan el contenido del archivo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n        contenido del archivo\n    &lt;/html&gt;\n</code></pre> <p>Los diferentes bloques de texto se suelen delimitar con una etiqueta de apertura y una de cierre, que es la misma, pero a\u00f1adiendo una barra <code>/</code>.</p> <p>El contenido de una p\u00e1gina web puede estar formado por dos secciones:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n  &lt;head&gt;\n    Cabecera del documento con informaci\u00f3n sobre el mismo (opcional)\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    Cuerpo del documento con el texto a mostrar\n  &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Los p\u00e1rrafos del documento se colocan en la secci\u00f3n <code>&lt;body&gt;</code>, y cada uno de ellos se delimita entre etiquetas <code>&lt;p&gt;</code> y <code>&lt;/p&gt;</code>. El navegador unir\u00e1 todas las l\u00edneas de un p\u00e1rrafo en una sola, e insertar\u00e1 un espaciado entre p\u00e1rrafos. Es decir, es lo mismo escribir:</p> <pre><code>&lt;p&gt;Texto del p\u00e1rrafo 1&lt;/p&gt;&lt;p&gt;Texto del p\u00e1rrafo 2&lt;/p&gt;\n</code></pre> <p>que</p> <pre><code>&lt;p&gt;Texto del \np\u00e1rrafo 1&lt;/p&gt;\n&lt;p&gt;Texto del p\u00e1rrafo 2&lt;/p&gt;\n</code></pre> <p>ya que el navegador ignora todo espaciado extra y concatena las l\u00edneas de texto, pero separa visualmente los p\u00e1rrafos:</p> <p>Texto del  p\u00e1rrafo 1</p> <p>Texto del p\u00e1rrafo 2</p> <p>Si sustituimos las etiquetas <code>&lt;p&gt;</code> por <code>&lt;h1&gt;</code>, obtendremos un p\u00e1rrafo de t\u00edtulo del documento, mostrado con un tipo de letra especial:</p> <pre><code>&lt;h1&gt;Mi primer documento&lt;/h1&gt;\n</code></pre> <p>Los p\u00e1rrafos de t\u00edtulo pueden a\u00f1adirse con varios niveles de importancia:</p> <ul> <li><code>&lt;h1&gt;</code> para el t\u00edtulo principal del documento</li> <li><code>&lt;h2&gt;</code> para t\u00edtulos de secciones</li> <li><code>&lt;h3&gt;</code> para t\u00edtulos de subsecciones</li> </ul> <p>... y as\u00ed sucesivamente, hasta llegar a <code>&lt;h6&gt;</code>. El resaltado va de mayor a menor, en funci\u00f3n de la importancia del t\u00edtulo.</p>"},{"location":"001Archivos.html#estandares-web","title":"Est\u00e1ndares web","text":"<p>El formato HTML establece unas reglas de escritura que pueden parecer bastante rigurosas. En realidad han sido concebidas para describir con total exactitud el contenido de una p\u00e1gina. En algunas situaciones los navegadores suelen ser bastante permisivos, asumiendo algunos valores por defecto, si falta alguna etiqueta, o ignorando las etiquetas mal escritas, sin mostrar ning\u00fan mensaje de error.</p> <p>Tanto el formato HTML como otros est\u00e1ndares de Internet est\u00e1n regulados por el World Wide Web Consortium, autoridad mundial que publica recomendaciones y est\u00e1ndares para asegurar el buen funcionamiento de la web. Este consorcio fue creado en octubre de 1994.</p>"},{"location":"001Archivos.html#el-formato-markdown","title":"El formato markdown","text":"<p>Redactar un documento en formato HTML puede llegar a ser bastante farragoso, con tanta etiqueta. En su lugar, es costumbre utilizar otros lenguajes de marcas m\u00e1s sencillos. Uno de los m\u00e1s populares es el formato Markdown. Nuestro archivo quedar\u00eda as\u00ed:</p> <pre><code># Mi primer documento\n\nUn texto **en negrita** \ny este otro *en cursiva*.\n</code></pre> <p>En formato markdown tenemos lo siguiente:</p> <ul> <li>Los p\u00e1rrafos se separan con una l\u00ednea en blanco. No necesitamos etiquetas <code>&lt;p&gt;</code> para delimitarlos.</li> <li>Las l\u00edneas que forman un p\u00e1rrafo se unen en una sola, como sucede en HTML.</li> <li>Los p\u00e1rrafos de t\u00edtulo (cabeceras) se marcan anteponiendo un s\u00edmbolo <code>#</code>.</li> <li>El texto se resalta delimit\u00e1ndolo entre asteriscos (cursiva) o doble asterisco (negrita).</li> </ul> <p>De esta forma, se suele decir que el formato HTML sirve para representar contenidos, y el formato markdown para redactarlos. Tendremos dos archivos:</p> <ul> <li><code>mipaginaweb.md</code>, creado con un editor de plain text</li> <li><code>mipaginaweb.html</code>, creado con un programa conversor. Yo utilizo uno llamado MkDocs, que toma los archivos markdown y genera los HTML para subirlos posteriormente al servidor web.</li> </ul>"},{"location":"001Archivos.html#etiquetas-html-en-markdown","title":"Etiquetas HTML en markdown","text":"<p>El uso del formato markdown hace que la tarea de edici\u00f3n del contenido de una p\u00e1gina web resulte m\u00e1s simple. Pero tiene sus limitaciones. La sintaxis de markdown no cubre todas las posibilidades que ofrece HTML.</p> <p>Por ejemplo, supongamos que queremos introducir saltos de l\u00ednea en mitad de un p\u00e1rrafo:</p> <p>La canci\u00f3n de San Ferm\u00edn:</p> <p> Uno de enero dos de febrero tres de marzo ...  </p> <p>N\u00f3tese que entre l\u00edneas no queremos espaciado extra, como sucede entre p\u00e1rrafos. Pero si escribimos en formato markdown:</p> <pre><code>La canci\u00f3n de San Ferm\u00edn:\n\nUno de enero\ndos de febrero\ntres de marzo\n... \n</code></pre> <p>Las l\u00edneas que forman el p\u00e1rrafo se unir\u00e1n en una sola:</p> <p>La canci\u00f3n de San Ferm\u00edn:</p> <p> Uno de enero dos de febrero tres de marzo ...  </p> <p>En los archivos HTML podemos forzar un salto de l\u00ednea mediante la etiqueta <code>&lt;br&gt;</code>, abreviatura de break:</p> <pre><code>&lt;p&gt;La canci\u00f3n de San Ferm\u00edn:&lt;/p&gt;\n\n&lt;p&gt;\nUno de enero&lt;br&gt;\ndos de febrero&lt;br&gt;\ntres de marzo&lt;br&gt;\n... \n&lt;/p&gt;\n</code></pre> <p>En un texto markdown, podemos insertar manualmente etiquetas HTML que, con algunas excepciones, ser\u00e1n respetadas, salvo que entren en contradicci\u00f3n con lo generado durante el proceso de conversi\u00f3n:</p> <pre><code># La canci\u00f3n de San Ferm\u00edn:\n\nUno de enero&lt;br&gt;\ndos de febrero&lt;br&gt;\ntres de marzo&lt;br&gt;\n... \n</code></pre>"},{"location":"002Estilos.html","title":"Atributos y estilos","text":"<p>El ejemplo visto en el cap\u00edtulo anterior es muy sencillo. En el mundo real, los elementos de una p\u00e1gina web se suelen configurar para lograr una presentaci\u00f3n m\u00e1s sofisticada. Para ello, podemos  modificar los atributos de cada elemento, as\u00ed como aplicar reglas de estilo.</p>"},{"location":"002Estilos.html#atributos","title":"Atributos","text":"<p>Todo elemento de una p\u00e1gina tiene unos atributos que se pueden modificar. Se hace en la etiqueta de apertura:</p> <pre><code>&lt;p title=\"texto de ayuda\"&gt;\n\nPasar el rat\u00f3n sobre este p\u00e1rrafo sin pulsar el rat\u00f3n, y esperar a que se despliegue autom\u00e1ticamente \nun texto de ayuda.\n\n&lt;/p&gt;\n</code></pre> <p>Lo que muestra:</p> <p>     Pasar el rat\u00f3n sobre este p\u00e1rrafo sin pulsar el rat\u00f3n, y esperar a que se despliegue autom\u00e1ticamente      un texto de ayuda.     </p> <p>El atributo title es com\u00fan a muchos elementos web, y permite mostrar un texto emergente cuando se pasa el rat\u00f3n por encima (sin pulsar). Otros elementos tienen atributos que son t\u00edpicos de cada clase de elemento.</p> <p>En l\u00edneas generales, la sintaxis para establecer los atributos en la etiqueta de apertura es:</p> <pre><code>&lt;etiqueta atributo1=\"valor1\" atributo2=\"valor2\"&gt;\n</code></pre> <p>Los atributos se escriben separados por espacios en blanco, y cada uno en formato nombre=\"valor\". Es com\u00fan, aunque no obligatorio, entrecomillar los valores.</p> <p>En el formato markdown las opciones de configuraci\u00f3n son reducidas, pero la posibilidad de insertar etiquetas HTML, nos da m\u00e1s posibilidades. En este cap\u00edtulo nos centraremos en el formato HTML.</p>"},{"location":"002Estilos.html#hojas-de-estilo","title":"Hojas de estilo","text":"<p>Adem\u00e1s del uso de atributos, la presentaci\u00f3n y aspecto de una p\u00e1gina se configura principalmente con reglas de estilo. Las hay de tres tipos:</p> <ul> <li>las reglas de estilo definidas en la secci\u00f3n <code>&lt;head&gt;</code> del documento.</li> <li>las reglas de estilo definidas en fichero aparte, que afectan a todas las p\u00e1ginas del proyecto.</li> <li>las reglas de estilo definidas en la etiqueta de apertura de un elemento concreto.</li> </ul> <p>A los ficheros con reglas de estilo se les llama hojas de estilo. Son archivos plain text con extensi\u00f3n `.css\"</p> <p>El contenido puede ser algo as\u00ed como:</p> <pre><code>body {\n  background-color: beige;\n}\n\nh1 {\n  color: red;\n  text-align: center;\n}\n\np {\n  font-family: verdana;\n  font-size: 20px;\n}\n</code></pre> <p>Cada regla est\u00e1 formada por:</p> <ul> <li>un selector, <code>p</code>, <code>h1</code>, <code>body</code>, etc, que indica a que elementos se va a aplicar</li> <li>un conjunto de propiedades de estilo, delimitadas cada una por un punto y coma, y todo ello entre llaves <code>{}</code></li> <li>cada propiedad se escribe en formato <code>propiedad:valor</code></li> </ul> <p>En el ejemplo, establecemos un color de fondo para todo el documento (body), color de texto y alineamiento para los p\u00e1rrafos de cabecera de nivel 1, y tipo de letra y tama\u00f1o para los p\u00e1rrafos en general. Guardemos este archivo como <code>prueba.css</code>. </p> <p>Vamos a recuperar nuestro archivo <code>prueba.html</code>. En la secci\u00f3n <code>&lt;head&gt;</code> de cada documento HTML enlazamos con el archivo CSS usando una etiqueta <code>&lt;link&gt;</code>, que establece el archivo adjunto que hay que descargar. El atributo \"rel\" indica el tipo de archivo, y el atributo \"href\" el nombre de la hoja de estilos:</p> <p><pre><code>&lt;head&gt;\n    &lt;link rel=\"stylesheet\" href=\"prueba.css\"&gt;\n&lt;/head&gt;\n</code></pre> As\u00ed queda nuestro archivo <code>prueba.html</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"prueba.css\"&gt;\n    &lt;/head&gt;\n    &lt;html&gt;\n        &lt;body&gt;\n\n            &lt;h1&gt;Mi primer documento&lt;/h1&gt;\n\n            &lt;p&gt;Un texto &lt;b&gt;en negrita&lt;/b&gt; \n            y este otro &lt;i&gt;en cursiva&lt;/i&gt;.\n            &lt;/p&gt;\n\n        &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre> <p>Con estos dos archivos, <code>prueba.html</code> y <code>prueba.css</code>, al pulsar sobre el primero veremos:</p> <p></p> <p>Si creamos nuestro sitio web en formato markdown y obtenemos los archivos HTML con MkDocs, nos daremos cuenta que este incluye su propia hoja de estilos en el resultado final. M\u00e1s adelante veremos como a\u00f1adir las nuestras propias. Tambi\u00e9n podremos incluir etiquetas HTML en el texto markdown, lo que nos permite personalizar atributos y reglas de estilo para un elemento concreto.</p>"},{"location":"002Estilos.html#el-atributo-style","title":"El atributo style","text":"<p>El atributo style de un elemento individual permite asignarle reglas de estilo particulares:</p> <pre><code>&lt;p title=\"texto de ayuda\"  style=\"color:red;text-align:center\" &gt;\n\nPasar el rat\u00f3n sobre este p\u00e1rrafo en color rojo.&lt;br&gt;\nSe desplegar\u00e1 autom\u00e1ticamente un texto de ayuda, \nsin pulsar el rat\u00f3n.\n\n&lt;/p&gt;\n</code></pre> <p>Lo que muestra:</p> <p> Pasar el rat\u00f3n sobre este p\u00e1rrafo en color rojo. Se desplegar\u00e1 autom\u00e1ticamente un texto de ayuda,  sin pulsar el rat\u00f3n. </p> <p>El formato del atributo style es:</p> <pre><code>&lt;etiqueta style= \" propiedad1:valor1 ; propiedad2:valor2 \" &gt;\n</code></pre> <p>Como sucede con el resto de atributos, aqu\u00ed escribimos atributo=\"valor\", siendo el valor el conjunto de reglas de estilo, separadas por un punto y coma, en formato nombre:valor, y todo ello entre comillas, formando un texto que es lo asignado al atributo style.</p> <p>Algunas propiedades comunes:</p> <ul> <li><code>color: black</code> - determina el color del texto</li> <li><code>background-color: white</code> - color del fondo</li> <li><code>font-family: Arial</code> - fuente de letra</li> <li><code>font-style: italic</code> - letra cursiva</li> <li><code>font-weight: bold</code> - letra en negrita</li> <li><code>text-align: center</code> - texto centrado</li> <li><code>font-size: 2em</code> - tama\u00f1o doble de letra</li> </ul> <p>CSS</p> <p>Las propiedades de estilo siguen una sintaxis denominada CSS, que es un est\u00e1ndar complementario de HTML. Las capacidades del lenguaje CSS cubren todas las necesidades de una p\u00e1gina web, y la descripci\u00f3n de estas reglas va m\u00e1s all\u00e1 del prop\u00f3sito de este cuaderno. Existen numerosos tutoriales CSS y HTML en la red.</p>"},{"location":"002Estilos.html#clases","title":"Clases","text":"<p>Dada una hoja de estilos, \u00bfcomo aplicar una regla a determinados elementos y a otros no? Una soluci\u00f3n es declarar que un elemento pertenece a una clase, y en la hoja de estilos, indicar las reglas aplicables a los elementos de esa clase.</p> <p>Para asignar un elemento a una clase, usar el atributo class. Por ejemplo, supongamos que todos los elementos que queremos que vayan en color rojo los definimos como pertenecientes a la clase \"rojo\":</p> <pre><code>&lt;h1 class=\"rojo\"&gt;T\u00edtulo del documento&lt;/h1&gt;\n&lt;p class=\"rojo\"&gt;Texto regular.&lt;/p&gt; \n</code></pre> <p>Y en la hoja de estilos definimos las propiedades de los elementos de esa clase, cuyo nombre se escribe con un punto de prefijo:</p> <pre><code>.rojo {\n  color: red;\n}\n</code></pre> <p>Si queremos que solo sea aplicable a los p\u00e1rrafos de cabecera, por ejemplo, en la hoja de estilos escribimos:</p> <pre><code>h1.rojo {\n  color: red;\n}\n</code></pre> <p>Y el resto de elementos de la clase \"rojo\" no se ver\u00e1n afectados.</p> <p>Un elemento puede pertenecer a varias clases, que se especifican entre las comillas, y separadas por un espacio en blanco:</p> <pre><code>&lt;p class=\"rojo importante\"&gt;Texto regular&lt;/p&gt;\n</code></pre>"},{"location":"002Estilos.html#identificadores","title":"Identificadores","text":"<p>En una hoja de estilos podemos hacer referencia a un elemento concreto (por ejemplo, un p\u00e1rrafo) utilizando su nombre, precedido por un s\u00edmbolo <code>#</code>:</p> <pre><code>#parrafo1 {\n  text-align: center;\n  color: red;\n}\n</code></pre> <p>Debemos \"bautizar\" el elemento usando su atributo <code>id</code>:</p> <pre><code>&lt;p id=\"parrafo1\"&gt; Texto centrado y en rojo &lt;/p&gt;\n</code></pre> <p>Estos identificadores tienen otras utilidades. Por ejemplo, podemos crear un enlace a otra parte del documento, utilizando el nombre del p\u00e1rrafo enlazado como destino. Lo veremos en su momento.</p>"},{"location":"003Scripts.html","title":"Scripts","text":"<p>Adem\u00e1s del formato de etiquetas HTML y las reglas de estilo CSS, la tercera \"pata\" del dise\u00f1o web son los scripts, es decir, peque\u00f1os fragmentos de programaci\u00f3n escritos en lenguaje JavaScript, que se descargan como parte del texto del archivo, o como ficheros aparte.</p> <p>El lenguaje JavaScript</p> <p>JavaScript fue desarrollado originalmente por la empresa Netscape, desarrolladora de uno de los primeros navegadores web de la historia. El nombre se debi\u00f3 a los planes que ten\u00eda Netscape para que su navegador fuera compatible con la tecnolog\u00eda Java, de forma que ambos lenguajes de programaci\u00f3n, Java y JavaScript fueran complementarios. Hist\u00f3ricamente esto ha generado cierta confusi\u00f3n. De hecho, son lenguajes diferentes.</p>"},{"location":"003Scripts.html#creando-un-par-de-scripts","title":"Creando un par de scripts","text":"<p>Supongamos el siguiente ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;p id=\"Texto\"&gt;Texto del documento&lt;/p&gt;\n\n&lt;button type=\"button\" onclick=\"CambiarRojo()\"&gt;Rojo&lt;/button&gt;\n&lt;button type=\"button\" onclick=\"CambiarAzul()\"&gt;Azul&lt;/button&gt;\n\n&lt;script&gt;\n\n    function CambiarRojo() {\n        var elemento=document.getElementById('Texto')\n        elemento.style.color='Red'\n    }\n\n    function CambiarAzul() {\n        var elemento=document.getElementById('Texto')\n        elemento.style.color='Blue'\n    }\n\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt; \n</code></pre> <p>En este ejemplo mostramos un texto y, a continuaci\u00f3n, dos botones. Pulsando en cada uno de ellos cambia el color del texto:</p> <p>Texto del documento</p> Rojo Azul <p>Cada bot\u00f3n se define en mitad del texto mediante etiquetas <code>&lt;button&gt;</code>:</p> <pre><code>&lt;button type=\"button\"&gt;\ntexto del bot\u00f3n\n&lt;/button&gt;\n</code></pre> <p>El atributo <code>onclick</code> establece lo que hay que hacer al pulsar sobre un bot\u00f3n:</p> <pre><code>&lt;button  type=\"button\"  onclick=\"CambiarRojo()\" &gt;\n</code></pre> <p>En este ejemplo le decimos que, al pulsar sobre el bot\u00f3n, ejecute una tarea a la que denominamos CambiarRojo(). A esto se le llama una funci\u00f3n, y los par\u00e9ntesis que acompa\u00f1an su nombre, la identifican como funci\u00f3n, entre otras cosas.</p> <p>En alg\u00fan lugar del documento tenemos que definir, entre etiquetas <code>&lt;script&gt;</code>, las instrucciones de nuestras dos funciones:</p> <pre><code>&lt;script&gt;\n\n  function CambiarRojo() {\n    instrucciones a ejecutar\n  }\n\n  function CambiarAzul() {\n    instrucciones a ejecutar\n  }\n\n&lt;/script&gt;\n</code></pre> <p>El bloque <code>&lt;script&gt;</code>, con las instrucciones a ejecutar para cada funci\u00f3n, se puede colocar en la secci\u00f3n <code>&lt;body&gt;</code> o en la cabecera <code>&lt;head&gt;</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n    &lt;head&gt;\n    &lt;script&gt;\n\n        function CambiarRojo() {\n            var elemento=document.getElementById('Texto')\n            elemento.style.color='Red'\n        }\n\n        function CambiarAzul() {\n            var elemento=document.getElementById('Texto')\n            elemento.style.color='Blue'\n        }\n\n    &lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;p id=\"Texto\"&gt;Texto del documento&lt;/p&gt;\n\n        &lt;button type=\"button\" onclick=\"CambiarRojo()\"&gt;Rojo&lt;/button&gt;\n        &lt;button type=\"button\" onclick=\"CambiarAzul()\"&gt;Azul&lt;/button&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt; \n</code></pre> <p>Las instrucciones de los scripts siguen la sintaxis del lenguaje de programaci\u00f3n JavaScript. Su estudio va mucho m\u00e1s all\u00e1 del prop\u00f3sito de este cuaderno. Para lo que aqu\u00ed necesitamos, nos basta con saber el significado de los archivos <code>.js</code> a\u00f1adidos por MkDocs.</p>"},{"location":"003Scripts.html#archivos-javascript","title":"Archivos JavaScript","text":"<p>La posibilidad de insertar scripts en el texto HTML resulta interesante en el caso de peque\u00f1os scripts. Para labores de programaci\u00f3n m\u00e1s ambiciosas, es costumbre poner los scripts en archivos aparte, con extensi\u00f3n <code>.js</code>, abreviatura de javascript.</p> <p>Hagamos un experimento. Vamos a crear el siguiente archivo <code>prueba.html</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n  &lt;body&gt;\n\n    &lt;p id=\"Texto\"&gt;Texto del documento&lt;/p&gt;\n\n    &lt;button type=\"button\" onclick=\"CambiarRojo()\"&gt;Rojo&lt;/button&gt;\n    &lt;button type=\"button\" onclick=\"CambiarAzul()\"&gt;Azul&lt;/button&gt;\n\n    &lt;script src=\"./cambiar_colores.js\"&gt;&lt;/script&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt; \n</code></pre> <p>Entre las etiquetas <code>&lt;script&gt;... &lt;/script&gt;</code> no ponemos nada. Usamos el atributo <code>src</code>, abreviatura de \"source\", para indicar al navegador que tome las instrucciones de un archivo llamado <code>cambiar_colores.js</code>, cuyo texto es:</p> <pre><code>function CambiarRojo() {\n  var elemento=document.getElementById('Texto')\n  elemento.style.color='Red'\n}\n\nfunction CambiarAzul() {\n  var elemento=document.getElementById('Texto')\n  elemento.style.color='Blue'\n}\n</code></pre> <p>Como veremos m\u00e1s adelante, algunas de las funcionalidades incorporadas por MkDocs se obtienen gracias a los archivos de script que se a\u00f1aden autom\u00e1ticamente a los archivos resultantes.</p>"},{"location":"004Sitio.html","title":"Crear un sitio web","text":"<p>Con todo lo visto, el proceso de desarrollo de un sitio web consiste b\u00e1sicamente en:</p> <ol> <li> <p>Crear tantos archivos de texto como p\u00e1ginas, en forma de ficheros plain text, con un contenido en formato HTML, es decir, texto con etiquetas. T\u00edpicamente, el archivo principal suele llamarse <code>index.html</code></p> </li> <li> <p>Crear una o varias hojas de estilo CSS</p> </li> <li> <p>Crear uno o varios archivos de scripts desarrollados en lenguaje JavaScript.</p> </li> <li> <p>A\u00f1adir a todo esto los archivos auxiliares necesarios, im\u00e1genes, etc.</p> </li> <li> <p>Copiar todo el conjunto de archivos a un servidor web, utilizando las herramientas de subida de documentos proporcionadas por dicho servidor.</p> </li> <li> <p>Configurar el sitio para que, cuando el servidor reciba peticiones de usuarios, se descargue la p\u00e1gina principal o la solicitada.</p> </li> </ol> <p>Como alternativa, como paso previo, tenemos la posibilidad de crear archivos de texto en formato markdown y convertirlos a formato HTML. Es lo que haremos en este cuaderno.</p> <p>Este tipo de sitios web se denominan est\u00e1ticos, ya que consisten en un conjunto de ficheros que se descargan \"tal cual\" desde el servidor. Existen otros sitios basados en gestores de contenidos, un software que construye \"al vuelo\" el texto de la p\u00e1gina a descargar a partir de varias piezas de informaci\u00f3n, bases de datos, etc. Pero ese no es el caso de lo que veremos en este cuaderno.</p>"},{"location":"005Herramientas.html","title":"Espacio de trabajo","text":"<p>Ahora que ya sabemos que vamos a crear archivos de texto y convertirlos en p\u00e1ginas web, veamos las herramientas necesarias.</p>"},{"location":"005Herramientas.html#editor","title":"Editor","text":"<p>El primer paso es descargar e instalar un editor de textos, del tipo plain text, si no nos gusta el que viene de serie con nuestro sistema operativo. Para crear archivos markdown, es costumbre utilizar editores especializados en esta tarea, que muestran dos paneles, uno de edici\u00f3n y otro de previsualizaci\u00f3n con el aspecto final del documento:</p> <p></p> <p>En la elecci\u00f3n del editor existen cientos de alternativas. Yo uso Visual Studio Code, distribuido por Microsoft de forma gratuita, con versiones para diferentes sistemas operativos. Utilizo entornos Mac y Linux, indistintamente, pero todo lo aqu\u00ed descrito tambi\u00e9n es v\u00e1lido para Windows.</p> <p>Visual Studio Code es un editor muy potente, con miles de posibilidades, que evoluciona r\u00e1pidamente, y cuya descripci\u00f3n va m\u00e1s all\u00e1 del prop\u00f3sito de este cuaderno. En todo caso, tenemos varias p\u00e1ginas web de inter\u00e9s:</p> <ul> <li>P\u00e1gina principal</li> <li>Documentaci\u00f3n</li> <li>Editando archivos markdown</li> </ul> <p>Si Visual Studio Code nos parece complejo, encontraremos otras opciones en la red. Basta con hacer una b\u00fasqueda del t\u00e9rmino \"editores markdown\".</p>"},{"location":"005Herramientas.html#conversor-web","title":"Conversor web","text":"<p>Tras crear los cap\u00edtulos de nuestro cuaderno en forma de archivos de texto markdown, vamos a utilizar un software llamado MkDocs para generar los ficheros HTML que formar\u00e1n el sitio web.</p> <p>La labor que realizar\u00e1 MkDocs es:</p> <ul> <li>tomar todos los archivos de texto markdown y generar sus correspondientes ficheros HTML.</li> <li>a\u00f1adir otros contenidos HTML para mostrar \u00edndices, tabla de contenido, barra de cabecera y pie de p\u00e1gina, etc.</li> <li>a\u00f1adir autom\u00e1ticamente ficheros CSS con las reglas de estilo usadas por MkDocs</li> <li>a\u00f1adir scripts</li> </ul> <p>Complementaremos MkDocs con otro software denominado Material for MkDocs, lo que a\u00f1ade capacidades de presentaci\u00f3n y navegaci\u00f3n.</p> <p>MkDocs es un software creado en lenguaje de programaci\u00f3n Python, y para ejecutarse, necesitamos tener el int\u00e9rprete de Python en nuestro ordenador, es decir, un software capaz de entender programas Python y ejecutarlos. Por lo tanto, la secuencia de instalaci\u00f3n es:</p> <ul> <li>Instalar Python</li> <li>Instalar MkDocs</li> <li>Instalar Material for Mkdocs</li> </ul> <p>De todas formas, la instalaci\u00f3n de Material for Mkdocs resuelve autom\u00e1ticamente la de MkDocs y otros paquetes de software complementarios:</p> <ul> <li>Python Markdown, que es el complemento que usa MkDocs para a\u00f1adir capacidades a la sintaxis markdown</li> <li>PyMdown Extensions es otro complemento para a\u00f1adir m\u00e1s funcionalidades a markdown</li> <li>Pygments es un software que permite mostrar textos en diferentes colores. Es t\u00edpico cuando se trata de mostrar ejemplos de programaci\u00f3n en un manual t\u00e9cnico.</li> </ul> <p>Por lo tanto, el proceso completo se reduce a asegurarnos de que tenemos el int\u00e9rprete de Python, y seguidamente instalar Material for Mkdocs. Este segundo paso instalar\u00e1 todo lo dem\u00e1s.</p>"},{"location":"005Herramientas.html#terminal-de-comandos","title":"Terminal de comandos","text":"<p>MkDocs es un programa que se ejecuta desde el terminal de comandos de nuestro sistema operativo, por lo que conviene estar familiarizados con su uso b\u00e1sico. En Windows, se trata de un programa llamado <code>cmd</code>. Ver Wikipedia. En un Mac, encontraremos el programa Terminal en la carpeta Aplicaciones, apartado Utilidades.</p> <p>Aunque los comandos difieren de un sistema a otro (Windows, Mac, Linux), los aqu\u00ed descritos suelen ser comunes, quiz\u00e1s con ligeras diferencias. </p> <p>T\u00edpicamente, al iniciar el Terminal se muestra un texto indicando la carpeta actual, es decir, la que se utiliza por defecto cuando en un comando no indicamos nada, seguida de un s\u00edmbolo <code>&gt;</code>, <code>$</code>, <code>#</code> u otro similar, denominado prompt:</p> <pre><code>C:\\Users\\nombreUsuario &gt;\n</code></pre> <p>Este prompt nos invita a introducir un comando, que se ejecutar\u00e1 al pulsar Enter.</p> <p>Si no estamos familiarizados con los comandos de nuestro ordenador, en la red encontraremos numerosos tutoriales sobre el tema. En este cuaderno vamos a mencionar tres comandos bastante relevantes:</p> <ul> <li> <p>para ejecutar un programa, se introduce su nombre. Por ejemplo, para iniciar el editor de texto bloc de notas en Windows:</p> <pre><code>&gt; notepad\n</code></pre> <p>T\u00edpicamente, los comandos pueden ir acompa\u00f1ados de \"argumentos\". Por ejemplo, para iniciar el editor con un archivo abierto para su edici\u00f3n:</p> <pre><code>&gt; notepad miarchivo.txt\n</code></pre> </li> <li> <p>para conocer cual es el directorio actual usar el comando <code>cd</code> en Windows o <code>pwd</code> en Mac/Linux</p> <pre><code>&gt; cd\n</code></pre> <p>lo que muestra algo as\u00ed como:</p> <pre><code>C:\\Users\\nombreUsuario\n</code></pre> </li> <li> <p>para establecer como actual otro directorio, usar el comando <code>cd</code> (cambiar de directorio) con el nombre de la carpeta en cuesti\u00f3n como argumento:</p> <pre><code>&gt; cd \\ruta_directorio\\nombre_directorio\n</code></pre> <p>En las plataformas Mac/Linux se usa la barra <code>/</code> en lugar de la invertida <code>\\</code>, que es t\u00edpica de Windows:</p> <pre><code>$ cd /ruta_directorio/nombre_directorio\n</code></pre> </li> </ul>"},{"location":"005Herramientas.html#python","title":"Python","text":"<p>La instalaci\u00f3n del int\u00e9rprete de lenguaje Python es el primer requisito a cumplir. Podemos comprobar que ya lo tenemos abriendo el terminal de comandos y ejecutando:</p> <pre><code>$ python -V\n</code></pre> <p>O bien, dependiendo de nuestra m\u00e1quina:</p> <pre><code>$ python3 -V\n</code></pre> <p>lo que nos deber\u00eda indicar la versi\u00f3n de Python que hay en nuestro equipo:</p> <pre><code>$ python3 -V\nPython 3.12.4\n</code></pre> <p>\u00a1Atenci\u00f3n! El argumento <code>-V</code> se escribe en may\u00fasculas.</p> <p>Python 3</p> <p>Python es un lenguaje de programaci\u00f3n que ha ido evolucionando con el paso de los a\u00f1os. La versi\u00f3n m\u00e1s reciente es Python 3, por lo que en algunas instalaciones, es posible que el comando a ejecutar sea <code>pyton3</code> en lugar de <code>python</code></p> <p>Si no tenemos el int\u00e9rprete de Python, hay que instalarlo siguiendo las instrucciones de la p\u00e1gina web oficial. T\u00edpicamente, podemos hacerlo a partir de la Microsoft Store (Windows), descargando el programa instalador de la p\u00e1gina web oficial (Windows/Mac) o acudiendo al repositorio de nuestra distribuci\u00f3n Linux.</p>"},{"location":"005Herramientas.html#instalar-material-for-mkdocs","title":"Instalar Material for MkDocs","text":"<p>Una vez que contamos con el int\u00e9rprete de Python en nuestro ordenador, podemos instalar y ejecutar programas escritos en Python. MkDocs y todos los complementos utilizados se instalan com el comando <code>pip</code> (package installer for Python), un peque\u00f1o programa que acompa\u00f1a al int\u00e9rprete de Python. Comprobamos su existencia abriendo el terminal de comandos y tecleando:</p> <pre><code>$ pip --version\n</code></pre> <p>O bien con:</p> <pre><code>$ pip3 --version\n</code></pre> <p>Obtenemos la lista de paquetes de software Python instalados en nuestro equipo con el comando:</p> <pre><code>$ pip3 list\n</code></pre> <p>La instalaci\u00f3n de Material for MkDocs incluye autom\u00e1ticamente el resto de m\u00f3dulos: MkDocs, Python Markdown, PyMdown Extensions y Pygments. Basta con ejecutar el comando:</p> <pre><code>$ pip3 install mkdocs-material\n</code></pre> <p>Dependiendo del sistema operativo, es posible que haya que hacer la instalaci\u00f3n con permisos de administrador.</p>"},{"location":"005Herramientas.html#actualizar-material-for-mkdocs","title":"Actualizar Material for MkDocs","text":"<p>Podemos comprobar cual es la versi\u00f3n actual de Material for MkDocs con el comando: </p> <pre><code>$ pip3 show mkdocs-material\n</code></pre> <p>Para actualizar a una nueva versi\u00f3n, ejecutamos:</p> <pre><code>$ pip3 install --upgrade --force-reinstall mkdocs-material\n</code></pre> <p>Podemos comprobar las novedades de cada versi\u00f3n en la p\u00e1gina web de Material for MkDocs.</p> <p>La actualizaci\u00f3n de Material for MkDocs comprueba autom\u00e1ticamente el resto de m\u00f3dulos mencionados MkDocs, Python Markdown, PyMdown Extensions y Pygments, actualiz\u00e1ndolos si es necesario.</p>"},{"location":"006CrearProyecto.html","title":"Creando un cuaderno","text":"<p>Una vez que tenemos el editor de texto y Material for MkDocs instalados, podemos empezar a crear nuestro futuro sitio web de documentaci\u00f3n. Cada cuaderno ser\u00e1 un proyecto aparte, y cada cap\u00edtulo del cuaderno, un archivo de texto.</p>"},{"location":"006CrearProyecto.html#primeros-pasos","title":"Primeros pasos","text":"<p>El primer paso de todo proyecto es crear un directorio para alojar los archivos de trabajo. Abrimos el terminal de comandos del sistema operativo (en mi caso Linux / Mac) y nos situamos en ese nuevo directorio:</p> <pre><code>$ cd miProyecto\n</code></pre> <p>Nota</p> <p>Dependiendo del sistema operativo, muchos exploradores de archivos nos permiten navegar de forma gr\u00e1fica por el contenido del disco duro, a golpe de rat\u00f3n. Pulsando con el bot\u00f3n secundario sobre una carpeta, aparecer\u00e1 un men\u00fa emergente con alguna opci\u00f3n \"abrir terminal en esta carpeta\".</p> <p>Si contamos con esa posibilidad, nos ahorraremos muchos comandos <code>cd</code>.</p> <p>Vamos a crear una estructura b\u00e1sica de proyecto. Comprobamos que tenemos <code>MkDocs</code>:</p> <pre><code>$ mkdocs --version\n</code></pre> <p>y verificamos que estamos en la carpeta correcta:</p> <pre><code>$ pwd\n</code></pre> <p>o bien, en Windows:</p> <pre><code>&gt; cd\n</code></pre> <p>Ejecutamos el comando:</p> <pre><code>$ mkdocs new .\n</code></pre> <p>lo que indica a MkDocs que queremos un nuevo proyecto en el directorio actual, representado por ese punto al final del comando. Esto crea la siguiente estructura de carpetas y archivos:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Siendo:</p> <ul> <li> <p>El archivo <code>mkdocs.yml</code> es un archivo de texto con la configuraci\u00f3n del proyecto. Debe estar siempre presente en el directorio ra\u00edz del mismo.</p> <p>Los archivos <code>.yml</code> son ficheros plain text que siguen el formato YAML (no son archivos markdown). Podemos ver las especificaciones en https://yaml.org</p> </li> <li> <p>La carpeta <code>docs</code> contiene los documentos en formato markdown, siendo archivos de texto con sufijo <code>.md</code>. En principio tendremos un \u00fanico documento, que t\u00edpicamente se llamar\u00e1 <code>index.md</code>. A medida que queramos a\u00f1adir cap\u00edtulos a nuestro cuaderno, crearemos nuevos archivos <code>.md</code> en esta carpeta <code>docs</code>.</p> </li> </ul> <p>MkDocs convertir\u00e1 todos los archivos markdown que encuentre en la carpeta <code>docs</code> y sus subcarpetas. Considerar\u00e1 como archivos markdown aquellos de texto que tengan un nombre con sufijo \".md\", \".markdown\", \".mdown\", \".mkdn\", \".mkd\" o \".md\"</p> <p>\u00a1Cuidado!</p> <p>Dependiendo de nuestro sistema operativo y la instalaci\u00f3n de las herramientas, es posible que, en el terminal de comandos, la palabra <code>mkdocs</code> no sea reconocida como nombre de programa a ejecutar. </p> <p>MkDocs es un m\u00f3dulo desarrollado en Python, por lo que tambi\u00e9n se puede ejecutar con:</p> <pre><code>$ python3 -m mkdocs --version\n</code></pre> <p>Es decir, ejecutamos el int\u00e9rprete de Python pas\u00e1ndole un m\u00f3dulo a ejecutar (opci\u00f3n <code>-m</code>) llamado <code>mkdocs</code>. A\u00f1adimos los argumentos a pasar a <code>mkdocs</code>.</p>"},{"location":"006CrearProyecto.html#el-formato-yaml","title":"El formato Yaml","text":"<p>La configuraci\u00f3n del proyecto se guarda en <code>mkdocs.yml</code>. En l\u00edneas generales, contiene una colecci\u00f3n de parejas clave:valor, cada una de ellas en l\u00ednea aparte. Se admiten l\u00edneas en blanco, que ser\u00e1n puramente decorativas:</p> <pre><code>site_name: Mi proyecto de documentacion\nsite_url: https://midominio.org/miproyecto\n\ndocs_dir: docs\n</code></pre> <p>En este ejemplo, especificamos el nombre del proyecto, la URL de nuestro futuro sitio web, y la carpeta de documentos, que por defecto, si no indicamos nada, ser\u00e1 \"docs\". La configuraci\u00f3n del proyecto se puede ajustar introduciendo los par\u00e1metros necesarios en el archivo <code>mkdocs.yml</code>.</p> <p>Cada variable puede ser de diferente tipo, que ser\u00e1 deducido autom\u00e1ticamente. Por ejemplo:</p> <ul> <li> <p>un texto. Las comillas son opcionales, y pueden usarse ap\u00f3strofos en su lugar:</p> <pre><code>nombre: \"Luis Gutierrez\"\n</code></pre> </li> <li> <p>un n\u00famero:</p> <pre><code>edad: 58\n</code></pre> </li> <li> <p>un valor true o false</p> <pre><code>activado: true\n</code></pre> </li> <li> <p>una lista. Los elementos se escriben en l\u00edneas aparte, con sangr\u00eda, y precedidos por un gui\u00f3n</p> <pre><code>participes:\n    - Luis\n    - Ana\n    - Juan\n</code></pre> </li> <li> <p>una colecci\u00f3n de elementos clave:valor</p> <pre><code>opciones:\n    idioma: es\n    avisos: true\n</code></pre> </li> </ul> <p>Los valores de una colecci\u00f3n pueden ser a su vez otras colecciones:</p> <pre><code>    opciones:\n        idioma: \n            - es\n            - fr\n            - en\n        avisos: true\n</code></pre> <p>El car\u00e1cter <code>#</code> da inicio a lo que ser\u00e1 considerado como comentarios e ignorado. Se toma como tal todo el texto desde <code>#</code> hasta el fin de l\u00ednea.</p> <pre><code>#-------------------------\n# opciones del proceso\n#-------------------------\n\nopciones:\n    idioma: es\n    avisos: true\n</code></pre> <p>Las l\u00edneas en blanco son puramente decorativas.</p> <p>\u00a1Importante!: los elementos de una lista o de cualquier colecci\u00f3n de parejas clave/valor han de ir sangrados. Para la sangr\u00eda hemos de utilizar espacios, quedando prohibidos los caracteres de tabulaci\u00f3n.</p>"},{"location":"006CrearProyecto.html#editando-los-archivos-iniciales","title":"Editando los archivos iniciales","text":"<p>Tras crear la estructura b\u00e1sica del proyecto, tenemos un archivo <code>index.md</code> con un texto de pruebas, y un archivo <code>mkdocs.yml</code> con la configuraci\u00f3n del proyecto. </p> <p>Vamos a abrir con nuestro editor de textos el primero de esos dos archivos:</p> <pre><code># Welcome to MkDocs\n\nFor full documentation visit [mkdocs.org](https://www.mkdocs.org).\n\n## Commands\n\n* `mkdocs new [dir-name]` - Create a new project.\n* `mkdocs serve` - Start the live-reloading docs server.\n* `mkdocs build` - Build the documentation site.\n* `mkdocs -h` - Print help message and exit.\n\n## Project layout\n\n    mkdocs.yml    # The configuration file.\n    docs/\n        index.md  # The documentation homepage.\n        ...       # Other markdown pages, images and other files.\n</code></pre> <p>Vamos a borrar el contenido de <code>index.md</code> y sustituirlo por uno propio:</p> <pre><code># Mi primer documento\n\n## Introducci\u00f3n\n\nEsta es una p\u00e1gina de pruebas para explorar el funcionamiento de MkDocs,\nun conversor de formato *markdown* a *HTML*.\n\nPara ver la documentaci\u00f3n de MkDocs visite [mkdocs.org](https://www.mkdocs.org).\n\n## Lista de comandos\n\n* `mkdocs new .` - Crea un nuevo proyecto en el directorio actual\n* `mkdocs build` - Convierte los archivos markdown a formato web\n* `mkdocs -h` - Muestra un texto de ayuda\n</code></pre> <p>Tambi\u00e9n vamos a modificar el archivo de configuraci\u00f3n <code>mkdocs.yml</code>:</p> <pre><code>site_name: Mi primera p\u00e1gina web\n</code></pre>"},{"location":"006CrearProyecto.html#convertir-a-html","title":"Convertir a HTML","text":"<p>Vamos a generar un sitio web con el contenido que tenemos por ahora. El resultado final consistir\u00e1 en uno o varios archivos de texto en formato HTML, que subiremos al servidor donde se va a alojar nuestro sitio. </p> <p>Abrimos el terminal de comandos y nos situamos en la carpeta principal del proyecto, all\u00ed donde se encuentra el archivo mkdocs.yml:</p> <pre><code>$ cd miproyecto\n</code></pre> <p>Ejecutamos el comando:</p> <pre><code>$ mkdocs build\n</code></pre> <p>Si obtenemos un mensaje de error:</p> <pre><code>Error: Config file 'mkdocs.yml' does not exist.\n</code></pre> <p>significa que nos hemos situado en la carpeta equivocada. T\u00edpicamente, el directorio de trabajo se suele mostrar a la izquierda del prompt. Revisarlo y repetir el comando <code>cd</code>.</p> <p>Si finalmente todo va bien, se generan los archivos HTML en una nueva carpeta <code>site</code>, dentro de la carpeta de proyecto. El contenido de esta carpeta es lo que vamos a subir al servidor, pero por ahora podemos examinarlo en nuestra computadora. El documento principal es <code>index.html</code>. Haciendo doble clic sobre el mismo, se visualizar\u00e1 en la ventana del navegador web:</p> <p></p> <p>Los colores, tipo de letra, presentaci\u00f3n, etc. los a\u00f1ade autom\u00e1ticamente <code>MkDocs</code>. V\u00e9ase que el \u00edndice que hay a la izquierda se construye a partir de los p\u00e1rrafos de encabezado de secci\u00f3n, que en formato markdown se marcan con s\u00edmbolos <code>#</code>.</p>"},{"location":"006CrearProyecto.html#formato-markdown","title":"Formato markdown","text":"<p>Una vez visto el aspecto que tiene nuestra p\u00e1gina web de pruebas, vamos a examinar su aspecto en formato markdown. Abrimos con un editor de textos el archivo <code>docs/index.md</code>:</p> <ul> <li>los p\u00e1rrafos se separan con una l\u00ednea en blanco</li> <li> <p>los p\u00e1rrafos de t\u00edtulo de p\u00e1gina van precedidos por un car\u00e1cter <code>#</code>, que desaparecer\u00e1 al convertir a html:</p> <pre><code># Mi primer documento\n</code></pre> </li> <li> <p>el texto de la p\u00e1gina se puede dividir en varios apartados, cada uno de ellos con un p\u00e1rrafo de t\u00edtulo. Estos encabezados van precedidos por dos o m\u00e1s caracteres <code>#</code></p> <pre><code>## Lista de comandos\n</code></pre> </li> <li> <p>los enlaces se indican en formato <code>[texto a mostrar](URL)</code></p> </li> <li> <p>las entradas de una lista van precedidas por un gui\u00f3n o un asterisco</p> </li> <li> <p>El texto entre acentos invertidos (`) se muestra en un tipo de letra especial</p> </li> </ul> <p>El par\u00e1metro <code>site_name</code> en el archivo de configuraci\u00f3n <code>mkdocs.yml</code> establece el texto a mostrar en la barra de cabecera de la p\u00e1gina web.</p>"},{"location":"006CrearProyecto.html#tema","title":"Tema","text":"<p>MkDocs genera las p\u00e1ginas web con una presentaci\u00f3n por defecto, pero permite utilizar otros formatos. Al conjunto de reglas de presentaci\u00f3n se le denomina \"Tema\". Podemos cambiarlo en el archivo de configuraci\u00f3n <code>mkdocs.yml</code>.</p> <p>MkDocs se suministra con dos temas, el que se utiliza por defecto y otro llamado <code>readthedocs</code>. Este se activa indic\u00e1ndolo en <code>mkdocs.yml</code>:</p> <pre><code>site_name: Mi primera p\u00e1gina web\nsite_url: https://midominio.org/miproyecto\n\ntheme:\n  name: readthedocs\n</code></pre> <p>La entrada <code>site_url</code> por ahora no es necesaria, pero lo ser\u00e1 cuando subamos el proyecto al servidor. El apartado theme establece la configuraci\u00f3n de las opciones de presentaci\u00f3n. </p> <p>Para establecer el tema por defecto de forma expl\u00edcita, escribimos:</p> <pre><code>theme:\n  name: mkdocs\n</code></pre> <p>El software Material for MkDocs que hemos instalado extiende las capacidades originales de MkDocs. Utiliza un tema propio:</p> <pre><code>site_name: Mi primera p\u00e1gina web\nsite_url: https://midominio.org/miproyecto\n\ntheme:\n  name: material\n</code></pre> <p>Para ver el efecto del nuevo tema aplicado, repetimos la conversi\u00f3n a html con el comando:</p> <pre><code>$ mkdocs build\n</code></pre> <p>Y ahora, el archivo <code>index.html</code> tiene el aspecto proporcionado por Material:</p> <p></p> <p>En el panel izquierdo vemos un \u00edndice de p\u00e1ginas (por ahora solo tenemos una). Por defecto, cada entrada de la lista se construye a partir del p\u00e1rrafo de t\u00edtulo principal.</p> <p>En el panel derecho tenemos un \u00edndice de apartados dentro del texto del documento.</p>"},{"location":"006CrearProyecto.html#carpetas","title":"Carpetas","text":"<p>Las carpetas por defecto son <code>docs</code>, para los documentos markdown, y <code>site</code> para el sitio web generado. Podemos establecer otros nombres en el archivo mkdocs.yml:</p> <pre><code>site_name: Mi proyecto de documentacion\nsite_url: https://midominio.org/miproyecto\n\ntheme:\n  name: material\n\ndocs_dir: docs\nsite_dir: site\n</code></pre> <p>Las carpetas se especifican asumiendo que \"cuelgan\" del directorio ra\u00edz de proyecto. Por ejemplo, si queremos guardar los archivos markdown en una subcarpeta:</p> <pre><code>docs_dir: docs/ficheros_markdown\n</code></pre>"},{"location":"006CrearProyecto.html#anadir-mas-paginas","title":"A\u00f1adir m\u00e1s p\u00e1ginas","text":"<p>Inicialmente, nuestro proyecto se crea con un \u00fanico documento, <code>docs/index.md</code>, que se convertir\u00e1 en <code>site/index.html</code>. Para a\u00f1adir m\u00e1s p\u00e1ginas, basta con crear nuevos archivos markdown en la carpeta <code>docs</code>.</p> <p><code>MkDocs</code> generar\u00e1 autom\u00e1ticamente tantos archivos HTML como ficheros markdown encuentre. Pero para incluirlos en el \u00edndice del panel de navegaci\u00f3n izquierdo, tenemos que crear una lista de navegaci\u00f3n en el archivo <code>mkdocs.yml</code>:</p> <pre><code>site_name: Mi proyecto de documentacion\nsite_url: https://midominio.org/miproyecto\n\ntheme:\n  name: material\n\ndocs_dir: docs\nsite_dir: site\n\nnav:\n  - Inicio: index.md\n  - Cap\u00edtulo 1: capitulo1.md\n  - Cap\u00edtulo 2: capitulo2.md\n  - Cap\u00edtulo 3: capitulo3.md  \n</code></pre> <p>Cada entrada de la lista est\u00e1 formada por una pareja Texto a mostrar: nombre de archivo.</p> <p>En la lista solo pondremos los archivos a incluir en el \u00edndice. Aquellos que no mencionemos ser\u00e1n convertidos a HTML, pero no se visualizar\u00e1n en el \u00edndice. Para acceder a ellos, necesitamos poner alg\u00fan enlace en el texto de otra p\u00e1gina:</p> <pre><code>V\u00e9ase [referencia](referencia.md) para m\u00e1s informaci\u00f3n\n</code></pre> <p>Recu\u00e9rdese que, seg\u00fan la sintaxis markdown, los enlaces se especifican en formato <code>[texto](URL)</code>. En este caso, la URL a enlazar es el nombre del archivo.</p>"},{"location":"006CrearProyecto.html#previsualizacion","title":"Previsualizaci\u00f3n","text":"<p>Sin llegar a crear el sitio web, podemos hacer una conversi\u00f3n \"al vuelo\" y visualizar los resultados en la ventana del navegador web. Para ello, tenemos que poner en marcha MkDocs en modo \"servidor\". </p> <p>Nos situamos en la carpeta principal del proyecto:</p> <pre><code>$ cd miproyecto\n</code></pre> <p>y ejecutamos:</p> <pre><code>$ mkdocs serve\n</code></pre> <p>Esto muestra algunos mensajes del proceso de conversi\u00f3n, y si todo va bien, indica que la p\u00e1gina web resultante ser\u00e1 visible en una direcci\u00f3n web:</p> <pre><code>INFO    -  Building documentation...\nINFO    -  Cleaning site directory\nINFO    -  Documentation built in 0.41 seconds\nINFO    -  [10:28:25] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO    -  [10:28:25] Serving on\n           http://127.0.0.1:8000/miproyecto/\n</code></pre> <p>El servidor se mantiene activo en segundo plano, y cada vez que guardemos los cambios de cualquier archivo, se regenerar\u00e1n las p\u00e1ginas. Podemos tener abiertas las dos ventanas, el editor y el navegador web, y los cambios en una se reflejar\u00e1n en la otra. En el navegador, introducir la URL indicada, en este ejemplo, <code>http://127.0.0.1:8000/miproyecto/</code>.</p> <p>El servidor MkDocs se detiene seleccionando la ventana del Terminal de comandos y pulsando Ctrl+C (o la tecla establecida en nuestro sistema operativo para interrumpir la ejecuci\u00f3n de comandos).</p>"},{"location":"006CrearProyecto.html#anatomia-del-sitio-web-generado","title":"Anatom\u00eda del sitio web generado","text":"<p>El comando que hemos ejecutado:</p> <pre><code>$ mkdocs build\n</code></pre> <p>crea una carpeta <code>/site</code> con todos los archivos que forman nuestro sitio web, y que vamos a subir al servidor. A medida que vayamos desarrollando proyectos m\u00e1s elaborados, el contenido de <code>/site</code> se ir\u00e1 volviendo m\u00e1s complejo.</p> <p>Veamos un resumen del contenido b\u00e1sico de la carpeta:</p> <ul> <li> <p>una lista de archivos <code>html</code>, uno por cada documento markdown. Ser\u00e1n nuestras futuras p\u00e1ginas web. El archivo principal es <code>index.html</code></p> </li> <li> <p>una p\u00e1gina a\u00f1adida de forma autom\u00e1tica, <code>404.html</code>. Ser\u00e1 lo que se muestre cuando un enlace hace referencia a una p\u00e1gina que no existe</p> </li> <li> <p>una carpeta <code>/assets/images</code> con iconos y contenidos gr\u00e1ficos</p> </li> <li> <p>una carpeta <code>/assets/javascripts</code> con los scripts a\u00f1adidos por MkDocs, proporcionando diferentes funcionalidades a nuestro sitio web</p> </li> <li> <p>una carpeta <code>/assets/stylesheets</code> con hojas de estilo y formatos de presentaci\u00f3n</p> </li> <li> <p>una carpeta <code>/search</code> con los elementos que utiliza la funci\u00f3n de b\u00fasqueda  disponible en la barra superior de cada p\u00e1gina cuando en nuestro sitio web hay varias p\u00e1ginas.</p> </li> </ul>"},{"location":"100Markdown.html","title":"Sintaxis Markdown","text":"<p>Ahora que hemos visto como crear un proyecto, profundicemos en la sintaxis markdown.</p> <p>Markdown es un formato sencillo y f\u00e1cil de escribir, ideado en 2004  por John Gruber. Se trata de un proyecto que ha evolucionado muy poco desde su creaci\u00f3n, lo que ha dado lugar a que surjan diferentes versiones mejoradas. McDocs utiliza Python Markdown, bastante parecida a la versi\u00f3n original, con algunos a\u00f1adidos. </p> <p>Es posible que el editor que utilicemos, que en mi caso es Visual Studio Code, cuente con un panel de previsualizaci\u00f3n que utiliza su propia versi\u00f3n de markdown. Esto hace que el aspecto final de las p\u00e1ginas web generadas por MkDocs no coincida con la previsualizaci\u00f3n ofrecida por el editor.</p> <p>Podemos ver las especificaciones originales en la p\u00e1gina web de John Gruber, daringfirewall. En esta misma p\u00e1gina encontraremos un peque\u00f1o editor on line para experimetar con el formato markdown. Para ello, introducir un texto cualquiera en el panel Markdown source:</p> <pre><code>Hola\n</code></pre> <p>Al pulsar en el bot\u00f3n <code>[Convert]</code> se mostrar\u00e1 un panel HTML:</p> <pre><code>&lt;p&gt;Hola&lt;/p&gt;\n</code></pre> <p>Y debajo otro panel Preview con el aspecto final del texto.</p>"},{"location":"101MkdParrafos.html","title":"P\u00e1rrafos","text":"<p>En un documento markdown simple, el texto se divide en varios p\u00e1rrafos. Veamos como estructurarlos.</p>"},{"location":"101MkdParrafos.html#delimitar-parrafos","title":"Delimitar p\u00e1rrafos","text":"<p>En principio, todo documento es una simple secuencia de caracteres:</p> <pre><code>Este es un texto de varias l\u00edneas.\nCada una de ellas finaliza con\nun salto de l\u00ednea.\nAl visualizar la p\u00e1gina web generada\nen el navegador,\ntodas las l\u00edneas se concatenar\u00e1n \npara formar una \u00fanica l\u00ednea de texto.\n</code></pre> <p>Cuando el navegador descarga la p\u00e1gina web y la presenta, las l\u00edneas de texto consecutivas se concatenar\u00e1n en una \u00fanica l\u00ednea, que se ajustar\u00e1 dependiendo del ancho de la ventana. Los espacios entre palabras se reducen a un espacio. </p> <p>En el navegador, el archivo HTML descargado se visualizar\u00e1 de la siguiente forma:</p>  Este es un texto de varias l\u00edneas. Cada una de ellas finaliza con un salto de l\u00ednea. Al visualizar la p\u00e1gina web generada en el navegador, todas las l\u00edneas se concatenar\u00e1n  para formar una \u00fanica l\u00ednea de texto.  <p>Para separar p\u00e1rrafos, en el archivo markdown tenemos que insertar una l\u00ednea en blanco:</p> <pre><code>Este es el primer p\u00e1rrafo. Es lo suficientemente\nlargo como para ocupar varias l\u00edneas, que ser\u00e1n visualizadas\ncomo un bloque de texto, sin separaci\u00f3n entre l\u00edneas.\n\nEste es el segundo p\u00e1rrafo. Dejamos una l\u00ednea\nen blanco para separarlo del primero.\n</code></pre> <p>Lo que mostrar\u00e1 los p\u00e1rrafos por separado, a\u00f1adiendo un espaciado entre ellos:</p> <p>Este es el primer p\u00e1rrafo. Es lo suficientemente largo como para ocupar varias l\u00edneas, que ser\u00e1n visualizadas como un bloque de texto, sin separaci\u00f3n entre l\u00edneas.</p> <p>Este es el segundo p\u00e1rrafo. Dejamos una l\u00ednea en blanco para separarlo del primero.</p> <p>La conversi\u00f3n a HTML a\u00f1ade una etiqueta <code>&lt;p&gt;</code> al inicio de cada p\u00e1rrafo y otra <code>&lt;/p&gt;</code> al final:</p> <pre><code>&lt;p&gt;Este es el primer p\u00e1rrafo. Es lo suficientemente\nlargo como para ocupar varias l\u00edneas, que ser\u00e1n visualizadas\ncomo un bloque de texto, sin separaci\u00f3n entre l\u00edneas.&lt;/p&gt;\n\n&lt;p&gt;Este es el segundo p\u00e1rrafo. Dejamos una l\u00ednea\nen blanco para separarlo del primero.&lt;/p&gt;&gt;\n</code></pre> <p>El navegador ignora los saltos de l\u00ednea y las l\u00edneas en blanco. </p> <p>En los archivos markdown se considera l\u00ednea en blanco aquella que no contiene caracteres o solo tiene espacios en blanco. Si escribimos varias l\u00edneas en blanco entre dos p\u00e1rrafos, el exceso ser\u00e1 ignorado y contar\u00e1n como una sola.</p> <p>Puede ser una buena idea escribir los textos de forma que en cada l\u00ednea pongamos una frase, limitando el tama\u00f1o de las l\u00edneas y mejorando la legibilidad, en la seguridad de que en la conversi\u00f3n se unir\u00e1n los textos para formar el p\u00e1rrafo completo.</p>"},{"location":"101MkdParrafos.html#saltos-de-linea","title":"Saltos de l\u00ednea","text":"<p>Ya hemos visto que podemos forzar un salto de l\u00ednea insertando manualmente una etiqueta html <code>&lt;br&gt;</code> en mitad del texto. MkDocs respeta las etiquetas html y las deja como parte del texto generado.</p> <p>Por ejemplo:</p> <pre><code>Este es el primer p\u00e1rrafo. &lt;br&gt; Es lo suficientemente\nlargo como para ocupar varias l\u00edneas, que ser\u00e1n visualizadas\ncomo un bloque de texto, sin separaci\u00f3n entre l\u00edneas.\n\nEste es el segundo p\u00e1rrafo. Dejamos una l\u00ednea\nen blanco para separarlo del primero.\n</code></pre> <p>Esto mostrar\u00e1:</p> <p>Este es el primer p\u00e1rrafo.Es lo suficientemente largo como para ocupar varias l\u00edneas, que ser\u00e1n visualizadas como un bloque de texto, sin separaci\u00f3n entre l\u00edneas.</p> <p>Este es el segundo p\u00e1rrafo. Dejamos una l\u00ednea en blanco para separarlo del primero.</p> <p>V\u00e9ase que el uso de la etiqueta <code>&lt;br&gt;</code> no inserta espaciado entre una l\u00ednea y la siguiente. </p> <p>Nota</p> <p>El formato markdown original proporciona un mecanismo para respetar los saltos. Consiste en a\u00f1adir al final de cada l\u00ednea dos o m\u00e1s espacios en blanco. Pero yo no suelo hacer uso de esto, dado que al examinar un archivo, no es f\u00e1cil distinguir visualmente que l\u00edneas llevan espacios adicionales. </p>"},{"location":"101MkdParrafos.html#parrafos-de-cabecera","title":"P\u00e1rrafos de cabecera","text":"<p>N\u00f3tese que, en estos cuadernos, cada p\u00e1gina tiene un p\u00e1rrafo de t\u00edtulo y p\u00e1rrafos de cabecera de secci\u00f3n, que se muestran con un tipo de letra especial. En fotmato markdown identificamos estos p\u00e1rrafos anteponiendo uno o m\u00e1s caracteres <code>#</code>.  Por ejemplo:</p> <pre><code># T\u00edtulo del documento\n\nTexto del documento\n</code></pre> <p>El car\u00e1cter (o caracteres) <code>#</code> se suprimir\u00e1 del resultado final. Debemos dejar un espacio en blanco entre la marca <code>#</code> y el texto del t\u00edtulo para que tenga efecto. </p> <p>Podemos crear una estructura formada por un t\u00edtulo general del documento, t\u00edtulos a nivel de secci\u00f3n (nivel 2), a nivel de subsecci\u00f3n (nivel 3) y as\u00ed sucesivamente hasta 6 niveles. Por ejemplo:</p> <pre><code># T\u00edtulo del documento\n\n## Secci\u00f3n 1\n\n### Subsecci\u00f3n 1.1\n\nP\u00e1rrafo de texto regular\n\n### Subsecci\u00f3n 1.2\n\nOtro p\u00e1rrafo de texto regular\n</code></pre> <p>El nivel se determina de acuerdo al n\u00famero de caracteres <code>#</code>. El tipo de letra y aspecto lo determina MkDocs. Para ello, en la carpeta generada <code>/site</code>, junto a los archivos HTML, MkDocs a\u00f1adir\u00e1 una subcarpeta <code>/stylesheets</code> que contiene archivos con reglas de estilo CSS. </p> <p>Opcionalmente podemos \"cerrar\" las l\u00edneas de t\u00edtulo con m\u00e1s caracteres <code>#</code> a la derecha, que en el resultado final ser\u00e1n suprimidos. Es algo puramente \"est\u00e9tico\" y ni siquiera hace falta que el n\u00famero de caracteres <code>#</code> coincida con los colocados a la izquierda:</p> <pre><code>## T\u00edtulo de la secci\u00f3n ######\n</code></pre> <p>En la conversi\u00f3n a HTML, los p\u00e1rrafos de cabecera se delimitan entre las siguientes etiquetas:</p> <pre><code>&lt;h1&gt; Cabecera de nivel 1 &lt;/h1&gt;\n&lt;h2&gt; Cabecera de nivel 2 &lt;/h2&gt;\n&lt;h3&gt; Cabecera de nivel 3 &lt;/h3&gt;\n&lt;h4&gt; Cabecera de nivel 4 &lt;/h4&gt;\n&lt;h5&gt; Cabecera de nivel 5 &lt;/h5&gt;\n&lt;h6&gt; Cabecera de nivel 6 &lt;/h6&gt;\n&lt;p&gt;  P\u00e1rrafo de texto regular &lt;/p&gt;\n</code></pre> <p>\u00a1Cuidado!</p> <p>Si usamos estos p\u00e1rrafos de cabecera, debemos estructurar el documento de la forma adecuada. T\u00e9ngase en cuenta que las cabeceras se utilizan con muchos prop\u00f3sitos. Sirven, por ejemplo, para para que MkDocs inserte de forma autom\u00e1tica una tabla de contenidos, para crear enlaces a una secci\u00f3n o incluso las utilizan los buscadores de Internet. Es un error usar p\u00e1rrafos de cabecera solo para utilizar un tipo de letra especial. Para ese prop\u00f3sito hay otros mecanismos, como es el caso de los archivos <code>.css</code> </p> <p>Un p\u00e1rrafo de cabecera no puede estar formado por varias l\u00edneas en el texto markdown. Lo siguiente:</p> <pre><code># Texto de cabecera\n  m\u00e1s texto\n</code></pre> <p>se convertir\u00e1 en:</p> <pre><code>&lt;h1&gt;Texto de cabecera&lt;/h1&gt;\n\n&lt;p&gt;m\u00e1s texto&lt;/p&gt;\n</code></pre> <p>a pesar de no dejar una l\u00ednea en blanco separadora.</p> <p>La sintaxis de t\u00edtulos basada en prefijos <code>#</code> es conocida como \"atx\", y fue inventada por Aaron Swartz, uno de los principales colaboradores en el dise\u00f1o de markdown. Alternativamente existe la posibilidad de utilizar otra forma de sintaxis inspirada en el antiguo formato \"Setext\". Se trata de una opci\u00f3n que solo admite dos niveles de cabecera. Los t\u00edtulos se delimitan subrayando con caracteres <code>=</code> las cabeceras de nivel uno, y con guiones las de nivel dos. Por ejemplo:</p> <p><pre><code>T\u00edtulo del documento\n====================\n\nT\u00edtulo de la secci\u00f3n\n--------------------\n\nP\u00e1rrafo de texto regular\n</code></pre> El n\u00famero de caracteres de subrayado no tiene por que coincidir con la longitud del t\u00edtulo.</p>"},{"location":"101MkdParrafos.html#sangrado-de-parrafos","title":"Sangrado de p\u00e1rrafos","text":"<p>Llamamos p\u00e1rrafo sangrado a aquel en el que todas sus l\u00edneas tienen espacios en blanco a la izquierda. Por ejemplo:</p> <pre><code>Primer p\u00e1rrafo est\u00e1ndar.\n\n    Este es un p\u00e1rrafo con sangr\u00eda.\n    Tiene 4 espacios a la izquierda.\n</code></pre> <p>Markdown utiliza la sangr\u00eda con prop\u00f3sitos especiales, y por lo tanto, debemos evitar todo tipo de espaciado a la izquierda excepto para esos casos particulares. El uso m\u00e1s habitual es crear p\u00e1rrafos preformateados.</p>"},{"location":"101MkdParrafos.html#parrafos-preformateados","title":"P\u00e1rrafos preformateados","text":"<p>Supongamos que estamos creando un manual de programaci\u00f3n en lenguaje Java. Escribimos algo as\u00ed como:</p> <pre><code>Programa de ejemplo:\n\nclass HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n</code></pre> <p>Pero al visualizarlo, se unen todas las l\u00edneas de texto y el resultado es:</p>  Programa de ejemplo:  class HelloWorld {           public static void main (String args[]) {                System.out.println(\"Hola Mundo\");           }      }  <p>Queremos que el texto del programa forme un bloque donde se respeten los saltos de l\u00ednea y los espacios extra. La soluci\u00f3n es marcar todo ese texto como p\u00e1rrafo preformateado. En la sintaxis markdown, se logra a\u00f1adiendo un sangrado de cuatro espacios:</p> <pre><code>Programa de ejemplo:\n\n    class HelloWorld {\n\n              public static void main (String args[]) {\n                   System.out.println(\"Hola Mundo\");\n              }\n\n         }\n</code></pre> <p>Y ahora, MkDocs tomar\u00e1 todo el bloque sangrado y respetar\u00e1 el espaciado, mostr\u00e1ndolo en un estilo de letra especial. Los cuatro espacios de sangr\u00eda se suprimen en la conversi\u00f3n a HTML. La sangr\u00eda adicional se mantiene:</p>  Programa de ejemplo: <pre><code>\nclass HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n</code></pre> <p>N\u00f3tese que un sangrado de tres espacios no tiene efecto. Ha de ser de cuatro. Los espacios extra se mostrar\u00e1n como tales.</p> <p>En la conversi\u00f3n a HTML, los bloques preformateados (incluyendo l\u00edneas en blanco) se delimitan entre etiquetas <code>&lt;pre&gt;</code>:</p> <pre><code>&lt;p&gt;Programa de ejemplo:&lt;/p&gt;\n\n&lt;pre&gt;\n&lt;code&gt;\nclass HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n&lt;/code&gt;\n&lt;/pre&gt;\n</code></pre> <p>Las etiquetas <code>&lt;code&gt;</code> se utilizan para establecer el tipo de letra.</p> <p>C\u00f3digo</p> <p>Este tipo de bloques preformateados se suelen utilizar principalmente para mostrar ejemplos en un manual de programaci\u00f3n. A las instrucciones de un programa se las denomina \"C\u00f3digo fuente\", de ah\u00ed que se utilice el t\u00e9rmino \"Code\" para referirnos a un texto t\u00e9cnico.</p> <p>En los fragmentos preformateados identificados mediante sangr\u00eda, no solo se respeta el espaciado y saltos de l\u00ednea. Tampoco tiene efecto el formato markdown, considerando las marcas como texto literal:</p> <pre><code>Texto regular\n\n    # P\u00e1rrafo de cabecera sangrado\n</code></pre> <p>Muestra:</p>  Texto regular <pre><code>\n# P\u00e1rrafo de cabecera sangrado\n</code></pre>"},{"location":"101MkdParrafos.html#parrafos-de-citas","title":"P\u00e1rrafos de citas","text":"<p>Los p\u00e1rrafos de cita se muestran en un formato especial:</p> <p>Seg\u00fan Wikipedia:</p>    HTML, acr\u00f3nimo en ingl\u00e9s de HyperText Markup Language ('lenguaje de marcado de hipertexto'), hace referencia al lenguaje de marcado utilizado en la creaci\u00f3n de p\u00e1ginas web.  <p>Como de costumbre, el tipo de letra y otros elementos de formato depende de la \"hoja de estilos\" utilizada, bien la generada por MkDocs, o las a\u00f1adidas por nosotros.</p> <p>Markdown identifica las citas anteponiendo en cada l\u00ednea un car\u00e1cter <code>&gt;</code></p> <pre><code>Seg\u00fan Wikipedia:\n\n&gt; HTML, acr\u00f3nimo en ingl\u00e9s de HyperText Markup Language \n&gt; ('lenguaje de marcado de hipertexto'), hace referencia \n&gt; al lenguaje de marcado utilizado en la creaci\u00f3n de p\u00e1ginas web.\n</code></pre> <p>En la sintaxis markdown, el prefijo <code>&gt;</code> solo es necesario en la primera l\u00ednea de cada p\u00e1rrafo:</p> <pre><code>&gt; Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\nSuspendisse id sem consectetuer libero luctus adipiscing.\n</code></pre> <p>Aunque es m\u00e1s elegante escribir:</p> <pre><code>&gt; Lorem ipsum dolor sit amet,\n  consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n  Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n  Suspendisse id sem consectetuer libero luctus adipiscing.\n</code></pre> <p>Lo que muestra:</p> <p>Lorem ipsum dolor sit amet,   consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.   Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p> <p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.   Suspendisse id sem consectetuer libero luctus adipiscing.</p> <p>Las citas pueden \"anidarse\" (una dentro de otra) si a\u00f1adimos caracteres \"<code>&gt;</code>\" adicionales:</p> <pre><code>&gt; Primer nivel de texto.\n&gt;\n&gt; &gt; Cita dentro de otra.\n&gt;\n&gt; Volviendo al primer nivel.\n</code></pre> <p>Lo que muestra:</p> <p>Primer nivel de texto.</p> <p>Cita dentro de otra.</p> <p>Volviendo al primer nivel.</p> <p>Un p\u00e1rrafo de cita puede contener otros elementos markdown, incluyendo listas, cabeceras, bloques de c\u00f3digo, etc.</p> <pre><code>&gt; Lista de elementos:\n&gt; \n&gt; 1. Primer elemento.\n&gt; 2. Segundo elemento.\n&gt; \n&gt; Texto fuente de un programa delimitado mediante sangrado:\n&gt; \n&gt;     return shell_exec(\"echo $input | $markdown_script\");\n</code></pre> <p>En la conversi\u00f3n a HTML, las citas son bloques delimitados entre etiquetas <code>&lt;blockquote&gt;</code>, conteniendo otros elementos, como p\u00e1rrafos regulares, preformateados, etc: </p> <pre><code>&lt;p&gt;Seg\u00fan Wikipedia:&lt;/p&gt;\n\n&lt;blockquote&gt;\n\n&lt;p&gt;HTML, acr\u00f3nimo en ingl\u00e9s de HyperText Markup Language \n('lenguaje de marcado de hipertexto'), hace referencia \nal lenguaje de marcado utilizado en la creaci\u00f3n de p\u00e1ginas web.&lt;/p&gt;\n\n&lt;/blockquote&gt;\n</code></pre>"},{"location":"101MkdParrafos.html#linea-horizontal","title":"L\u00ednea horizontal","text":"<p>Podemos insertar una l\u00ednea horizontal insertando una etiqueta <code>&lt;hr/&gt;</code> o bien si escribimos en una l\u00ednea aparte tres o m\u00e1s guiones, asteriscos o caracteres de subrayado. Podemos a\u00f1adir espacios entre estos s\u00edmbolos. Por ejemplo:</p> <pre><code>* * *\n\n***\n\n*****\n\n- - -\n\n--------------------------\n</code></pre> <p>Un ejemplo:</p> <pre><code>Programa de ejemplo:\n\n---\n&lt;pre&gt;\nclass HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n&lt;/pre&gt;\n---\n</code></pre> <p>Muestra:</p> <p>Programa de ejemplo:</p> <pre>\nclass HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n</pre> <p>El aspecto de final de la l\u00ednea (grosor, color, etc.) depende de la hoja de estilos utilizada por MkDocs, o de las que a\u00f1adamos nosotros. N\u00f3tese que en el ejemplo hemos prescindido del sangrado para marcar el p\u00e1rrafo preformateado, sustituy\u00e9ndolo manualmente por etiquetas <code>&lt;pre&gt;</code>. Lo que logramos con esto es evitar el cambio de color de fondo a\u00f1adido por las etiquetas <code>&lt;code&gt;</code>.</p>"},{"location":"102MkdEnlaces.html","title":"Enlaces","text":"<p>Una de las principales caracter\u00edsticas de toda p\u00e1gina web es la posibilidad de insertar en su texto enlaces a otros documentos, o a determinados elementos del propio documento. Por ejemplo:</p> <p>V\u00e9ase art\u00edculo sobre la sintaxis markdown en Wikipedia.</p> <p>Todo enlace est\u00e1 formado por dos componentes principales:</p> <ul> <li>el texto a mostrar, en este ejemplo, la palabra \"Wikipedia\"</li> <li>la direcci\u00f3n enlazada (URL), que en este caso es <code>https://en.wikipedia.org/wiki/Markdown</code>.</li> </ul> <p>En los archivos markdown hay tres formas de especificar un enlace, inline, por referencia, y enlaces autom\u00e1ticos.</p>"},{"location":"102MkdEnlaces.html#enlaces-inline","title":"Enlaces inline","text":"<p>En el formato inline, escribimos el texto del enlace [entre corchetes], seguido de la URL (entre par\u00e9ntesis):</p> <pre><code>[texto del enlace](http://ejemplo.com/)\n</code></pre> <p>Todo ello en mitad de un p\u00e1rrafo, si es nuestro deseo:</p> <pre><code>Visite [Google](https://www.google.com/) para obtener informaci\u00f3n a partir de b\u00fasquedas\n</code></pre> <p>Lo que muestra:</p> <p>Visite Google para obtener informaci\u00f3n a partir de b\u00fasquedas</p> <p>El color del enlace y efectos especiales (subrayado, etc) depende de la hoja de estilos (css) aplicada.</p> <p>Al convertir a formato HTML, lo anterior tiene el siguiente aspecto:</p> <pre><code>&lt;p&gt;Visite\n\n&lt;a href=\"https://www.google.com/\" &gt;Google&lt;/a&gt;\n\npara obtener informaci\u00f3n a partir de b\u00fasquedas&lt;/p&gt;\n</code></pre> <p>El texto del enlace se delimita entre una etiqueta de apertura <code>&lt;a&gt;</code> y otra de cierre <code>&lt;/a&gt;</code>.  En la etiqueta de apertura usamos el atributo <code>href</code> para indicar la URL enlazada:</p> <pre><code>&lt;a href=\"https://www.google.com/\" &gt;\n</code></pre> <p>El texto del enlace se escribe entre las etiquetas de apertura y cierre:</p> <pre><code>&lt;a&gt;Texto&lt;/a&gt;\n</code></pre> <p>Podemos a\u00f1adir opcionalmente un atributo \"title\", que es un texto que se suele mostrar al pasar el rat\u00f3n sobre el enlace:</p> <pre><code>&lt;p&gt;Visite\n\n&lt;a href=\"https://www.google.com/\" title=\"Buscador de Google\" &gt;Google&lt;/a&gt;\n\npara obtener informaci\u00f3n a partir de b\u00fasquedas&lt;/p&gt;\n</code></pre> <p>lo que al pasar el rat\u00f3n por el enlace, tras un breve lapso de tiempo muestra un recuadro emergente:</p> <p>Visite  Google para obtener informaci\u00f3n a partir de b\u00fasquedas</p> <p>En formato markdown podemos indicar opcionalmente el valor del atributo title. Se hace en forma de texto entre comillas a continuaci\u00f3n de la URL:</p> <pre><code>[texto del enlace](http://ejemplo.com/ \"Pulse aqu\u00ed\")\n</code></pre>"},{"location":"102MkdEnlaces.html#enlaces-a-otras-paginas-del-cuaderno","title":"Enlaces a otras p\u00e1ginas del cuaderno","text":"<p>Si queremos enlazar a un archivo en el mismo repositorio web, podemos sustituir la URL por el nombre del archivo:</p> <pre><code>V\u00e9ase [Acerca de](acercade.html)\n</code></pre> <p>El nombre de archivo puede ir precedido por una ruta de carpetas. Podemos usar \"rutas relativas\" a la ubicaci\u00f3n del archivo actual, representada por un punto:</p> <pre><code>V\u00e9ase [Acerca de](./acercade.html)\n</code></pre> <p>V\u00e9ase que la ruta en este ejemplo es <code>./</code>, lo que hace referencia al directorio del propio documento.</p> <p>Podemos indicar el archivo markdown en lugar del archivo html generado. MkDocs transformar\u00e1 la URL para sustituirla por el archivo HTML:</p> <pre><code>V\u00e9ase [Acerca de](./acercade.md)\n</code></pre> <p>N\u00f3tese que si clonamos un repositorio y llevamos los archivos a otra ubicaci\u00f3n, las direcciones relativas funcionar\u00e1n mejor que las absolutas, ya que no tenemos que ajustar los textos de los enlaces con la nueva ruta de directorios. </p> <p>Pero hay una situaci\u00f3n en la que la conversi\u00f3n no funciona. Markdown permite incluir etiquetas HTML en nuestros documentos, que generalmente ser\u00e1n respetadas. Esto implica que los enlaces escritos usando las etiquetas:</p> <pre><code>V\u00e9ase &lt;a href=\"./acercade.html/\"&gt;Acerca de&lt;/a&gt;\n</code></pre> <p>deben especificar la URL definitiva, ya que la referencia a ficheros <code>.md</code> solo se convierte si el enlace se escribe en formato markdown.</p>"},{"location":"102MkdEnlaces.html#enlaces-a-secciones","title":"Enlaces a secciones","text":"<p>Podemos insertar un enlace a un p\u00e1rrafo de cabecera de una secci\u00f3n del documento. Para ello, basta con escribir entre corchetes su texto, suprimiendo los espacios en blanco por guiones y las may\u00fasculas por min\u00fasculas. Por ejemplo:</p> <pre><code>## Acerca de este documento\n\n... texto regular\n</code></pre> <p>Y en alg\u00fan otro lugar:</p> <pre><code>V\u00e9ase [acerca-de-este-documento].\n</code></pre> <p>Cada p\u00e1rrafo y elemento de una p\u00e1gina web puede tener un nombre identificador. Ya hemos visto que, en formato HTML, la forma de asignar un nombre a cualquier elemento es mediante el atributo <code>id</code>:</p> <pre><code>&lt;p id=\"pprincipal\"&gt;P\u00e1rrafo principal&lt;/p&gt;\n</code></pre> <p>MkDocs genera autom\u00e1ticamente un identificador para todos los p\u00e1rrafos de cabecera <code>&lt;h1&gt;</code> ... <code>&lt;h6&gt;</code>, que consiste en el propio texto del p\u00e1rrafo:</p> <pre><code>&lt;h2 id=\"acerca-de-este-documento\"&gt;Acerca de este documento&lt;/h2&gt;\n</code></pre>"},{"location":"102MkdEnlaces.html#enlaces-a-secciones-de-otra-pagina","title":"Enlaces a secciones de otra p\u00e1gina","text":"<p>Podemos combinar los dos formatos anteriores para enlazar a una secci\u00f3n de otro documento del mismo sitio web:</p> <pre><code>V\u00e9ase [Acerca de](./acercade.md#acerca-de-este-documento)\n</code></pre> <p>V\u00e9ase que escribimos un s\u00edmbolo <code>#</code> para separar el nombre del documento del identificador del p\u00e1rrafo de cabecera.</p>"},{"location":"102MkdEnlaces.html#enlaces-por-referencia","title":"Enlaces por referencia","text":"<p>La segunda forma de crear enlaces en formato markdown es \"por referencia\". Supongamos que tenemos lo siguiente:</p> <pre><code>V\u00e9ase [Wikipedia](https://es.wikipedia.org/wiki/Wikipedia:Portada) para m\u00e1s informaci\u00f3n.\n</code></pre> <p>Bien, la URL es algo larga. \u00bfQue pasa si tenemos que poner el mismo enlace media docena de veces en un documento? El texto puede volverse algo farragoso. La soluci\u00f3n es poner una lista de URLs en otro lugar del documento, y en cada enlace, indicar que vaya a esa ubicaci\u00f3n y busque la URL correspondiente.</p> <p>En resumen, se trata de escribir cada enlace sin URL, sustituy\u00e9ndolo por una referencia entre corchetes:</p> <pre><code>Este es [un ejemplo][1] de enlace por referencia.\nEste es [otro ejemplo][2] de enlace por referencia.\n</code></pre> <p>Opcionalmente podemos poner un espacio entre ambos elementos:</p> <pre><code>Este es [un ejemplo] [1] de enlace por referencia.\n</code></pre> <p>En alg\u00fan lugar del documento debemos definir las referencias, cada una en l\u00ednea aparte:</p> <pre><code>[1]: http://ejemplo.com/ \"T\u00edtulo opcional\"\n[2]: http://ejemplo2.com/ \"T\u00edtulo opcional\"\n</code></pre> <p>Entre el car\u00e1cter <code>:</code> y la URL debemos colocar al menos un espacio. </p> <p>El atributo title, que es opcional, puede escribirse entre comillas, ap\u00f3strofos o par\u00e9ntesis: </p> <p><pre><code>[id]: http://ejemplo.com/  \"T\u00edtulo opcional\"\n[id]: http://ejemplo.com/  'T\u00edtulo opcional'\n[id]: http://ejemplo.com/  (T\u00edtulo opcional)\n</code></pre> La URL puede escribirse entre s\u00edmbolos <code>&lt; &gt;</code></p> <pre><code>[id]: &lt;http://ejemplo.com/&gt;  \"T\u00edtulo opcional\"\n</code></pre> <p>Podemos poner el t\u00edtulo en la siguiente l\u00ednea y sangrarlo con espaciado extra si lo deseamos:</p> <pre><code>[id]: &lt;http://ejemplo.com/&gt;\n      \"T\u00edtulo opcional\"\n</code></pre> <p>N\u00f3tese que estas l\u00edneas con definiciones de enlaces no ser\u00e1n visibles en el resultado final.</p> <p>Las etiquetas usadas para definir enlaces son case-insensitive. No se distingue entre may\u00fasculas y min\u00fasculas. Por ejemplo:</p> <pre><code>[texto 1][a]\n[texto 2][A]\n</code></pre> <p>se considera que la referencia es la misma.</p> <p>Es posible usar el texto del enlace como etiqueta, lo que se conoce como implicit link name. Por ejemplo:</p> <pre><code>Visite [Google][] para m\u00e1s informaci\u00f3n.\n</code></pre> <p>O bien, sin la segunda pareja de corchetes:</p> <pre><code>Visite [Google] para m\u00e1s informaci\u00f3n.\n</code></pre> <p>Y, en alg\u00fan lugar del documento, definimos el enlace como:</p> <pre><code>[Google]: http://google.com/\n</code></pre> <p>Esto tambi\u00e9n funciona cuando el texto del enlace contiene espacios:</p> <pre><code>Visite [Daring Fireball][] para m\u00e1s informaci\u00f3n.\n</code></pre> <p>Y definimos el enlace como:</p> <pre><code>[Daring Fireball]: http://daringfireball.net/\n</code></pre> <p>Las definiciones de URLs se pueden colocar en cualquier lugar del documento. Hay quien prefiere ponerlas tras el p\u00e1rrafo en cuesti\u00f3n, y otros prefieren poner todas las definiciones agrupadas al final del documento.</p>"},{"location":"102MkdEnlaces.html#enlaces-automaticos","title":"Enlaces autom\u00e1ticos","text":"<p>Podemos escribir una URL en mitad del texto, que ser\u00e1 mostrada como enlace si la escribimos entre delimitadores <code>&lt; &gt;</code>.</p> <pre><code>Visite &lt;https://www.google.com/&gt;\n</code></pre> <p>Lo que muestra</p> <p>Visite https://www.google.com/</p> <p>Tambi\u00e9n podemos hacer esto con direcciones de correo:</p> <pre><code>Enviar un correo a: &lt;direccion@ejemplo.com&gt;\n</code></pre> <p>lo que abre el programa de gestor de correo.</p>"},{"location":"103MkdImagenes.html","title":"Im\u00e1genes","text":""},{"location":"103MkdImagenes.html#insertar-una-imagen","title":"Insertar una imagen","text":"<p>Los archivos de imagenes son ficheros binarios que no pueden formar parte de un archivo plain text, ni en el caso de los ficheros markdown, ni en los HTML. Cuando accedemos al sitio web, las im\u00e1genes se descargan en paralelo junto al archivo HTML y nuestro navegador har\u00e1 una composici\u00f3n \"al vuelo\" para mostrar la p\u00e1gina. </p> <p>El archivo HTML ha de llevar en su texto una etiqueta <code>&lt;img&gt;</code>, para indicar al navegador el punto del documento donde hay que visualizar la imagen. </p> <p>Veamos un ejemplo de archivo markdown. Vamos a insertar directamente una etiqueta <code>&lt;img&gt;</code> entre p\u00e1rrafo y p\u00e1rrafo:</p> <pre><code>Emoji smiley:\n\n&lt;img src=\"./img/Smiley.png\" alt=\"Smiley\" width=\"150\" height=\"150\"&gt;\n\nImagen con licencia de [Pixabay](https://pixabay.com/es/illustrations/smiley-emoticon-emoji-c\u00f3mic-4832495/)\n</code></pre> <p>Lo que muestra:</p> <p>Emoji smiley:</p> <p></p> <p>Imagen con licencia de Pixabay</p> <p>Las im\u00e1genes consisten en una \u00fanica etiqueta HTML <code>&lt;img&gt;</code>, sin etiqueta de cierre. Entre otros, podemos poner los siguientes atributos:</p> <ul> <li><code>src=\"nombre_archivo\"</code> - Indica el archivo a descargar y mostrar. En nuestro ejemplo, indicamos un fichero en la misma carpeta que el documento, subcarpeta <code>/img</code>.</li> <li><code>alt=\"texto\"</code> - Texto alternativo cuando no se puede mostrar la imagen</li> <li><code>width</code> y <code>height</code> permiten establecer el tama\u00f1o de visualizaci\u00f3n</li> <li><code>title=\"texto\"</code>- Recuadro a mostrar cuando pasamos el rat\u00f3n sobre la imagen.</li> </ul> <p>Como alternativa al uso de etiquetas, la sintaxis Markdown cuenta con el siguiente formato:</p> <pre><code>![texto alternativo](./img/Smiley.png)\n</code></pre> <p>V\u00e9ase que el formato es el mismo que para los enlaces, a\u00f1adiendo un prefijo <code>!</code>. El texto del enlace ser\u00e1 considerado como texto alternativo cuando no se puede mostrar la imagen. </p> <p>Markdown no cuenta inicialmente con otras opciones, aunque podemos a\u00f1adir el atributo <code>title</code> tras el nombre del archivo:</p> <pre><code>![texto alternativo](/carpeta/imagen.jpg \"T\u00edtulo\")\n</code></pre> <p>Si necesitamos especificar tama\u00f1o u otros atributos, tendremos que usar directamente una etiqueta <code>img</code> insertada en el texto markdown.</p>"},{"location":"103MkdImagenes.html#imagenes-por-referencia","title":"Im\u00e1genes por referencia","text":"<p>Al igual que sucede con los enlaces, podemos poner la misma imagen varias veces en un documento, acompa\u00f1ada de una referencia que enlazar\u00e1 a una ubicaci\u00f3n donde definamos el archivo de imagen a enlazar:</p> <pre><code>Texto regular.\n\n![texto alternativo][id]\n</code></pre> <p>Y en otro lugar del documento escribimos:</p> <pre><code>[id]: carpeta/imagen.jpg\n</code></pre> <p>Pudiendo a\u00f1adir un t\u00edtulo:</p> <pre><code>[id]: carpeta/imagen.jpg  \"T\u00edtulo\"\n</code></pre>"},{"location":"103MkdImagenes.html#posicionamiento-de-las-imagenes","title":"Posicionamiento de las im\u00e1genes","text":"<p>En el ejemplo anterior, pon\u00edamos la imagen entre p\u00e1rrafo y p\u00e1rrafo, pero podemos insertarla dentro del texto de uno de los p\u00e1rrafos, lo que la muestra entre car\u00e1cter y car\u00e1cter:</p> <pre><code>Emoji smiley: \n&lt;img src=\"./img/Smiley.png\" alt=\"Smiley\" width=\"150\" height=\"150\"&gt; \ncon licencia de [Pixabay](https://pixabay.com/es/illustrations/smiley-emoticon-emoji-c\u00f3mic-4832495/)\n</code></pre> <p>Esto se visualiza as\u00ed:</p> <p>Emoji smiley:    con licencia de Pixabay</p> <p>Podemos usar el atributo <code>style</code> para llevar la imagen a la izquierda o derecha del p\u00e1rrafo:</p> <p>Emoji smiley:   </p> <p>Con licencia de Pixabay </p> <p>La propiedad de estilo float determina si la imagen debe mostrarse a la izquierda o derecha del texto:</p> <pre><code>&lt;img src=\"./img/Smiley.png\" width=\"150\" height=\"150\" style=\"float:right\"&gt;\n</code></pre> <p>Cambiar <code>right</code> por <code>left</code> si la queremos a la izquierda.</p>"},{"location":"103MkdImagenes.html#imagenes-como-enlaces","title":"Im\u00e1genes como enlaces","text":"<p>Hay ocasiones en las que queremos una imagen que, al pulsar sobre ella, haga de enlace a otro documento o secci\u00f3n. Podemos combinar ambas sintaxis, la de los enlaces y la de las im\u00e1genes. Basta con escribir un enlace y, en lugar del texto a mostrar, poner una imagen.</p> <p>En formato markdown, en lugar de:</p> <pre><code>[  texto  ](URL enlazada)\n</code></pre> <p>escribimos:</p> <pre><code>[  ![](archivo_de imagen)  ](URL enlazada)\n</code></pre> <p>Y en formato HTML, en lugar de:</p> <pre><code>&lt;a href=\"URL enlazada\"&gt;\n   texto \n&lt;/a&gt;\n</code></pre> <p>escribimos:</p> <pre><code>&lt;a href=\"URL enlazada\"&gt; \n   ![](./nombre_archivo.jpg) \n&lt;/a&gt;\n</code></pre>"},{"location":"104MkdListas.html","title":"Listas","text":""},{"location":"104MkdListas.html#listas-con-vineta","title":"Listas con vi\u00f1eta","text":"<p>Una lista es un conjunto de entradas precedido por vi\u00f1etas:</p> <p>Lista de colores:</p> <ul> <li>rojo</li> <li>verde</li> <li>azul</li> </ul> <p>Para crear una lista con vi\u00f1etas, en formato markdown cada elemento va precedido por un marcador. Podemos usar como marcadores unos asteriscos (*), guiones (-) o s\u00edmbolos de suma (+). Por ejemplo:</p> <pre><code>Lista de colores:\n\n- rojo\n- verde\n- azul\n</code></pre> <p>Entre el marcador (vi\u00f1eta/n\u00famero) y el texto debemos dejar al menos un espacio. Se recomienda alinear el texto a una sangr\u00eda de cuatro espacios:</p> <pre><code>Lista de colores:\n\n-   rojo\n-   verde\n-   azul\n\n    texto sangrado cuatro espacios\n</code></pre> <p>Al trasladar el texto a HTML, la lista en su conjunto se delimita por etiquetas <code>&lt;ul&gt;</code>, abreviatura de unordered list. Cada elemento se delimita entre etiquetas <code>&lt;li&gt;</code>:</p> <pre><code>&lt;p&gt;Lista de colores:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;rojo&lt;/li&gt;\n&lt;li&gt;verde&lt;/li&gt;\n&lt;li&gt;azul&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"104MkdListas.html#marcadores","title":"Marcadores","text":"<p>Por defecto se usa un c\u00edrculo s\u00f3lido como marcador. Podemos usar otros marcadores mediante el atributo <code>list-style-type</code> de la etiqueta <code>ul</code>:</p> <pre><code>&lt;ul style=\"list-style-type:circle;\"&gt;\n&lt;li&gt;rojo&lt;/li&gt;\n&lt;li&gt;verde&lt;/li&gt;\n&lt;li&gt;azul&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Muestra:</p> <ul> <li>rojo</li> <li>verde</li> <li>azul</li> </ul> <p>Los posibles valores de la propiedad <code>list-style-type</code> son:</p> <ul> <li><code>disc</code>  - c\u00edrculo s\u00f3lido</li> <li><code>circle</code> - c\u00edrculo vac\u00edo</li> <li><code>square</code> - recuadro</li> <li><code>none</code> - sin mostrar marcador</li> </ul>"},{"location":"104MkdListas.html#listas-numeradas","title":"Listas numeradas","text":"<p>Las listas numeradas utilizan n\u00fameros de orden en lugar de vi\u00f1etas:</p> <p>Lista de colores:</p> <ol> <li> rojo</li> <li> verde</li> <li> azul</li> </ol> <p>En formato markdown se escriben de la siguiente forma:</p> <pre><code>Lista de colores:\n\n1.  rojo\n2.  verde\n3.  azul\n</code></pre> <p>V\u00e9ase que cambiamos el s\u00edmbolo por un n\u00famero, seguido de un punto.</p> <p>En HTML se sustituye la etiqueta <code>&lt;ul&gt;</code> por <code>&lt;ol&gt;</code> (ordered list):</p> <pre><code>&lt;p&gt;Lista de colores:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;rojo&lt;/li&gt;\n&lt;li&gt;verde&lt;/li&gt;\n&lt;li&gt;azul&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>Pero obs\u00e9rvese que la numeraci\u00f3n es eliminada del archivo HTML. Simplemente, se indica al navegador web que debe mostrar n\u00fameros, y en principio se asume que empiezan por 1. En formato markdown, podr\u00edamos escribir:</p> <pre><code>Lista de colores:\n\n1.  rojo\n1.  verde\n1.  azul\n</code></pre> <p>... y el resultado final mostrar\u00eda n\u00fameros 1, 2, 3 ... La numeraci\u00f3n es responsabilidad del navegador al componer la p\u00e1gina. \u00bfComo establecer otra numeraci\u00f3n? Con el formato markdown tenemos pocas opciones, pero podemos usar de forma manual etiquetas HTML como parte del texto, configurando la lista mediante atributos en la etiqueta de apertura:</p> <pre><code>Lista de colores:\n\n&lt;ol start=\"9\"&gt;\n\n&lt;li&gt; rojo&lt;/li&gt;\n&lt;li&gt; verde&lt;/li&gt;\n&lt;li&gt; azul&lt;/li&gt;\n\n&lt;/ol&gt;\n</code></pre> <p>Lo que muestra:</p> <p>Lista de colores:</p> <ol> <li> rojo</li> <li> verde</li> <li> azul</li> </ol> <p>Como de costumbre, los atributos HTML proporcionan muchas posibilidades. Por ejemplo, para mostrar n\u00fameros romanos:</p> <p>Lista de colores:</p> <ol> <li> rojo</li> <li> verde</li> <li> azul</li> </ol> <p>lo que se consigue con el atributo type:</p> <pre><code>&lt;ol type=\"I\"&gt;\n&lt;li&gt; rojo&lt;/li&gt;\n&lt;li&gt; verde&lt;/li&gt;\n&lt;li&gt; azul&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>"},{"location":"104MkdListas.html#elementos-multilinea-en-markdown","title":"Elementos multil\u00ednea en markdown","text":"<p>Cada elemento finaliza al introducir el siguiente elemento con un marcador, o bien, al encontrar una l\u00ednea en blanco. Sucesivas l\u00edneas de texto formar\u00e1n parte del elemento y su unir\u00e1n en una sola:</p> <pre><code>*   Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit.\nAliquam hendrerit mi posuere lectus.\nVestibulum enim wisi,  viverra nec, \nfringilla in, laoreet vitae, risus.\n\n*   Donec sit amet nisl.\nAliquam semper ipsum sit amet velit.\nSuspendisse id sem consectetuer\nlibero luctus adipiscing.\n</code></pre> <p>Pero es m\u00e1s elegante escribir el texto alineado:</p> <pre><code>*   Lorem ipsum dolor sit amet,\n    consectetuer adipiscing elit.\n    Aliquam hendrerit mi posuere lectus.\n    Vestibulum enim wisi,  viverra nec,\n    fringilla in, laoreet vitae, risus.\n\n*   Donec sit amet nisl.\n    Aliquam semper ipsum sit amet velit.\n    Suspendisse id sem consectetuer\n    libero luctus adipiscing.\n</code></pre> <p>Si queremos que un nuevo p\u00e1rrafo forme parte del elemento anterior, debemos alinear el sangrado de la primera l\u00ednea del p\u00e1rrafo, que debe consistir en al menos cuatro espacios:</p> <pre><code>1.  Elemento con dos p\u00e1rrafos.\n    Lorem ipsum dolor sit amet,\n    consectetuer adipiscing elit.\n    Aliquam hendrerit mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec,\n    fringilla in, laoreet vitae, risus.\n    Donec sit amet nisl.\n    Aliquam semper ipsum sit amet velit.\n\n2.  Suspendisse id sem consectetuer\n    libero luctus adipiscing.\n</code></pre> <p>Si colocamos una cita dentro de un elemento, el car\u00e1cter <code>&gt;</code> debe estar sangrado de forma consistente:</p> <pre><code>*   un elemento con cita:\n\n    &gt; Una cita dentro de un\n    &gt; elemento de lista\n</code></pre> <p>Para colocar un bloque de texto preformateado dentro de un elemento de lista, tenemos que sangrarlo con al menos ocho espacios:</p> <pre><code>* Un elemento de lista:\n\n        texto preformateado\n</code></pre>"},{"location":"104MkdListas.html#evitar-listas-accidentales","title":"Evitar listas accidentales","text":"<p>N\u00f3tese que podr\u00edamos crear un elemento de lista accidentalmente. Por ejemplo:</p> <pre><code>1986. Un a\u00f1o muy especial.\n</code></pre> <p>La soluci\u00f3n es poner una barra invertida <code>\\</code> antes del punto, que no ser\u00e1 mostrada. Estas barras hacen que el car\u00e1cter que viene a continuaci\u00f3n se considere como texto regular.</p> <pre><code>1986\\. Un a\u00f1o muy especial.\n</code></pre>"},{"location":"104MkdListas.html#listas-anidadas","title":"Listas anidadas","text":"<p>Podemos crear una lista dentro de otra si a\u00f1adimos sangrado de cuatro espacios a la lista interna:</p> <pre><code>- Elemento 1\n    - elemento 1.1\n    - elemento 1.2\n- Elemento 2\n</code></pre> <p>lo que muestra:</p> <ul> <li>Elemento 1<ul> <li>elemento 1.1</li> <li>elemento 1.2</li> </ul> </li> <li>Elemento 2</li> </ul> <p>En general, resulta conveniente ajustar los elementos de lista a espaciado que se alinee con el sangrado de cuatro caracteres:</p> <pre><code>-   Elemento 1\n    -   elemento 1.1\n    -   elemento 1.2\n-   Elemento 2\n</code></pre>"},{"location":"105MkdResalte.html","title":"Resaltar texto","text":"<p>\u00bfQue pasa si queremos que un fragmento de texto se muestre en otro color o con un efecto especial? En l\u00edneas generales, se usan hojas de estilo CSS para definir reglas de presentaci\u00f3n,  pero tanto markdown como HTML tienen algunos recursos b\u00e1sicos de resaltado.</p>"},{"location":"105MkdResalte.html#texto-en-cursiva","title":"Texto en cursiva","text":"<p>En formato markdown, todo texto entre asteriscos o caracteres de subrayado(<code>_</code>) ser\u00e1 mostrado con un tipo de letra enfatizado, generalmente cursiva. Lo siguiente:</p> <pre><code>-   *texto entre asteriscos*\n-   _texto entre subrayados_\n</code></pre> <p>Se mostrar\u00e1 en cursiva:</p> <ul> <li>texto entre asteriscos</li> <li>texto entre subrayados</li> </ul> <p>Podemos poner \u00e9nfasis en mitad de una palabra:</p> <pre><code>Don*super*incre\u00edble\n</code></pre> <p>Muestra:</p> <p>Donsuperincre\u00edble</p> <p>pero todo marcador rodeado de espacios ser\u00e1 tratado como texto regular:</p> <pre><code>Don * super * incre\u00edble\n</code></pre> <p>Muestra:</p> <p>Don * super * incre\u00edble</p> <p>En este caso, para que los asteriscos act\u00faen como marcador, deben ir \"pegados\" a una palabra:</p> <pre><code>Don *super* incre\u00edble\n</code></pre> <p>Si queremos forzar que los asteriscos se muestren como tales, podemos \"escaparlos\" precedi\u00e9ndolos con una barra invertida:</p> <pre><code>\\*texto que se mostrar\u00e1 entre asteriscos\\*\n</code></pre> <p>Muestra:</p> <p>*texto que se mostrar\u00e1 entre asteriscos*</p> <p>\u00a1Cuidado!</p> <p>En realidad, lo que se muestra es texto \"enfatizado\". T\u00edpicamente se resuelve visualiz\u00e1ndolo en cursiva, pero esto depende del navegador.</p> <p>El texto enfatizado se transforma a HTML delimit\u00e1ndolo entre etiquetas <code>&lt;em&gt; ... &lt;/em&gt;</code>. Si lo que realmente queremos es texto en cursiva, podr\u00edamos asegurarnos de ello utilizando las etiquetas <code>&lt;i&gt; ... &lt;/i&gt;</code> directamente.</p>"},{"location":"105MkdResalte.html#texto-en-negrita","title":"Texto en negrita","text":"<p>Si usamos doble asterisco o subrayado como marcadores, el fragmento de texto delimitado se mostrar\u00e1 en negrita.</p> <p>Lo siguiente</p> <pre><code>**doble asterisco**\n__doble subrayado__\n</code></pre> <p>Se mostrar\u00e1 como:</p> doble asterisco doble subrayado <p>Podemos combinar dos estilos diferentes de enfatizado:</p> <p><pre><code>*Esto es __super__ importante*\n</code></pre> lo que muestra:</p> Esto es super importante <p>El texto enfatizado se transforma a HTML delimit\u00e1ndolo entre etiquetas <code>&lt;strong&gt; ... &lt;/strong&gt;</code>. La forma de presentaci\u00f3n suele ser negrita, aunque depende del navegador. Una vez m\u00e1s, si lo que queremos realmente es negrita (bold), podr\u00edamos usar manualmente las etiquetas <code>&lt;b&gt; ... &lt;/b&gt;</code>.</p>"},{"location":"105MkdResalte.html#codigo-fuente-inline","title":"C\u00f3digo fuente inline","text":"<p>Al examinar los p\u00e1rrafos vimos la posibilidad de crear p\u00e1rrafos preformateados:</p> <pre><code>Texto en formato HTML:\n\n    &lt;html&gt;\n        &lt;body&gt;\n            &lt;p&gt;Textpo de p\u00e1rrafo&lt;/p&gt;.\n        &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre> <p>Este ejemplo muestra:</p> <p>Texto en formato HTML:</p> <pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;p&gt;Textpo de p\u00e1rrafo&lt;/p&gt;.\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>V\u00e9ase que no solo se respetan las l\u00edneas y espaciado. Tambi\u00e9n se utiliza un tipo de letra especial y se respetan los caracteres como <code>&lt;&gt;</code>, que en formato HTML sirven para indicar una etiqueta.</p> <p>Pero \u00bfque pasa si queremos respetar solo un fragmento de texto dentro de un p\u00e1rrafo? Por ejemplo, imaginemos que queremos mostrar:</p> <p>En formato HTML, los p\u00e1rrafos de texto se delimitan entre etiquetas <code>&lt;p&gt;</code>.</p> <p>Estamos forzando que, en la conversi\u00f3n, la etiqueta <code>&lt;p&gt;</code> se muestra como parte del texto, con un formato de letra de c\u00f3digo fuente. En markdown esto se consigue delimit\u00e1ndo ese fragmento entre acentos invertidos (backticks):</p> <pre><code>En formato HTML, los p\u00e1rrafos de texto se delimitan entre etiquetas `&lt;p&gt;`.\n</code></pre> <p>En l\u00edneas generales, todo texto entre acentos invertidos se respetar\u00e1 y mostrar\u00e1 con ese tipo de letra especial. Pero... \u00bfcomo incluir un acento invertido como parte del texto protegido?  Usar como delimitadores dos acentos:</p> <pre><code>``Usar un car\u00e1cter (`) delimitador.``\n</code></pre> <p>Muestra:</p> <p><code>Usar un car\u00e1cter (`) delimitador.</code></p> <p>\u00bfQue pasa si el backtick protegido va inmediatamente tras los dos acentos de apertura o antes de los de cierre? Por ejemplo:</p> <p>Usar un car\u00e1cter delimitador <code>`</code> </p> <p>No podemos escribir:</p> <pre><code>Usar un car\u00e1cter delimitador `````\n</code></pre> <p>En este caso, podemos a\u00f1adir espacios, uno tras la apertura y otro antes del cierre, que ser\u00e1n eliminados del resultado final.</p> <pre><code>Usar un car\u00e1cter delimitador `` ` ``\n</code></pre>"},{"location":"106MkdHTML.html","title":"HTML y Markdown","text":"<p>El problema de markdown es que no cubre todas las funcionalidades que proporcionan las etiquetas html, que es una sintaxis de una gran complejidad. La soluci\u00f3n a aplicar es simple; basta con escribir directamente etiquetas html en los textos markdown cuando sea necesario. En general ser\u00e1n respetadas, salvo cuando entren en conflicto con las etiquetas generadas en el proceso de conversi\u00f3n.</p> <p>No conviene abusar de esta posibilidad, porque hace los documentos m\u00e1s complejos de leer y estamos renunciando a los beneficios de la sintaxis markdown. Sin embargo, resulta \u00fatil cuando queremos especificar algo de cierta complejidad.</p>"},{"location":"106MkdHTML.html#etiquetas-div","title":"Etiquetas <code>&lt;div&gt;</code>","text":"<p>En formato HTML hay una etiqueta especial, <code>&lt;div&gt;</code>, que se usa para delimitar parte de una p\u00e1gina. Por ejemplo:</p> <pre><code>&lt;p&gt;P\u00e1rrafo 1. &lt;/p&gt;\n\n&lt;div&gt;\n  &lt;p&gt;P\u00e1rrafo 2. &lt;/p&gt;\n  &lt;p&gt;P\u00e1rrafo 3. Lista de colores:&lt;/p&gt;\n\n  &lt;ul&gt;\n  &lt;li&gt;rojo&lt;/li&gt;\n  &lt;li&gt;verde&lt;/li&gt;\n  &lt;li&gt;azul&lt;/li&gt;\n  &lt;/ul&gt;\n\n&lt;/div&gt;\n\n&lt;p&gt;P\u00e1rrafo 4. &lt;/p&gt;\n</code></pre> <p>En este ejemplo, los p\u00e1rrafos 1 y 4 quedar\u00edan fuera del bloque, mientras que los p\u00e1rrafos 2 y 3 y la lista quedar\u00edan dentro.</p> <p>\u00bfQue utilidad tiene identificar partes del documento entre etiquetas <code>&lt;div&gt;</code>? Podemos, por ejemplo, aplicar un estilo especial al bloque:</p> <pre><code>&lt;div style=\"background-color:beige;padding:10px\"&gt;\n</code></pre> <p>lo que mostrar\u00eda esa secci\u00f3n de la forma configurada por esas reglas de estilo, con un fondo de color beige, y un espaciado de 10 puntos en los cuatro m\u00e1rgenes.</p> <p>P\u00e1rrafo 1. </p> <p>P\u00e1rrafo 2. </p> <p>P\u00e1rrafo 3. Lista de colores:</p> <ul> <li>rojo</li> <li>verde</li> <li>azul</li> </ul> <p>P\u00e1rrafo 4. </p>"},{"location":"106MkdHTML.html#bloques","title":"Bloques","text":"<p>En HTML hay varias etiquetas que se utilizan para delimitar bloques de texto, como por ejemplo:</p> <ul> <li><code>&lt;p&gt; ... &lt;/p&gt;</code> - Delimita un p\u00e1rrafo</li> <li><code>&lt;pre&gt; ... &lt;/pre&gt;</code> - Delimita un p\u00e1rrafo preformateado</li> <li><code>&lt;div&gt; ... &lt;/div&gt;</code> - Delimita un bloque de texto HTML</li> <li><code>&lt;table&gt; ... &lt;/table&gt;</code> - Delimita una tabla de datos, formada por filas y columnas.</li> </ul> <p>Este tipo de etiquetas deben separarse del resto del documento con una l\u00ednea en blanco antes de la etiqueta de inicio, y otra tras la de cierre. Las etiquetas de inicio y fin de bloque no deben llevar sangrado alguno.</p> <p>Por ejemplo, las funcionalidades originales proporcionadas por markdown no incluyen la creaci\u00f3n de tablas. Podemos insertar una usando directamente la sintaxis html:</p> Pa\u00eds Capital Poblaci\u00f3n Francia Par\u00eds 68 MM Italia Roma 58 MM Alemania Berl\u00edn 84 MM <p>El formato HTML es el siguiente:</p> <pre><code>&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Pa\u00eds&lt;/th&gt;\n    &lt;th&gt;Capital&lt;/th&gt;\n    &lt;th&gt;Poblaci\u00f3n&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Francia&lt;/td&gt;\n    &lt;td&gt;Par\u00eds&lt;/td&gt;\n    &lt;td&gt;68 MM&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Italia&lt;/td&gt;\n    &lt;td&gt;Roma&lt;/td&gt;\n    &lt;td&gt;58 MM&lt;/td&gt;\n  &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td&gt;Alemania&lt;/td&gt;\n    &lt;td&gt;Berl\u00edn&lt;/td&gt;\n    &lt;td&gt;84 MM&lt;/td&gt;\n  &lt;/tr&gt;\n\n&lt;/table&gt;\n</code></pre> <p>Todo el conjunto se delimita entre etiquetas <code>&lt;table&gt;</code>. Cada fila (table row) entre etiquetas <code>&lt;tr&gt;</code>. Las celdas (table data) entre etiquetas <code>&lt;td&gt;</code> dentro de cada fila. Las celdas de cabecera (table head) se indican entre etiquetas <code>&lt;th&gt;</code>.</p> <p>Dentro de un bloque HTML no tienen efecto las marcas utilizadas en la sintaxis markdown.  Por ejemplo, un asterisco en el texto de la celda de una tabla se visualizar\u00e1 como tal, no como delimitador de texto en cursiva.</p> <p>Otro ejemplo de bloque es todo aquello delimitado entre etiquetas <code>&lt;div&gt;</code>. Pero \u00a1ojo! Una vez m\u00e1s, y como sucede con otros bloques HTML, el formato markdown no tendr\u00e1 efecto en su interior, y nos vemos obligados a usar otras etiquetas HTML manualmente. En realidad, esto se puede solucionar f\u00e1cilmente utilizando las extensiones al lenguaje markdown, que veremos m\u00e1s adelante.</p>"},{"location":"106MkdHTML.html#entidades","title":"Entidades","text":"<p>Supongamos un manual t\u00e9cnico. \u00bfComo podemos representar la f\u00f3rmula <code>x &lt; y &gt; z</code>?. El navegador considerar\u00e1 que <code>&lt;y&gt;</code> es una etiqueta, y como no tiene un significado especial, la ignorar\u00e1.</p> <p>En principio, la soluci\u00f3n proporcionada por markdown es usar backticks:</p> <pre><code>La f\u00f3rmula es: `x &lt; y &gt; z`\n</code></pre> <p>Pero hay situaciones en que tenemos que indicar que un car\u00e1cter se respete, sin necesidad de mostrarlo en un tipo de letra especial. La soluci\u00f3n es sustituir esos caracteres en el texto markdown o HTML por el c\u00f3digo del car\u00e1cter, Por ejemplo:</p> <pre><code>La f\u00f3rmula es: x &amp;#60; y &amp;#62; z\n</code></pre> <p>Muestra:</p> <p>La f\u00f3rmula es: x &lt; y &gt; z</p> <p>Todo car\u00e1cter tiene un c\u00f3digo, y esta forma de representarlos se denomina \"entidades\". Cada una comienza con un prefijo <code>&amp;#</code> y termina con un punto y coma. Podemos sustituir el c\u00f3digo num\u00e9rico por un nombre simb\u00f3lico:</p> <pre><code>La f\u00f3rmula es: x &amp;#lt; y &amp;#gt; z\n</code></pre> <p>Vemos que el car\u00e1cter <code>&lt;</code> se representa mediante <code>&amp;lt;</code>, abreviatura de less than, y el car\u00e1cter <code>&gt;</code>, mediante <code>&amp;gt;</code>, abreviatura de greater than.</p> <p>\u00bfCual de las dos t\u00e9cnicas es preferible? <code>&amp;lt;</code> es visualmente m\u00e1s descriptivo que <code>&amp;#60;</code>, ya que es imposible saberse los c\u00f3digos de memoria. Pero no todos los caracteres tienen su abreviatura. Sin embargo, todos tienen un c\u00f3digo.</p> <p>Las entidades no solo se utilizan para forzar un car\u00e1cter sin que sea interpretado como etiqueta HTML. Tambi\u00e9n se usan para incluir caracteres que son dif\u00edciles de representar o de interpretar.</p> <p>Veamos algunos ejemplos de entidades:</p> Car\u00e1cter Nombre C\u00f3digo &lt; <code>&amp;lt;</code> <code>&amp;#60;</code> &gt; <code>&amp;gt;</code> <code>&amp;#62;</code> &amp; <code>&amp;amp;</code> <code>&amp;#38;</code> \" <code>&amp;quot;</code> <code>&amp;#34;</code> ' <code>&amp;apos;</code> <code>&amp;#39;</code> \u20ac <code>&amp;euro;</code> <code>&amp;#8364;</code> \u00a9 <code>&amp;copy;</code> <code>&amp;#169;</code> \u00ae <code>&amp;reg;</code> <code>&amp;#174;</code> \u2190 <code>&amp;larr;</code> <code>&amp;#8592;</code> \u2191 <code>&amp;uarr;</code> <code>&amp;#8593;</code> \u2192 <code>&amp;rarr;</code> <code>&amp;#8594;</code> \u2193 <code>&amp;darr;</code> <code>&amp;#8595;</code> <p>Algunos s\u00edmbolos matem\u00e1ticos:</p> Car\u00e1cter Nombre C\u00f3digo \u2200 <code>&amp;forall;</code> <code>&amp;#8704;</code> \u2202 <code>&amp;part;</code> <code>&amp;#8706;</code> \u2203 <code>&amp;exist;</code> <code>&amp;#8707;</code> \u2205 <code>&amp;empty;</code> <code>&amp;#8709;</code> \u2207 <code>&amp;nabla;</code> <code>&amp;#8711;</code> \u2208 <code>&amp;isin;</code> <code>&amp;#8712;</code> \u2209 <code>&amp;notin;</code> <code>&amp;#8713;</code> \u220b <code>&amp;ni;</code> <code>&amp;#8715;</code> \u220f <code>&amp;prod;</code> <code>&amp;#8719;</code> \u2211 <code>&amp;sum;</code> <code>&amp;#8721;</code> \u221a <code>&amp;radic;</code> <code>&amp;#8730;</code> \u221e <code>&amp;infin;</code> <code>&amp;#8734;</code> \u222b <code>&amp;int;</code> <code>&amp;#8747;</code> \u2264 <code>&amp;le;</code> <code>&amp;#8804;</code> \u2265 <code>&amp;ge;</code> <code>&amp;#8805;</code> <p>Otros s\u00edmbolos:</p> <p> <ul> <li>\u260e : <code>&amp;#9742;</code></li> <li>\u260f : <code>&amp;#9743;</code></li> <li>\u2610 : <code>&amp;#9744;</code></li> <li>\u2611 : <code>&amp;#9745;</code></li> <li>\u2612 : <code>&amp;#9746;</code></li> <li>\u261c : <code>&amp;#9756;</code></li> <li>\u261d : <code>&amp;#9757;</code></li> <li>\u261e : <code>&amp;#9758;</code></li> <li>\u261f : <code>&amp;#9759;</code></li> <li>\u2639 : <code>&amp;#9785;</code></li> <li>\u263a : <code>&amp;#9786;</code></li> <li>\u266a : <code>&amp;#9834;</code></li> <li>\u266b : <code>&amp;#9835;</code></li> <li>\u26a0 : <code>&amp;#9888;</code></li> <li>\u26bd : <code>&amp;#9917;</code></li> </ul> <p></p> <p>Algunos Emojis:</p> <p> <ul> <li>\ud83d\ude00 : <code>&amp;#128512;</code> </li> <li>\ud83d\ude01 : <code>&amp;#128513;</code> </li> <li>\ud83d\ude02 : <code>&amp;#128514;</code> </li> <li>\ud83d\ude03 : <code>&amp;#128515;</code> </li> <li>\ud83d\ude04 : <code>&amp;#128516;</code> </li> <li>\ud83d\ude05 : <code>&amp;#128517;</code> </li> </ul> <p></p> <p>Podemos explorar la web para localizar una lista m\u00e1s completa. Hacer una b\u00fasqueda del t\u00e9rmino \"HTML entities\".</p>"},{"location":"106MkdHTML.html#non-breaking-space","title":"Non-breaking Space","text":"<p>Una caso especial es la entidad <code>&amp;nbsp;</code>, conocida como non-breaking space. Representa un espacio que se debe respetar.</p> <p>Supongamos que escribimos:</p> <pre><code>Dependiendo de las condiciones ambientales, la velocidad m\u00e1xima permitida en una autopista es de 120 km/h\n</code></pre> <p>No queremos que el navegador divida la frase justo entre las palabras 120 y km/h:</p> <pre><code>... la velocidad m\u00e1xima permitida es de 120\nkm/h\n</code></pre> <p>por lo que escribimos en su lugar:</p> <pre><code>la velocidad m\u00e1xima permitida es de 120&amp;nbsp;km/h\n</code></pre> <p>Lo que representa un espacio en blanco donde no se puede partir la l\u00ednea.</p> <p>Otra utilidad es la posibilidad de forzar espaciado extra:</p> <pre><code>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Texto sangrado cuatro espacios\n</code></pre> <p>Un caso similar es el non-breaking hyphen (<code>&amp;#8209;</code>) usado para representar un gui\u00f3n entre dos palabras que deben ir unidas.</p>"},{"location":"106MkdHTML.html#escapes","title":"Escapes","text":"<p>Todo car\u00e1cter precedido por una barra invertida ser\u00e1 tratado como texto regular. Por ejemplo, </p> <pre><code>\\*texto con asteriscos\\*\n</code></pre> <p>Mostrar\u00e1 los asteriscos como parte del texto, sin que se consideren como delimitadores de letra enfatizada.</p> <p>Un car\u00e1cter <code>\\</code> se considerar\u00e1 como texto regular siempre que no preceda a alguno de los siguientes:</p> <pre><code>\\   barra invertida\n`   acento invertido\n*   asterisco\n_   subrayado\n{}  llaves\n[]  corchetes\n()  par\u00e9ntesis\n#   hash\n+   signo de suma\n-   gui\u00f3n\n.   punto\n!   exclamaci\u00f3n\n</code></pre> <p>En esas situaciones, para mostrar una barra invertida como parte del texto regular, utilizar una doble barra <code>\\\\</code>.</p>"},{"location":"200Extensiones.html","title":"Extensiones","text":"<p>Ya hemos visto que existen diferentes versiones de Markdown. La usada por MkDocs es Python Markdown, que se ajusta bastante bien a la versi\u00f3n original de markdown, aunque hay algunas diferencias de menor importancia. </p> <p>MkDocs y su complemento [Python-Markdown] incorporan algunas extensiones que aumentan las capacidades de la sintaxis markdown. Por ejemplo, la extensi\u00f3n SmartyPants convierte las comillas, ap\u00f3strofos y otros caracteres en sus equivalentes tipogr\u00e1ficos:</p> S\u00edmbolo Ser\u00e1 reemplazado por <code>'</code> \u2018 \u2019 <code>\"</code> \u201c \u201d <code>&lt;&lt; &gt;&gt;</code> \u00ab \u00bb <code>...</code> \u2026 <code>--</code> \u2013 <code>---</code> \u2014 <p>Las extensiones no tienen efecto si no las activamos en el archivo de configuraci\u00f3n <code>mkdocs.yml</code>:</p> <pre><code>site_name: Mi proyecto de documentacion\n\ntheme:\n  name: material\n\nmarkdown_extensions:\n    - smarty\n    - tables\n    - footnotes\n</code></pre> <p>En este ejemplo estamos activando tres extensiones. Adem\u00e1s de SmartyPants, habilitamos la posibilidad de insertar tablas de datos y notas a pie de p\u00e1gina en el documento.</p> <p>Las extensiones pueden ser configurables. Por ejemplo, SmartyPants permite que solo tengan efecto determinados caracteres. Los valores por defecto son:</p> <pre><code>markdown_extensions:\n    - smarty:\n        smart_dashes: True\n        smart_quotes: True\n        smart_angled_quotes: False\n        smart_ellipses: True\n    - tables\n    - footnotes\n    - otras extensiones...\n</code></pre> <p>Adem\u00e1s de las extensiones proporcionadas por [Python-Markdown], Material for MkDocs a\u00f1ade otra colecci\u00f3n adicional, PyMdown, para enriquecer la experiencia proporcionada por MkDocs. </p> <p>Por ejemplo, la extensi\u00f3n Keys permite mostrar teclas de forma gr\u00e1fica:</p> <p>Pulsar Enter para continuar...</p> <p>Esto se consigue escribiendo:</p> <pre><code>Pulsar ++enter++ para continuar...\n</code></pre> <p>y activando el tema y la extensi\u00f3n en <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  name: material\n\nmarkdown_extensions:\n    - pymdownx.keys\n</code></pre> <p>Las extensiones PyMdown se especifican con el prefijo <code>pymdownx</code> seguido de un punto y el nombre de la extensi\u00f3n.</p> <p>Veamos a continuaci\u00f3n un conjunto de las extensiones m\u00e1s relevantes.</p>"},{"location":"201ExtTablas.html","title":"Tablas","text":"<p>Ya hemos visto que una tabla muestra datos en forma de filas y columnas:</p> <p>Lista de paises:</p> Pa\u00eds Capital Poblaci\u00f3n Francia Par\u00eds 68 MM Italia Roma 58 MM Alemania Berl\u00edn 84 MM <p>Como de costumbre, el aspecto de la tabla, colores, etc. depende de la hoja de estilos utilizada por MkDocs.</p> <p>Markdown no tiene una sintaxis para crear una tabla, por lo que en principio tendr\u00edamos que crearlas usando etiquetas HTML:</p> <pre><code>&lt;p&gt;Lista de paises:&lt;/p&gt;\n\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Pa\u00eds&lt;/th&gt;\n    &lt;th&gt;Capital&lt;/th&gt;\n    &lt;th&gt;Poblaci\u00f3n&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Francia&lt;/td&gt;\n    &lt;td&gt;Par\u00eds&lt;/td&gt;\n    &lt;td&gt;68 MM&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Italia&lt;/td&gt;\n    &lt;td&gt;Roma&lt;/td&gt;\n    &lt;td&gt;58 MM&lt;/td&gt;\n  &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td&gt;Alemania&lt;/td&gt;\n    &lt;td&gt;Berl\u00edn&lt;/td&gt;\n    &lt;td&gt;84 MM&lt;/td&gt;\n  &lt;/tr&gt;\n\n&lt;/table&gt;\n</code></pre> <p>Las etiquetas son:</p> <ul> <li><code>&lt;table&gt; ... &lt;/table&gt;</code> delimita la tabla en su conjunto.</li> <li><code>&lt;tr&gt; ... &lt;/tr&gt;</code> delimita una fila (table row)</li> <li><code>&lt;td&gt; ... &lt;/td&gt;</code> delimita una celda (table data)</li> <li><code>&lt;th&gt; ... &lt;/th&gt;</code> delimita una celda de cabecera (table heading)</li> </ul> <p>La extensi\u00f3n tables permite incorporar esta funcionalidad a la sintaxis markdown. La activamos en el archivo <code>mkdocs.yml</code> con:</p> <pre><code>markdown_extensions:\n  - tables\n</code></pre> <p>y la tabla se escribe de la siguiente forma, evitando las etiquetas HTML:</p> <pre><code>Lista de pa\u00edses:\n\n|Pa\u00eds      | Capital    |Poblaci\u00f3n    |\n|----------|------------|-------------|\n|Francia   |Par\u00eds       |68 MM        |\n|Italia    |Roma        |58 MM        |\n|Alemania  |Berl\u00edn      |84 MM        |\n</code></pre> <p>Las tablas markdown se insertan entre p\u00e1rrafo y p\u00e1rrafo, precedidas por una l\u00ednea en blanco y otra tras la tabla.</p> <p>Para separar celdas se usan caracteres <code>|</code> (pipe) , y para separar las cabeceras del cuerpo de la tabla se utilizan guiones. </p> <p>Los caracteres <code>|</code> usados para separar celdas son opcionales en los extremos izquierdo y derecho de la tabla, excepto cuando la tabla est\u00e1 formada por una \u00fanica columna:</p> <pre><code>Pa\u00eds      | Capital    |Poblaci\u00f3n\n----------|------------|-------------\nFrancia   |Par\u00eds       |68 MM\nItalia    |Roma        |58 MM\nAlemania  |Berl\u00edn      |84 MM\n</code></pre> <p>No es necesario alinear verticalmente los caracteres <code>|</code>. El ancho de las columnas se determinar\u00e1 en el momento en que el navegador muestre los contenidos, y viene determinado por el contenido y por el ancho de la ventana. No podemos especificar un tama\u00f1o de columna:</p> <pre><code>Pa\u00eds      | Capital    |Poblaci\u00f3n\n----------|------------|-------------\nFrancia |Par\u00eds |68 MM\nItalia |Roma |58 MM\nAlemania |Berl\u00edn |84 MM\n</code></pre> <p>... aunque una buena alineaci\u00f3n facilitar\u00e1 la edici\u00f3n del documento markdown.</p> <p>En las cabeceras, debe haber al menos tres guiones en cada columna.</p> <p>El contenido de las celdas puede formatearse: negrita, cursiva, etc. Podemos insertar enlaces, im\u00e1genes u otros elementos markdown. Esto es posible si usamos la extensi\u00f3n tables. Si creamos la tabla manualmente mediante etiquetas, el formato markdown no tendr\u00e1 efecto dentro de la tabla.</p> <p>Podemos alinear el contenido de una columna indic\u00e1ndolo con un car\u00e1cter <code>:</code> en la separaci\u00f3n de las cabeceras:</p> <pre><code>| a la izda. | centrada | a la dcha. |\n|:-----------|:--------:|-----------:|\n|texto       |  texto   |      texto |\n</code></pre> <p>\u00bfQue pasa si queremos usar un car\u00e1cter <code>|</code> como texto regular de una celda? Basta con \"escaparlo\", es decir, anteponerle una barra invertida <code>\\</code>.</p>"},{"location":"202ExtHTML.html","title":"Usando HTML y markdown","text":"<p>Ya hemos visto que en bloques delimitado por etiquetas HTML no tiene efecto el formato markdown, y tenemos que usar otras etiquetas manualmente. Tambi\u00e9n tenemos que usarlas para aplicar estilos a un elemento.</p> <p>La extensiones incorporadas permiten superar estos inconvenientes.</p>"},{"location":"202ExtHTML.html#markdown-en-bloques-html","title":"Markdown en bloques HTML","text":"<p>Veamos lo que pasa cuando delimitamos bloques mediante etiquetas HTML:</p> <pre><code>P\u00e1rrafo 1 con **texto en negrita**.\n\n&lt;div&gt;\nP\u00e1rrafo 2 con **texto en negrita**.\n\nP\u00e1rrafo 3.\n&lt;/div&gt;\n</code></pre> <p>Las etiquetas <code>&lt;div&gt;</code> permiten indicar bloques formados por uno o varios p\u00e1rrafos u otros elementos. Lo anterior muestra:</p> <p>P\u00e1rrafo 1 con texto en negrita.</p>  P\u00e1rrafo 2 con **texto en negrita**.  P\u00e1rrafo 3.  <p>Al delimitar parte del texto entre etiquetas <code>&lt;div&gt;</code> se desactiva el efecto de la sintaxis markdown. En el ejemplo, no se identifica el texto en negrita ni la separaci\u00f3n de p\u00e1rrafos.</p> <p>Para lograr el efecto deseado, en este ejemplo tenemos que a\u00f1adir manualmente etiquetas <code>&lt;b&gt;</code> y <code>&lt;p&gt;</code> en el interior del bloque:</p> <pre><code>P\u00e1rrafo 1 con **texto en negrita**.\n\n&lt;div&gt;\n&lt;p&gt;P\u00e1rrafo 2 con &lt;b&gt;texto en negrita.&lt;/b&gt;&lt;/p&gt;\n\n&lt;p&gt;P\u00e1rrafo 3.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>La extensi\u00f3n Markdown in HTML permite que se tenga en cuenta la sintaxis markdown dentro de un bloque HTML. Tenemos que activarla en el archivo <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - md_in_html\n</code></pre> <p>Con esta extensi\u00f3n activada, en la etiqueta de apertura del bloque HTML tenemos que a\u00f1adir un atributo markdown:</p> <pre><code>P\u00e1rrafo 1 con **texto en negrita**.\n\n&lt;div markdown=\"1\"&gt;\nP\u00e1rrafo 2 con **texto en negrita**.\n\nP\u00e1rrafo 3.\n&lt;/div&gt;\n</code></pre> <p>Los posibles valores de este atributo son \"1\", \"block\", o \"span\". Si el atributo toma el valor \"1\", el comportamiento depender\u00e1 de la etiqueta. Los otros dos valores se utilizan para forzar un comportamiento diferente del establecido por defecto.</p>"},{"location":"202ExtHTML.html#atributos","title":"Atributos","text":"<p>Ya hemos visto que, en formato HTML, los atributos de un elemento se definen en la etiqueta de apertura del elemento:</p> <pre><code>&lt;p  atributo1=\"valor1\"  atributo2=\"valor2\" &gt; \nTexto del p\u00e1rrafo  \n&lt;/p&gt;\n</code></pre> <p>En formato markdown, en principio no tenemos la posibilidad de establecer los atributos de un elemento. Pero la extensi\u00f3n attr_list nos la proporciona. Tenemos que activarla en el archivo <code>mdocs.yml</code></p> <pre><code>markdown_extensions:\n    - attr_list\n</code></pre> <p>Una vez hecho esto, para aplicar atributos a un p\u00e1rrafo, debemos a\u00f1adir una l\u00ednea delimitada entre <code>{:</code> y <code>}</code>:</p> <pre><code>Texto de un p\u00e1rrafo\nformado por varias l\u00edneas\nque se unen en una sola\n{: atributo1=\"valor1\"  atributo2=\"valor2\" }\n</code></pre> <p>Por ejemplo:</p> <pre><code>Este es un p\u00e1rrafo en color rojo.\n{: style=\"color:red;\" }\n</code></pre> <p>Los atributos <code>id</code> y <code>class</code> tienen una sintaxis especial:</p> <ul> <li>el atributo ID se escribe en formato <code>#nombre</code></li> <li>el atributo de clase en formato <code>.nombre</code></li> <li>cualquier otro atributo en formato <code>clave=\"valor\"</code></li> </ul> <p>Por ejemplo:</p> <pre><code>Texto del p\u00e1rrafo\n{:  #parraforojo  .rojo  style=\"color:red;\"  }\n</code></pre> <p>Los p\u00e1rrafos de cabecera tienen una consideraci\u00f3n especial en markdown. No pueden ser multil\u00ednea. Por este motivo, la lista de atributos de una cabecera se coloca al final de la l\u00ednea:</p> <pre><code>Cabecera estilo setext {: atributos }\n==================================\n\n### Cabecera estilo atx ### {: atributos }\n</code></pre> <p>Tambi\u00e9n podemos definir atributos para un fragmento dentro del texto de un p\u00e1rrafo; por ejemplo, un enlace. Debemos colocar la lista inmediatamente a continuaci\u00f3n del elemento, sin dejar espacios en blanco:</p> <pre><code>V\u00e9ase [enlace](http://ejemplo.com){: class=\"enlace\" title=\"T\u00edtulo del enlace\" } para m\u00e1s informaci\u00f3n.\n</code></pre>"},{"location":"202ExtHTML.html#saltos-de-linea","title":"Saltos de l\u00ednea","text":"<p>La extensi\u00f3n nl2br har\u00e1 que los saltos de l\u00ednea de un documento markdown sean respetados, insertando etiquetas <code>&lt;br&gt;</code> al final de cada l\u00ednea del texto html generado.</p> <p>Se activa con:</p> <pre><code>markdown_extensions:\n    - nl2br\n</code></pre>"},{"location":"203ExtEmojis.html","title":"Iconos y Emojis","text":""},{"location":"203ExtEmojis.html#emojis","title":"Emojis","text":"<p>La extensi\u00f3n Emoji permite, como su nombre indica, a\u00f1adir emojis como un car\u00e1cter m\u00e1s del texto. Cada emoji se escribe indicando su nombre entre caracteres \":\". Por ejemplo:</p> <pre><code>V\u00e1monos de fiesta :tada:\n</code></pre> <p>Muestra:</p> <p>V\u00e1monos de fiesta </p> <p>Activarlo via <code>mkdocs.yml:</code></p> <pre><code>markdown_extensions:\n  - pymdownx.emoji\n</code></pre> <p>Algunos ejemplos:</p> markdown resultado <code>:woman:</code> <code>:police_officer:</code> <code>:alarm_clock:</code> <code>:dog:</code> <code>:cake:</code> <p>Tradicionalmente, se usa la biblioteca de EmojiOne, pero por motivos de licencias, se recomienda cambiar a otras bibliotecas, por ejemplo twemoji. Esto se establece en el archivo de configuraci\u00f3n <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - pymdownx.emoji:\n        emoji_index: !!python/name:material.extensions.emoji.twemoji \n</code></pre> <p>\u00bfComo podemos averiguar el nombre de la etiqueta correspondiente a cada emoji? La documentaci\u00f3n de Material for MkDocs tiene una funci\u00f3n de buscador de etiquetas que nos puede resultar de utilidad. Introducir los t\u00e9rminos de b\u00fasqueda en ingl\u00e9s.</p> <p>En el archivo de configuraci\u00f3n <code>mkdocs.yml</code> podemos a\u00f1adir la opci\u00f3n <code>emoji_generator</code>, que establece como se va a generar el emoji:</p> <pre><code>markdown_extensions:\n  - pymdownx.emoji\n        emoji_index: !!python/name:material.extensions.emoji.twemoji \n        emoji_generator: !!python/name:material.extensions.emoji.to_svg\n</code></pre>"},{"location":"203ExtEmojis.html#iconos","title":"Iconos","text":"<p>De forma similar a los emojis, podemos hacer referencia a los iconos suministrados por Material for MkDocs/icons. Hay varias colecciones:</p> <ul> <li>Material Design</li> <li>FontAwesome</li> <li>Octicons</li> <li>Simple Icons</li> </ul> <p>Cada icono es un archivo de imagen, tomado del repositorio. Para hacer referencia al icono, hacer referencia a la ruta del archivo, sustituyendo el car\u00e1cter <code>/</code> por un gui\u00f3n:</p> <pre><code>:fontawesome-regular-face-laugh-wink:\n</code></pre> <p>toma el archivo:</p> <pre><code>material/templates/.icons/fontawesome/regular/face-laugh-wink.svg\n</code></pre> <p>y muestra:</p> <p></p> <p>Una vez m\u00e1s, podemos usar la funci\u00f3n de [b\u00fasqueda de etiquetas] en la documentaci\u00f3n de Material for MkDocs.</p>"},{"location":"203ExtEmojis.html#aplicando-estilo-a-los-iconos","title":"Aplicando estilo a los iconos","text":"<p>Supongamos que tenemos el siguiente icono:</p> <p>\u00a1Felicidades  !</p> <p>Si activamos la extensi\u00f3n attr_list:</p> <pre><code>markdown_extensions:\n  - attr_list\n  - pymdownx.emoji\n</code></pre> <p>podemos asignar propiedades de estilo al icono:</p> <pre><code>\u00a1Felicidades :fontawesome-regular-face-laugh-wink:{: style=\"color:red;\" } !\n</code></pre> <p>lo que muestra:</p> <p>\u00a1Felicidades  !</p>"},{"location":"204ExtAuxiliar.html","title":"Contenido auxiliar","text":"<p>Con frecuencia queremos a\u00f1adir a un documento observaciones al margen del texto, notas al pie de p\u00e1gina, y otros contenidos complementarios. Las extensiones proporcionadas por Material for MkDocs proporcionan una buena colecci\u00f3n de posibilidades.</p>"},{"location":"204ExtAuxiliar.html#admoniciones","title":"Admoniciones","text":"<p>La extensi\u00f3n Admonition permite crear bloques de notas anexas al texto principal, que se muestran en un recuadro entre p\u00e1rrafo y p\u00e1rrafo:</p> <p>Nota:</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Para hacer uso de ella, la extensi\u00f3n ha de activarse en el archivo <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - admonition\n</code></pre> <p>En el texto markdown, el bloque comienza con tres s\u00edmbolos <code>!!!</code>, seguidos del tipo de nota, que en el ejemplo es \"note\", y entre comillas, el texto a mostrar en la barra de t\u00edtulo. Debajo, con una sangr\u00eda de cuatro espacios, el contenido del bloque:</p> <pre><code>P\u00e1rrafo precedente.\n\n!!! note \"Nota:\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\nSiguiente p\u00e1rrafo.\n</code></pre> <p>Podemos suprimir la barra de t\u00edtulo si escribimos las comillas sin texto:</p> <pre><code>!!! note \"\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Las admoniciones pueden incluir varios p\u00e1rrafos, listas, tablas, y otros elementos, todo ello, respetando la sangr\u00eda de cuatro espacios (m\u00e1s otra sangr\u00eda adicional si a\u00f1adimos p\u00e1rrafos preformateados):</p> <pre><code>!!! info \"Paises de Europa\"\n\n    A continuaci\u00f3n se muestra una tabla de pa\u00edses europeos:\n\n    |Pa\u00eds      | Capital    |Poblaci\u00f3n\n    |----------|------------|-------------\n    |Francia   |Par\u00eds       |68 MM\n    |Italia    |Roma        |58 MM\n    |Alemania  |Berl\u00edn      |84 MM\n</code></pre> <p>Lo que muestra:</p> <p>Paises de Europa</p> <p>A continuaci\u00f3n se muestra una tabla de pa\u00edses europeos:</p> Pa\u00eds Capital Poblaci\u00f3n Francia Par\u00eds 68 MM Italia Roma 58 MM Alemania Berl\u00edn 84 MM"},{"location":"204ExtAuxiliar.html#formato-de-las-admoniciones","title":"Formato de las admoniciones","text":"<p>El tipo de admonici\u00f3n se indica tras los tres s\u00edmbolos <code>!!!</code>, y determina el icono y color utilizado. Puede ser:</p> <p>note</p> <p>abstract</p> <p>info</p> <p>tip</p> <p>success</p> <p>question</p> <p>warning</p> <p>failure</p> <p>danger</p> <p>bug</p> <p>example</p> <p>quote</p> <p>Por ejemplo:</p> <p>\u00a1Peligro!</p> <p>Riesgo elevado. Usar con precauci\u00f3n.</p> <p>Esto se consigue con:</p> <pre><code>!!! danger \"\u00a1Peligro!\"\n\n    Riesgo elevado. Usar con precauci\u00f3n.\n</code></pre>"},{"location":"204ExtAuxiliar.html#admoniciones-al-costado","title":"Admoniciones al costado","text":"<p>texto</p> <p>texto de la admonici\u00f3n</p> <p>Una admonici\u00f3n puede ajustarse al margen izquierdo si la declaramos a\u00f1adiendo la palabra <code>inline</code> al tipo de admonici\u00f3n:</p> <pre><code>!!! note inline \"texto\"\n\n    texto de la admonici\u00f3n\n</code></pre> <p>La admonici\u00f3n debe escribirse antes que el texto con el que comparte espacio:</p> <pre><code>!!! note inline \"texto\"\n\n    texto de la admonici\u00f3n\n\nP\u00e1rrafo situado a la derecha\n</code></pre> <p>texto</p> <p>texto de la admonici\u00f3n</p> <p>Si queremos que la admonici\u00f3n quede ubicada a la derecha, cambiar la palabra <code>inline</code> por <code>inline end</code>:</p> <pre><code>!!! note inline end \"texto\"\n\n    texto de la admonici\u00f3n\n</code></pre>"},{"location":"204ExtAuxiliar.html#admoniciones-desplegables","title":"Admoniciones desplegables","text":"<p>Las admoniciones desplegables son aquellas que muestran solo la barra de t\u00edtulo, y que pulsando en un icono <code>&gt;</code> en el extremo de la barra, permiten desplegar el texto:</p> T\u00edtulo de la nota <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Se consigue este efecto sustituyendo los tres caracteres <code>!!!</code> por <code>???</code>. Si queremos el efecto contrario, que la admonici\u00f3n se muestre desplegada y se pueda plegar, sustituir <code>???</code> por <code>???+</code></p> <pre><code>???+ note \"T\u00edtulo de la nota\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Para hacer uso de las admoniciones desplegables, debemos activar la extensi\u00f3n details en el archivo <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - pymdownx.details\n</code></pre>"},{"location":"204ExtAuxiliar.html#tabla-de-contenido","title":"Tabla de contenido","text":"<p>MkDocs es capaz de insertar en la p\u00e1gina una tabla de contenido que construye a partir de las l\u00edneas de cabecera.  En nuestro documento, all\u00ed donde queramos la tabla de contenido, escribiremos:</p> <pre><code>Tabla de contenido:\n\n[TOC]\n\nTexto del documento.\n</code></pre> <p>Tabla de contenido:</p> <ul> <li>Contenido auxiliar<ul> <li>Admoniciones</li> <li>Formato de las admoniciones</li> <li>Admoniciones al costado</li> <li>Admoniciones desplegables</li> <li>Tabla de contenido</li> <li>Pie de p\u00e1gina</li> </ul> </li> </ul> <p>Como ejemplo, v\u00e9ase el efecto que tiene una tabla de contenido incluida dentro de una admonici\u00f3n. Esto se ha logrado anteponiendo a este p\u00e1rrafo:</p> <pre><code>!!! note inline end \"Tabla de contenido:\"\n\n    [TOC]\n</code></pre> <p>Para ello, debemos activar en el archivo de configuraci\u00f3n la extensi\u00f3n table of contents:</p> <pre><code>markdown_extensions:\n    - toc\n</code></pre> <p>\u00a1Cuidado!</p> <p>Si accidentalmente tenemos en alg\u00fan lugar del documento la definici\u00f3n de un enlace <code>[TOC]</code> por referencia, tendr\u00e1 prioridad como enlace, y no funcionar\u00e1 el mecanismo de tabla de contenido.</p> <p>En <code>mkdocs.yml</code> podemos a\u00f1adir algunas opciones configurables</p> <ul> <li> <p>permalink:</p> <p>Un permalink (permanent link) es un enlace especial que se muestra a la derecha de cada p\u00e1rrafo de cabecera cuando pasamos el rat\u00f3n sobre el mismo. En ese momento, se muestra el enlace como un car\u00e1cter especial \u00b6. Al pulsar sobre el mismo obtendremos la URL de la l\u00ednea de cabecera, algo que resulta \u00fatil si, por ejemplo, queremos copiarla al portapapeles.</p> <p>Se activa mediante:</p> <pre><code>markdown_extensions:\n  - toc:\n      permalink: True\n</code></pre> <p>Para utilizar otro car\u00e1cter diferente de \u00b6, especificarlo entre comillas en lugar de la palabra <code>True</code>:</p> <pre><code>markdown_extensions:\n  - toc:\n      permalink: \"#\"\n</code></pre> </li> <li> <p>baselevel:</p> <p>Por defecto, el nivel de cada p\u00e1rrafo de t\u00edtulo se establece a partir del n\u00famero de caracteres \"#\":</p> <pre><code># P\u00e1rrafo de t\u00edtulo de nivel 1\n\n## P\u00e1rrafo de t\u00edtulo de nivel 2\n</code></pre> <p>Para contar a partir de otro valor, por ejemplo 2 en lugar de 1, escribimos:</p> <pre><code>markdown_extensions:\n    - toc:\n        baselevel: 2\n</code></pre> <p>De esta forma tendremos:</p> <pre><code># P\u00e1rrafo de t\u00edtulo de nivel 2\n\n## P\u00e1rrafo de t\u00edtulo de nivel 3\n</code></pre> </li> <li> <p>separator:</p> <p>Establece el car\u00e1cter a utilizar como separador de palabras en IDs generados autom\u00e1ticamente. Por defecto, <code>separator:\"-\"</code>. Si por ejemplo preferimos caracteres de subrayado:</p> <pre><code>markdown_extensions:\n    - toc:\n        separator: \"_\"\n</code></pre> </li> <li> <p>toc_depth:</p> <p>Establece el n\u00famero de niveles, de 1 a 6, a incluir en la tabla de contenido. Por defecto es 6:</p> <pre><code>markdown_extensions:\n    - toc:\n        toc_depth: 2\n</code></pre> </li> </ul> <p>N\u00f3tese que podemos definir varios par\u00e1metros a la vez, pero siempre bajo una \u00fanica entrada <code>toc</code>:</p> <pre><code>markdown_extensions:\n    - toc:\n        permalink: \"#\"\n        baselevel: 2\n        separator: \"_\"\n</code></pre>"},{"location":"204ExtAuxiliar.html#pie-de-pagina","title":"Pie de p\u00e1gina","text":"<p>Podemos especificar notas a pie de p\u00e1gina mediante la extensi\u00f3n footnotes, que debemos activar en el archivo <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - footnotes\n</code></pre> <p>El siguiente paso es insertar referencias en el documento:</p> <pre><code>Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2]\n</code></pre> <p>Las referencias consisten en etiquetas [^n], donde n puede ser un n\u00famero consecutivo o un texto cualquiera.</p> <p>El texto de las notas se escribe en cualquier lugar del documento de la siguiente forma:</p> <pre><code>[^1]: texto de la nota\n</code></pre> <p>O bien, en el caso de textos multil\u00ednea, en las siguientes l\u00edneas con un sangrado de cuatro espacios:</p> <pre><code>[^2]:\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n    Nulla et euismod nulla. Curabitur feugiat, tortor non consequat\n    finibus, justo purus auctor massa, nec semper lorem quam in massa.\n</code></pre>"},{"location":"205ExtCodigo.html","title":"Texto fuente","text":"<p>Llamamos texto fuente a los fragmentos de programaci\u00f3n que encontramos en los manuales t\u00e9cnicos. Por ejemplo, supongamos el siguiente programa escrito en lenguaje Java:</p> <pre><code>class HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n</code></pre> <p>N\u00f3tese la capacidad que tiene MkDocs para colorear los diferentes fragmentos del programa. A esto se le llama resaltado de c\u00f3digo.</p> <p>Aqu\u00ed hay una labor m\u00faltiple:</p> <ul> <li>identificar todo el bloque de c\u00f3digo fuente, diferenci\u00e1ndolo de p\u00e1rrafos precedentes o subsiguientes</li> <li>respetar los espacios y saltos de l\u00ednea dentro de ese bloque</li> <li>establecer un tipo de letra especial y un color de fondo</li> <li>identificar el lenguaje de programaci\u00f3n y resaltar la sintaxis.</li> </ul> <p>El resaltado se hace con la ayuda de un software llamado Pygments, que se instala junto a MkDocs. Tenemos una lista de lenguajes admitidos por Pygments en este enlace</p>"},{"location":"205ExtCodigo.html#extensiones","title":"Extensiones","text":"<p>El respeto del espaciado y saltos de l\u00ednea se obtiene f\u00e1cilmente sangrando cuatro espacios todo el c\u00f3digo fuente. Pero las extensiones proporcionan m\u00e1s capacidades. MkDocs proporciona de serie dos extensiones:</p> <ul> <li>Fenced code blocks, que proporciona una alternativa a los bloques de c\u00f3digo sangrados</li> <li>CodeHilite, que sirve para resaltar el texto.</li> </ul> <p>Material for MkDocs sustituye estas dos extensiones por Superfences y Highlight, que tienen m\u00e1s posibilidades.</p>"},{"location":"205ExtCodigo.html#escribiendo-un-bloque-de-codigo","title":"Escribiendo un bloque de c\u00f3digo","text":"<p>Al utilizar las extensiones mencionadas, en lugar de usar un sangrado, los bloques de texto fuente se escriben como un p\u00e1rrafo cualquiera, pero colocando por delante y por detr\u00e1s una l\u00ednea formada por tres o m\u00e1s caracteres <code>~</code> o bien acentos invertidos. Por ejemplo:</p> <pre><code>Texto de un programa \nen lenguaje Java:\n\n~~~~~~~~~~~~~~~~~~~~~\nclass HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n~~~~~~~~~~~~~~~~~~~~~\n</code></pre> <p>o bien</p> <pre><code>Texto de un programa \nen lenguaje Java:\n\n``````````````````\nclass HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n``````````````````\n</code></pre> <p>Estas l\u00edneas delimitadoras no se mostrar\u00e1n en el resultado final.</p>"},{"location":"205ExtCodigo.html#resaltado","title":"Resaltado","text":"<p>Para resaltar los elementos del programa en diferentes colores, tenemos que especificar el lenguaje de resaltado en la l\u00ednea inicial que delimita el bloque:</p> <pre><code>~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .java\ntexto del programa\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre> <p>El punto es opcional. Podemos usar llaves y a\u00f1adir un nombre identificador a todo el bloque:</p> <pre><code>~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.java #ejemplo-1}\ntexto del programa\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre> <p>Para que el resaltado de c\u00f3digo fuente funcione, necesitamos activar las extensiones:</p> <pre><code>markdown_extensions:\n    - pymdownx.superfences\n    - pymdownx.highlight\n</code></pre> <p>La labor de resaltado la hace Highlight, pero esta requiere la presencia de Superfences.</p> <p>En el caso de bloques identificados al estilo tradicional markdown, mediante sangrado, Highlight tambi\u00e9n permite identificar el lenguaje a\u00f1adiendo una primera l\u00ednea al bloque. Por ejemplo:</p> <pre><code>Texto regular.\n\n    :::java\n    texto del bloque a resaltar\n</code></pre>"},{"location":"205ExtCodigo.html#mostrar-numeros-de-linea","title":"Mostrar n\u00fameros de l\u00ednea","text":"<p>Al mostrar un programa en un manual t\u00e9cnico, a veces queremos hacer referencia a la l\u00ednea n\u00famero x. Puede ser de utilidad mostrar una numeraci\u00f3n en el margen izquierdo:</p> <pre><code>class HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n</code></pre> <p>Con la extensi\u00f3n Highlight, esto se activa en la l\u00ednea de cabecera del bloque, a\u00f1adiendo la palabra <code>linenums</code> y el valor inicial:</p> <pre><code>~~~~ .java  linenums=\"1\"\n\ntexto de un programa java\n\n~~~\n</code></pre> <p>N\u00f3tese que, por defecto, MkDocs construye una tabla sin celdas de cabecera y con dos columnas, la de la izquierda para n\u00fameros de l\u00ednea y la de la derecha para texto fuente. Podemos hacer que el n\u00famero de l\u00ednea forme parte del texto si lo establecemos en el archivo de configuraci\u00f3n <code>mkdocs.yml</code>. Lo veremos m\u00e1s adelante.</p>"},{"location":"205ExtCodigo.html#resaltar-lineas","title":"Resaltar l\u00edneas","text":"<p>Podemos resaltar determinadas l\u00edneas cambiando el color de fondo:</p> <pre><code>class HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n</code></pre> <p>lo que se consigue a\u00f1adiendo el argumento <code>hl_lines</code> tras el nombre del lenguaje:</p> <pre><code>``` java linenums=\"1\" hl_lines=\"3 5\"\n\ntexto del programa\n\n```\n</code></pre> <p>Entre comillas se escribe la o las p\u00e1ginas a resaltar. </p> <p>Para indicar un rango de la l\u00edneas x..y escribimos algo as\u00ed como:</p> <pre><code>``` java hl_lines=\"1 3-5\"\n\ntexto del programa\n\n```\n</code></pre> <p>Lo que muestra:</p> <pre><code>class HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n</code></pre> <p>Existe una diferencia importante entre las extensiones Fenced code blocks y Superfences. Los bloques delimitados con la primera no pueden sangrarse, por lo que no pueden formar parte de, por ejemplo, un elemento de lista o una cita. De ah\u00ed la conveniencia de usar Superfences.</p>"},{"location":"205ExtCodigo.html#inlinehilite","title":"InlineHilite","text":"<p>La extensi\u00f3n InlineHilite proporciona resaltado para fragmentos de c\u00f3digo fuente dentro de un p\u00e1rrafo regular. Requiere activar highlight:</p> <pre><code>markdown_extensions:\n  - pymdownx.highlight\n  - pymdownx.inlinehilite\n</code></pre> <p>Estos peque\u00f1os fragmentos de c\u00f3digo se delimitan entre acentros invertidos. Tras el primer ap\u00f3strofo tenemos que escribir el lenguaje, precedido por los s\u00edmbolos <code>#!</code></p> <pre><code>Declarar una clase con la sentencia `#!java class NombreClase`.\n</code></pre> <p>Lo que muestra:</p> <p>Declarar una clase con la sentencia <code>class NombreClase</code>.</p>"},{"location":"205ExtCodigo.html#configurar-highlight","title":"Configurar Highlight","text":"<p>Podemos usar el archivo <code>mkdocs.yml</code> para configurar el comportamiento de Highlight. Veamos algunas opciones:</p> <ul> <li> <p><code>use_pygments</code> controla si vamos a usar pygments para las labores de resaltado, o un script usando JavaScript:</p> <pre><code>markdown_extensions:\n    - pymdownx.highlight:\n        use_pygments: true\n    - pymdownx.superfences\n</code></pre> <p>El resto de opciones aqu\u00ed mencionadas asumen <code>use_pygments: true</code></p> </li> <li> <p><code>pygments_lang_class</code> genera una clase CSS para identificar el lenguaje.</p> <pre><code>markdown_extensions:\n    - pymdownx.highlight:\n        use_pygments: true\n        pygments_lang_class: true\n    - pymdownx.superfences\n</code></pre> </li> <li> <p><code>auto_title</code> muestra un t\u00edtulo de cabecera del bloque indicando el lenguaje de programaci\u00f3n.</p> <pre><code>markdown_extensions:\n    - pymdownx.highlight:\n        use_pygments: true\n        auto_title: true\n    - pymdownx.superfences\n</code></pre> </li> <li> <p><code>linenums: true</code> a\u00f1ade por defecto n\u00fameros de l\u00ednea a todos los bloques de c\u00f3digo fuente.</p> </li> <li> <p><code>linenums_style</code> selecciona la forma de generar n\u00fameros de l\u00ednea:</p> <ul> <li> <p><code>linenums_style: table</code> genera una tabla con dos columnas, la de la izquierda con n\u00fameros y la derecha con texto fuente.</p> </li> <li> <p><code>linenums_style: pymdownx-inline</code> hace que los n\u00fameros de l\u00ednea formen parte del texto fuente. Esto implica que, al seleccionar un fragmento de texto con el rat\u00f3n, se incluyan tambi\u00e9n los n\u00fameros de l\u00ednea.</p> </li> <li> <p><code>anchor_linenums: true</code> genera un enlace para cada n\u00famero de l\u00ednea. Pasando el rat\u00f3n podemos copiar el enlace.</p> </li> </ul> </li> </ul>"},{"location":"205ExtCodigo.html#copiar-y-pegar","title":"Copiar y pegar","text":"<p>Con frecuencia acudimos a un manual t\u00e9cnico y copiamos los ejemplos al portapapeles. Esto se puede hacer seleccionando el texto con el rat\u00f3n, pero Material for MkDocs proporciona un recurso adicional; muestra un icono  a la derecha de los bloques de c\u00f3digo fuente, que se muestra al pasar el rat\u00f3n sobre el p\u00e1rrafo. Pulsando en el icono, se copia el texto al portapapeles.</p> <pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n</code></pre> <p>Esta caracter\u00edstica ha de activarse en el archivo de configuraci\u00f3n <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - content.code.copy\n</code></pre> <p>Si no queremos activarlo  a nivel global, podemos hacerlo individualmente para cada bloque de texto:</p> <pre><code>``` { .java .copy }\ntexto del programa\n```\n</code></pre> <p>N\u00f3tese que el lenguaje utilizado se debe escribir antes. Ambas caracter\u00edsticas van precedidas por un punto. </p> <p>Similarmente, podemos activar el icono  a nivel global y desactivarlo individualmente:</p> <pre><code>``` { .java .no-copy }\ntexto del programa\n```\n</code></pre> <p>Si se trata de un texto gen\u00e9rico, podemos sustituir el nombre del lenguaje por la palabra <code>.text</code>, que no genera ning\u00fan resaltado de sintaxis: </p> <pre><code>``` { .text .no-copy }\nbloque de texto\n```\n</code></pre>"},{"location":"205ExtCodigo.html#anadir-un-titlo","title":"A\u00f1adir un t\u00edtlo","text":"<p>Material for MkDocs proporciona la posibilidad de a\u00f1adir un t\u00edtulo a un bloque de texto fuente:</p> Programa de ejemplo<pre><code>class HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n</code></pre> <p>Esto se logra indicando una opci\u00f3n \"title\":</p> <pre><code>```java title=\"Programa de ejemplo\"\n\nclass HelloWorld {\n\n          public static void main (String args[]) {\n               System.out.println(\"Hola Mundo\");\n          }\n\n     }\n```\n</code></pre>"},{"location":"206ExtListas.html","title":"M\u00e1s sobre listas","text":"<p>Markdown incluye una sintaxis que permite incluir listas de varios elementos en nuestros documentos. Con las extensiones, podemos aumentar las capacidades.</p> <p>Adem\u00e1s de las listas con vi\u00f1etas (unordered) y numeradas (ordered) tenemos las listas de definiciones y las de tareas.</p>"},{"location":"206ExtListas.html#listas-de-definiciones","title":"Listas de definiciones","text":"<p>Son listas de t\u00e9rminos acompa\u00f1ados de una definici\u00f3n, algo as\u00ed como un diccionario. por ejemplo:</p> <p>Por ejemplo:</p> <pre><code>**Manzana**\n\n:   Fruta comestible de la especie Malus domestica, el manzano com\u00fan.\n    Es una fruta pom\u00e1cea de forma redonda y sabor dulce o agrio.\n\n**Naranja**\n\n:   Fruta c\u00edtrica obtenida del naranjo dulce (Citrus sinensis), \n    del naranjo amargo (Citrus aurantium) y de naranjos \n    de otras variedades o h\u00edbridos, de origen asi\u00e1tico.\n</code></pre> <p>Mostrar\u00e1 lo siguiente:</p> Manzana Fruta comestible de la especie Malus domestica, el manzano com\u00fan.     Es una fruta pom\u00e1cea de forma redonda y sabor dulce o agrio. Naranja Fruta c\u00edtrica obtenida del naranjo dulce (Citrus \u00d7 sinensis),      del naranjo amargo (Citrus \u00d7 aurantium) y de naranjos      de otras variedades o h\u00edbridos, de origen asi\u00e1tico. <p>Para que todo esto funcione, hay que activar la extensi\u00f3n <code>def_list</code> en el archivo <code>mdocs.yml</code></p> <pre><code>markdown_extensions:\n    - def_list\n</code></pre> <p>Entre dos t\u00e9rminos con sus definiciones debe haber al menos una l\u00ednea en blanco separadora. Los dos puntos deben ir seguidos de un espacio como m\u00ednimo.</p> <p>Puede haber m\u00e1s de una definici\u00f3n asociada a un t\u00e9rmino:</p> <pre><code>Manzana\n\n:   Fruta comestible de la especie Malus domestica, el manzano com\u00fan.\n    Es una fruta pom\u00e1cea de forma redonda y sabor dulce o agrio.\n\nNaranja\n\n:   Fruta c\u00edtrica obtenida del naranjo dulce (Citrus sinensis), \n    del naranjo amargo (Citrus aurantium) y de naranjos \n    de otras variedades o h\u00edbridos, de origen asi\u00e1tico.\n:   Color a medio camino entre el amarillo y el rojo.\n</code></pre> <p>O bien asociar la misma definici\u00f3n a m\u00e1s de un t\u00e9rmino:</p> <pre><code>T\u00e9rmino 1\nT\u00e9rmino 2\n\n:   Definici\u00f3n a\n\nT\u00e9rmino 3\n\n:   Definici\u00f3n b\n</code></pre> <p>Como sucede con cualquier lista, una definici\u00f3n puede estar formada por varios p\u00e1rrafos:</p> <pre><code>T\u00e9rmino 1\n\n:   Definici\u00f3n con dos p\u00e1rrafos. Lorem ipsum \n    dolor sit amet, consectetuer adipiscing elit. Aliquam \n    hendrerit mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n    vitae, risus.\n\n:   Segunda definici\u00f3n para el t\u00e9rmino 1.\n\nT\u00e9rmino 2\n\n:   Esta definici\u00f3n tiene un bloque preformateado, una cita y una lista.\n\n        bloque preformateado.\n\n    &gt; cita\n    &gt; de dos l\u00edneas.\n\n    1.  elemento primero\n    2.  elemento segundo\n</code></pre>"},{"location":"206ExtListas.html#listas-de-tareas","title":"Listas de tareas","text":"<p>La extensi\u00f3n Tasklist hace que, si anteponemos a los elementos de una lista los textos, <code>[ ]</code> o <code>[x]</code>, se muestren en forma de casilla de verificaci\u00f3n   : </p> <pre><code>- [x] Tarea d\u00eda 1\n- [ ] Tareas d\u00eda 2\n    * [x] Ma\u00f1ana\n    * [x] Mediod\u00eda\n    * [ ] Tarde\n- [ ] Tarea d\u00eda 3\n</code></pre> <p>Muestra:</p> <ul> <li> Tarea d\u00eda 1</li> <li> Tareas d\u00eda 2<ul> <li> Ma\u00f1ana</li> <li> Mediod\u00eda</li> <li> Tarde</li> </ul> </li> <li> Tarea d\u00eda 3</li> </ul> <p>Hay que activar la extensi\u00f3n en <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - pymdownx.tasklist:\n      custom_checkbox: true\n</code></pre> <p>La opci\u00f3n <code>custom_checkbox</code> proporciona unas casillas de aspecto m\u00e1s vistoso. Suprimi\u00e9ndola, tendremos unas casillas m\u00e1s \"retro\".</p> <p>Las casillas pueden cambiar de estado pulsando sobre ellas con el rat\u00f3n, pero esta es una caracter\u00edstica poco \u00fatil, ya que los cambios no se guardan. Podemos desactivar esta caracter\u00edstica con:</p> <pre><code>markdown_extensions:\n  - pymdownx.tasklist:\n      clickable_checkbox: false\n</code></pre>"},{"location":"207ExtResaltado.html","title":"M\u00e1s opciones de resalte","text":""},{"location":"207ExtResaltado.html#mark","title":"Mark","text":"<p>La extensi\u00f3n mark permite marcar fragmentos de texto. Deben delimitarse entre dos signos <code>==</code> y otros dos de cierre:</p> <pre><code>Texto normal, ==y este otro marcado==.\n</code></pre> <p>Muestra:</p>  Texto normal, y este otro marcado.  <p>Se activa en <code>mkdocs.yml</code> con:</p> <pre><code>markdown_extensions:\n    - pymdownx.mark\n</code></pre>"},{"location":"207ExtResaltado.html#tilde","title":"Tilde","text":"<p>La extensi\u00f3n tilde proporciona la posibilidad de mostrar texto rayado. Debemos delimitarlo con dos s\u00edmbolos <code>~</code> a cada lado:</p> <pre><code>~~texto suprimido~~\n</code></pre> <p>Se activa en <code>mkdocs.yml</code> con:</p> <pre><code>markdown_extensions:\n    - pymdownx.tilde\n</code></pre>"},{"location":"207ExtResaltado.html#caret","title":"Caret","text":"<p>La extensi\u00f3n Caret permite subrayar texto, delimit\u00e1ndolo entre dos parejas <code>^^</code>: </p> <pre><code>^^Texto subrayado^^\n</code></pre> <p>Muestra:</p> Texto subrayado <p>Activarla en <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - pymdownx.caret\n</code></pre>"},{"location":"207ExtResaltado.html#superindices-y-subindices","title":"Super\u00edndices y sub\u00edndices","text":"<p>Las extensiones Caret y Tilde tambi\u00e9n permiten crear super\u00edndices y sub\u00edndices. Los super\u00edndices se marcan delimit\u00e1ndolos entre caracteres <code>^</code> sencillos:</p> <pre><code>a = b^2^\n</code></pre> <p>Muestra:</p> <p>a = b<sup>2</sup></p> <p>Los sub\u00edndices se delimitan entre caracteres <code>~</code>:</p> <pre><code>CH~3~CH~2~OH\n</code></pre> <p>Muestra:</p> <p>CH<sub>3</sub>CH<sub>2</sub>OH</p>"},{"location":"207ExtResaltado.html#critic","title":"Critic","text":"<p>La extensi\u00f3n Critic utiliza un marcado especial para mostrar los cambios que se han hecho en el texto, lo eliminado, lo insertado y las sustituciones, permitiendo adem\u00e1s a\u00f1adir comentarios.</p> <p>Para indicar un texto a\u00f1adido, debemos delimitarlo entre <code>{++</code> y <code>++}</code>. Para indicar un texto suprinmido, usar <code>{--</code> y <code>--}</code> en su lugar. Por ejemplo:</p> <p><code> Se mostrar\u00e1 {--el texto que se ha eliminado--}{++el texto nuevo++}. </code></p> <p>Muestra:</p> <p>Se mostrar\u00e1 el texto que se ha eliminadoel texto nuevo.</p> <p>Activamos esta extensi\u00f3n en <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - pymdownx.critic\n</code></pre> <p>La opci\u00f3n <code>mode</code> indica como se visualizar\u00e1 el texto final:</p> <pre><code>markdown_extensions:\n  - pymdownx.critic:\n      mode: view\n</code></pre> <p>Por defecto, el valor es <code>view</code>, lo que visualiza ambos textos , marcando con colores el texto antiguo tachado, y el nuevo subrayado. </p> <p>El modo <code>accept</code> muestra el texto nuevo, mientras que el modo <code>reject</code> muestra la versi\u00f3n antigua.</p> <p>Cuando se trata de indicar una sustituci\u00f3n, podemos delimitar todo el conjunto entre <code>~~</code> y escribir el texto eliminado seguido del nuevo, separados por <code>~&gt;</code>:</p> <p><code> Se mostrar\u00e1 {~~el texto que se ha eliminado~&gt;el texto nuevo~~}. </code></p> <p>Tambi\u00e9n podemos resaltar texto espec\u00edfico con <code>{==texto a marcar==}</code>. O incluso a\u00f1adir un comentario con <code>{&gt;&gt;texto del comentario&lt;&lt;}</code>. O por ejemplo, para insertar un bloque de comentarios:</p> <pre><code>{&gt;&gt;\ntexto l\u00ednea 1\ntexto l\u00ednea 2\ntexto l\u00ednea 3\n&lt;&lt;}\n</code></pre>"},{"location":"207ExtResaltado.html#keys","title":"Keys","text":"<p>La extensi\u00f3n Keys permite mostrar teclas de forma gr\u00e1fica:</p> <p>Pulsar Ctrl+Alt+Del para reiniciar...</p> <p>Esto se consigue escribiendo:</p> <pre><code>Pulsar ++ctrl+alt+del++ para continuar...\n</code></pre> <p>y activando la extensi\u00f3n en <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n    - pymdownx.keys\n</code></pre> <p>Las teclas se delimitan entre parejas de s\u00edmbolos <code>++</code>. Los nombres de las teclas han de ser los que figuran en la documentaci\u00f3n de la extensi\u00f3n keys. Algunos ejemplos:</p> Markdown Muestra <code>++space++</code> Space <code>++backslash++</code> \\ <code>++brace-left++</code> { <code>++colon++</code> : <code>++comma++</code> , <code>++double-quote++</code> \" <code>++equal++</code> = <code>++arrow-up++</code> Up <code>++arrow-down++</code> Down <code>++arrow-left++</code> Left <code>++arrow-right++</code> Right <p>Las combinaciones de teclas se escriben separ\u00e1ndolas con un \u00fanico s\u00edmbolo <code>+</code>:</p> <pre><code>++tecla1+tecla2+tecla3++\n</code></pre>"},{"location":"207ExtResaltado.html#botones","title":"Botones","text":"<p>No todos los a\u00f1adidos que proporciona Material for MkDocs se logran a base de extensiones. A veces, basta con definir que un elemento pertenece a una clase, y las hojas de estilo incorporadas proporcionar\u00e1n unas propiedades de aspecto a todos los elementos de esa clase. Un ejemplo son los botones.</p> <p>Supongamos, por ejemplo, un enlace:</p> <pre><code>[Wikipedia](https://es.wikipedia.org/)\n</code></pre> <p>Activamos la extensi\u00f3n attr_list:</p> <pre><code>markdown_extensions:\n  - attr_list\n</code></pre> <p>y definimos el enlace como perteneciente a la clase <code>md-button</code>:</p> <pre><code>[Wikipedia](https://es.wikipedia.org/){ .md-button }\n</code></pre> <p>con lo que obtenemos un enlace con un aspecto de bot\u00f3n sobre el que pulsar:</p> <p>Wikipedia</p> <p>Los colores utilizados ser\u00e1n los mismos que usamos para cualquier enlace. M\u00e1s adelante veremos como configurar los colores que se usan en el tema Material for MkDocs.</p> <p>Para mostrar un bot\u00f3n con relleno de color, a\u00f1adir la clase <code>.md-button--primary</code>:</p> <pre><code>[Wikipedia](https://es.wikipedia.org/){ .md-button .md-button--primary}\n</code></pre> <p>con lo que obtenemos:</p> <p>Wikipedia</p>"},{"location":"207ExtResaltado.html#botones-con-iconos","title":"Botones con iconos","text":"<p>Supongamos que queremos a\u00f1adir un icono:</p> <p>  Wikipedia</p> <p>Lo primero es activar la extensi\u00f3n Emoji en <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - pymdownx.emoji\n        emoji_index: !!python/name:material.extensions.emoji.twemoji \n        emoji_generator: !!python/name:material.extensions.emoji.to_svg\n</code></pre> <p>Y en lugar de:</p> <pre><code>[Wikipedia](){ .md-button}\n</code></pre> <p>A\u00f1adamos el icono:</p> <pre><code>[:books: Wikipedia](){ .md-button}\n</code></pre> <p>Para que no quede \"pegado al texto\" le aplicamos el atributo de estilo padding-right, que a\u00f1ade un espaciado a la derecha del icono:</p> <pre><code>:books:{style=\"padding-right:30px\"}\n</code></pre> <p>Con lo que el texto de enlace ser\u00e1:</p> <pre><code>[ :books:{style=\"padding-right:30px\"} ]\n</code></pre> <p>Para que el icono se vea algo m\u00e1s gande, le asignamos la clase <code>lg</code>, que forma parte de la hoja de estilos de Material for MkDocs. El texto markdown completo para el enlace es:</p> <pre><code>[:books:{.lg style=\"padding-right:30px\"} Wikipedia](https://es.wikipedia.org){ .md-button}\n</code></pre>"},{"location":"207ExtResaltado.html#smart-symbols","title":"Smart symbols","text":"<p>La extensi\u00f3n SmartSymbols convierte determinadas secuencias de texto en caracteres especiales. Por ejemplo:</p> Markdown Resultado (tm) \u2122 (c) \u00a9 (r) \u00ae c/o \u2105 +/- \u00b1 --&gt; \u2192 &lt;-- \u2190 &lt;--&gt; \u2194 =/= \u2260 1/4, etc. \u00bc, etc. 1st 2nd etc. 1st 2nd etc. <p>Se activa con:</p> <pre><code>markdown_extensions:\n    - pymdownx.smartsymbols\n</code></pre>"},{"location":"208ExtBloques.html","title":"Bloques","text":"<p>Dividir un documento en apartados, cada uno con su t\u00edtulo, y a su vez en p\u00e1rrafos, nos permite organizar los contenidos. Pero hay situaciones en las que necesitamos organizar la informaci\u00f3n de forma m\u00e1s gr\u00e1fica.</p>"},{"location":"208ExtBloques.html#pestanas","title":"Pesta\u00f1as","text":"<p>Supongamos que tenemos varios textos que queremos visualizar alternativamente. Por ejemplo, un ejemplo de programaci\u00f3n desarrollado con diferentes lenguajes:</p> <p>Programa para mostrar un texto en la consola:</p> CC++Java <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hola\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hola\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <pre><code>class HelloWorld {\n  static public void main( String args[] ) {\n  System.out.println( \"Hola\" );\n  }\n}\n</code></pre> <p>Pulsando en cada pesta\u00f1a podemos ver un texto u otro. Para lograr esto, tenemos que activar en <code>mkdocs.yml</code> la extensi\u00f3n tabbed:</p> <pre><code>markdown_extensions:\n  - pymdownx.tabbed:\n      alternate_style: true\n</code></pre> <p>Y el texto markdown es:</p> <pre><code>=== \"C\"\n\n    ``` c\n    #include &lt;stdio.h&gt;\n\n    int main(void) {\n      printf(\"Hola\\n\");\n      return 0;\n    }\n    ```\n\n=== \"C++\"\n\n    ``` c++\n    #include &lt;iostream&gt;\n\n    int main(void) {\n      std::cout &lt;&lt; \"Hola\" &lt;&lt; std::endl;\n      return 0;\n    }\n    ```\n\n=== \"Java\"\n\n    ``` java\n    class HelloWorld {\n      static public void main( String args[] ) {\n      System.out.println( \"Hola\" );\n      }\n    }\n    ```\n</code></pre> <p>El bloque de texto que se muestra en cada pesta\u00f1a se delimita mediante la sangr\u00eda, con una l\u00ednea de cabecera formada por tres s\u00edmbolos <code>===</code> seguidos del texto a mostrar en la pesta\u00f1a.</p> <p>Como funcionalidad a\u00f1adida, las pesta\u00f1as llevan asociado un enlace, que podemos descubrir pulsando sobre la misma con el bot\u00f3n secundario del rat\u00f3n, y podemos usar para enlazar al texto:</p> <pre><code>V\u00e9ase [ejemplo de programaci\u00f3n](midocumento.html#__tabbed_1_1)\n</code></pre>"},{"location":"208ExtBloques.html#cards","title":"Cards","text":"<p>Supongamos una p\u00e1gina inicial que muestra una serie de textos distribuidos en una rejilla de recuadros:</p> <p> Material for MkDocs </p> <ul> <li> <p> Disponible en 5 minutos</p> <p>Instale mkdocs-material con pip y comience a trabajar en cuesti\u00f3n de minutos</p> <p> Inicio</p> </li> <li> <p> Es markdown</p> <p>Preoc\u00fapese solo por redactar los contenidos</p> <p> Referencia</p> </li> <li> <p> Configurable</p> <p>Cambie colores, fuentes, idioma, iconos, logo y todo lo dem\u00e1s con poco esfuerzo</p> <p> Configuraci\u00f3n</p> </li> <li> <p> Open Source</p> <p>Material for MkDocs se distribuye bajo licencia MIT a trav\u00e9s del sitio web en GitHub</p> <p> Licencia</p> </li> </ul> <p>\u00bfComo se logra esta presentaci\u00f3n? No se trata de una extensi\u00f3n, sino de la hoja de estilos de Material for MkDocs, que define dos clases especiales llamadas <code>grid</code> y <code>card</code>. </p> <p>Lo primero que tenemos que hacer es crear un bloque <code>&lt;div&gt;</code> que pertenezca a esas clases, y poner en su interior una lista de elementos:</p> <pre><code>&lt;div class=\"grid cards\" markdown=1&gt;\n-   elemento 1\n-   elemento 2\n-   elemento 3\n-   elemento 4\n&lt;/div&gt;\n</code></pre> <p>El contenido del bloque se mostrar\u00e1 con ese aspecto de rejilla, con cada elemento de la lista en una celda. El n\u00famero de celdas por fila depende del tama\u00f1o de la ventana del navegador y de la resoluci\u00f3n de la pantalla.</p> <ul> <li>elemento 1</li> <li>elemento 2</li> <li>elemento 3</li> <li>elemento 4</li> </ul> <p>Usamos el atributo <code>markdown</code> porque, sin el, la sintaxis markdown no tiene efecto en un bloque <code>&lt;div&gt;</code>. Tenemos que activar la extensi\u00f3n en <code>md_in_html</code> en <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - md_in_html\n</code></pre> <p>A partir de ah\u00ed, basta con trabajarse cada elemento de la lista:</p> <pre><code>&lt;div class=\"grid cards\" markdown=1&gt;\n\n-   :material-clock-fast:{ .lg .middle } __Disponible en 5 minutos__\n\n    ---\n\n    Instale [mkdocs-material] con [pip] y comience a trabajar\n    en cuesti\u00f3n de minutos\n\n    [:octicons-arrow-right-24: Inicio][Inicio]\n\n-   :fontawesome-brands-markdown:{ .lg .middle } __Es markdown__\n\n    ---\n\n    Preoc\u00fapese solo por redactar los contenidos\n\n    [:octicons-arrow-right-24: Referencia][Referencia]\n\n-   :material-format-font:{ .lg .middle } __Configurable__\n\n    ---\n\n    Cambie colores, fuentes, idioma, iconos, logo y todo lo dem\u00e1s con poco esfuerzo\n\n    [:octicons-arrow-right-24: Configuraci\u00f3n][Configuraci\u00f3n]\n\n-   :material-scale-balance:{ .lg .middle } __Open Source__\n\n    ---\n\n    Material for MkDocs se distribuye bajo licencia MIT a trav\u00e9s de [GitHub]\n\n    [:octicons-arrow-right-24: Licencia][Licencia]\n\n&lt;/div&gt;\n</code></pre> <p>Veamos el primero de ellos:</p> <pre><code>-   :material-clock-fast:{ .lg .middle } __Disponible en 5 minutos__\n\n    ---\n\n    Instale [mkdocs-material] con [pip] y comience a trabajar\n    en cuesti\u00f3n de minutos\n\n    [:octicons-arrow-right-24: Inicio][Inicio]\n</code></pre> <p>Utilizamos tres p\u00e1rrafos y una l\u00ednea separadora marcada con tres guiones. Incluimos en el texto dos iconos:</p> <ul> <li><code>:material-clock-fast:</code> </li> <li><code>:octicons-arrow-right-24:</code> </li> </ul> <p>Las clases <code>.lg</code> y <code>.middle</code> configuran el aspecto del icono.</p> <p>Si quitamos la clase <code>cards</code>, podemos aplicar el comportamiento de rejilla a otros tipos de elementos, todos ellos de bloque:</p> Programa en lenguaje Java:<pre><code>class HelloWorld {\n\n    public static void main (String args[]) {\n    System.out.println(\"Hola Mundo\");\n  }\n\n}\n</code></pre> Resultado:<pre><code>Hola Mundo\n</code></pre> <p>Lo que se consigue con:</p> <pre><code>&lt;div class=\"grid\" markdown=\"1\"&gt;\n\n```java title=\"Programa en lenguaje Java:\"\nclass HelloWorld {\n\n    public static void main (String args[]) {\n    System.out.println(\"Hola Mundo\");\n  }\n\n}\n```\n\n```title=\"Resultado:\"\nHola Mundo\n```\n\n&lt;/div&gt;\n</code></pre> <p>Otro ejemplo:</p> <p>Programa en lenguaje Java</p> <pre><code>class HelloWorld {\n\n    public static void main (String args[]) {\n    System.out.println(\"Hola Mundo\");\n    }\n\n}\n</code></pre> <p>Resultado:</p> <p>Hola Mundo</p> <p>Esto se obtiene con:</p> <pre><code>&lt;div class=\"grid\" markdown=\"1\"&gt;\n\n!!! abstract \"Programa en lenguaje Java\"\n\n    ```java\n    class HelloWorld {\n\n        public static void main (String args[]) {\n        System.out.println(\"Hola Mundo\");\n        }\n\n    }\n    ```\n\n!!! success  \"Resultado:\"\n\n    Hola Mundo\n\n\n&lt;/div&gt;\n</code></pre>"},{"location":"209ExtDiagramas.html","title":"Diagramas y f\u00f3rmulas","text":""},{"location":"209ExtDiagramas.html#diagramas","title":"Diagramas","text":"<p>Dice el refr\u00e1n que \"una imagen vale por mil palabras\". Y en cualquier documento, el uso de diagramas facilita la representaci\u00f3n de ideas:</p> <pre><code>graph LR\n  A[Inicio de la prueba] --&gt; B{Error?};\n  B --&gt;|Si| C[Revisar...];\n  C --&gt; D[Verificar];\n  D --&gt; B;\n  B ----&gt;|No| E[Conseguido!];</code></pre>"},{"location":"209ExtDiagramas.html#activar-diagramas","title":"Activar diagramas","text":"<p>Para lograr este resultado, tenemos que hacer uso de la extensi\u00f3n superfences, que ya hemos utilizado para mostrar texto de c\u00f3digo fuente:</p> <pre><code>```clase\n\n    texto de un programa\n\n```\n</code></pre> <p>En este caso, en lugar de un lenguaje de programaci\u00f3n vamos a utilizar un lenguaje de diagramas, basado en un proyecto llamado Mermaid, que es un software incorporado por Material for MkDocs. Tenemos que activarlo en <code>mkdocs.yml</code>:</p> <pre><code>- pymdownx.superfences:\n    custom_fences:\n      - name: mermaid\n        class: mermaid\n        format: !!python/name:pymdownx.superfences.fence_code_format\n</code></pre>"},{"location":"209ExtDiagramas.html#uso","title":"Uso","text":"<p>Siguiendo con el ejemplo anterior, all\u00ed donde queremos el diagrama, insertar el siguiente bloque en el texto markdown:</p> <pre><code>``` mermaid\ngraph LR\n  A[Inicio de la prueba] --&gt; B{Error?};\n  B --&gt;|Si| C[Revisar...];\n  C --&gt; D[Verificar];\n  D --&gt; B;\n  B ----&gt;|No| E[Conseguido!];\n```\n</code></pre> <p>\u00bfLa sintaxis del lenguaje? Seguir la documentaci\u00f3n de Mermaid. En cuanto a las reglas de estilo, colores, tipo de letra, etc, son las aportadas por Material for MkDocs y por las hojas de estilo a\u00f1adidas por nosotros.</p> <p>Existen varios tipos de diagramas. En el ejemplo, la primera l\u00ednea del bloque indica el tipo:</p> <pre><code>graph LR\n</code></pre> <p>Veamos a continuaci\u00f3n algunos ejemplos.</p>"},{"location":"209ExtDiagramas.html#diagrama-de-flujo","title":"Diagrama de flujo","text":"<p>Un diagrama de flujo representa un proceso dividido en varios pasos. Cada paso es un nodo:</p> <pre><code>flowchart LR\n  A[Inicio] --&gt; B[Paso 1];\n  B --&gt; C[Paso 2];\n  C --&gt; D[Paso 3];\n  D --&gt; E[Final];\n  E </code></pre> <p>V\u00e9ase documentaci\u00f3n. El tipo puede ser:</p> <pre><code>flowchart LR\n</code></pre> <p>o bien</p> <pre><code>graph LR\n</code></pre> <p>La palabra <code>LR</code> indica la direcci\u00f3n de las flechas:</p> <ul> <li>TB - Top to bottom</li> <li>TD - Top-down/ igual que top to bottom</li> <li>BT - Bottom to top</li> <li>RL - Right to left</li> <li>LR - Left to right</li> </ul> <p>Cada nodo se representa con un identificador y un texto entre corchetes, uniendo los diferentes pasos con <code>--&gt;</code> </p> <pre><code>``` mermaid\ngraph LR\n  A[Inicio] --&gt; B[Paso 1];\n  B --&gt; C[Paso 2];\n  C --&gt; D[Paso 3];\n  D --&gt; E[Final];\n  E \n```\n</code></pre> <p>Una nodo en forma de rombo se obtiene sustituyendo los corchetes por llaves <code>{}</code>. El texto superpuesto en las flechas se obtiene mediante:</p> <pre><code>nodo1 --&gt; |texto| nodo2\n</code></pre> <p>Por ejemplo:</p> <pre><code>``` mermaid\ngraph LR\n  A[Inicio] --&gt; C{Comprobar};\n\n  C --&gt; |Ok| P2[Paso 2];\n  P2 --&gt; P3[Paso 3];\n  P3 --&gt; F[Final];\n\n  C --&gt; |Error| AB[Abortar];\n  AB --&gt; F[Final];\n```\n</code></pre> <p>Muestra:</p> <pre><code>graph LR\n  A[Inicio] --&gt; C{Comprobar};\n\n  C --&gt; |Ok| P2[Paso 2];\n  P2 --&gt; P3[Paso 3];\n  P3 --&gt; F[Final];\n\n  C --&gt; |Error| AB[Abortar];\n  AB --&gt; F[Final];</code></pre> <p>Los nodos pueden tener diferente aspecto: rect\u00e1ngulos, c\u00edrculos, rombos, etc. Ver documentaci\u00f3n</p>"},{"location":"209ExtDiagramas.html#diagramas-de-secuencia","title":"Diagramas de secuencia","text":"<p>Los diagramas de secuencia describen una interacci\u00f3n entre m\u00faltiples objetos o personas:</p> <pre><code>sequenceDiagram\n    Alicia-&gt;&gt;Roberto: Hola Roberto, \u00bfque tal est\u00e1s?\n    Roberto-&gt;&gt;Alicia: Bien, gracias \u00bfY tu?\n    create participant Carlos\n    Alicia-&gt;&gt;Carlos: \u00a1Hola Carlos!\n    create actor D as Enrique\n    Carlos-&gt;&gt;D: \u00a1Hola!\n    destroy Carlos\n    Alicia-xCarlos: Somos demasiados\n    destroy Roberto\n    Roberto-&gt;&gt;Alicia: Estoy de acuerdo</code></pre> <p>Siendo el texto fuente de este ejemplo:</p> <pre><code>```mermaid\nsequenceDiagram\n    Alicia-&gt;&gt;Roberto: Hola Roberto, \u00bfque tal est\u00e1s?\n    Roberto-&gt;&gt;Alicia: Bien, gracias \u00bfY tu?\n    create participant Carlos\n    Alicia-&gt;&gt;Carlos: \u00a1Hola Carlos!\n    create actor D as Enrique\n    Carlos-&gt;&gt;D: \u00a1Hola!\n    destroy Carlos\n    Alicia-xCarlos: Somos demasiados\n    destroy Roberto\n    Roberto-&gt;&gt;Alicia: Estoy de acuerdo\n```\n</code></pre> <p>V\u00e9ase como Mermaid proporciona un lenguaje de programaci\u00f3n para representar con pocas l\u00edneas situaciones complejas. Ver referencia.</p>"},{"location":"209ExtDiagramas.html#diagramas-de-estado","title":"Diagramas de estado","text":"<p>Los diagramas de estado permiten describir el comportamiento de un sistema:</p> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; Estado1\n    fork_state --&gt; Estado2\n\n    state join_state &lt;&lt;join&gt;&gt;\n    Estado1 --&gt; join_state\n    Estado2 --&gt; join_state\n    join_state --&gt; Estado4\n    Estado4 --&gt; [*]</code></pre> <p>Texto fuente:</p> <pre><code>``` mermaid\nstateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; Estado1\n    fork_state --&gt; Estado2\n\n    state join_state &lt;&lt;join&gt;&gt;\n    Estado1 --&gt; join_state\n    Estado2 --&gt; join_state\n    join_state --&gt; Estado4\n    Estado4 --&gt; [*]\n```\n</code></pre> <p>Ver referencia</p>"},{"location":"209ExtDiagramas.html#diagramas-de-clases","title":"Diagramas de clases","text":"<p>En el mundo de la programaci\u00f3n inform\u00e1tica se usa una t\u00e9cnica denominada programaci\u00f3n orientada a objetos. Cada aplicaci\u00f3n est\u00e1 formada por objetos, que tienen unas propiedades, y estas dependen de la clase de objeto. Por ejemplo, toda persona pertenece a la clase \"Persona\", y como tal tiene unas propiedades de edad, sexo, nombre, apellidos, etc.</p> <p>La clase a la que pertenece un objeto define las propiedades, las acciones que podemos realizar con los objetos, y las relaciones entre clases. Todo esto se puede representar gr\u00e1ficamente con diagramas de clases.</p> <p>Supongamos una apliaci\u00f3n inform\u00e1tica que maneja cuatro clases de objetos:</p> <ul> <li>personas</li> <li>estudiantes</li> <li>profesores</li> <li>direcciones postales</li> </ul> <p>Los objetos de la clase estudiante y profesor se relacionan con la clase persona, en la medida que tienen todas sus propiedades mas otras a\u00f1adidas. Por lo tanto, en el diagrama representaremos:</p> <ul> <li>la clase persona con sus atributos</li> <li>las clases estudiante y profesor solo con los atributos a\u00f1adidos que les son propios.</li> </ul> <p>Adem\u00e1s, la clase persona incluye un atributo direcci\u00f3n postal, que se relaciona con la clase direcciones. Cada direcci\u00f3n tiene, a su vez, otros atributos.</p> <p>Cada clase se representa en un recuadro, indicando sus atributos y acciones previstas por la aplicaci\u00f3n. El gr\u00e1fico muestra tambi\u00e9n las relaciones entre clases:</p> <pre><code>classDiagram\n  Persona &lt;|-- Estudiante\n  Persona &lt;|-- Profesor\n  Persona : +String nombre\n  Persona : +String tel\u00e9fono\n  Persona : +String email\n  Persona: +adquirirPase()\n  Direcci\u00f3n \"1\" &lt;-- \"0..1\" Persona:vive en\n  class Estudiante{\n    +int c\u00f3digo\n    +int notaMedia\n    +Aprobar()\n    +Suspender()\n  }\n  class Profesor{\n    +int salario\n  }\n  class Direcci\u00f3n{\n    +String calle\n    +String ciudad\n    +String provincia\n    +int codigoPostal\n    +String pais\n    -validar()\n    +crearFormatoTexto()  \n  }</code></pre> <p>El texto fuente del gr\u00e1fico es:</p> <pre><code>``` mermaid\nclassDiagram\n  Persona &lt;|-- Estudiante\n  Persona &lt;|-- Profesor\n  Persona : +String nombre\n  Persona : +String tel\u00e9fono\n  Persona : +String email\n  Persona: +adquirirPase()\n  Direcci\u00f3n \"1\" &lt;-- \"0..1\" Persona:vive en\n  class Estudiante{\n    +int c\u00f3digo\n    +int notaMedia\n    +Aprobar()\n    +Suspender()\n  }\n  class Profesor{\n    +int salario\n  }\n  class Direcci\u00f3n{\n    +String calle\n    +String ciudad\n    +String provincia\n    +int codigoPostal\n    +String pais\n    -validar()\n    +crearFormatoTexto() \n  }\n```\n</code></pre> <p>Ver referencia</p>"},{"location":"209ExtDiagramas.html#otros-graficos","title":"Otros gr\u00e1ficos","text":"<p>Mermaid proporciona otros muchos tipos de gr\u00e1ficos, aunque su uso est\u00e1 condicionado por las hojas de estilo proporcionadas por Material for MkDocs, que no cubre todas las opciones. V\u00e9ase documentaci\u00f3n para m\u00e1s informaci\u00f3n.</p>"},{"location":"209ExtDiagramas.html#formulas-aritmeticas","title":"F\u00f3rmulas aritm\u00e9ticas","text":"<p>La extensi\u00f3n Arithmatex genera y muestra ecuaciones matem\u00e1ticas. En formato markdown, las f\u00f3rmulas se escriben como bloque aparte delimitados entre dos marcas <code>$$</code>. Por ejemplo:</p> <pre><code>$$\n\\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k}\n$$\n</code></pre> <p>Lo que se visualiza es lo siguiente:</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\] <p>Arithmatex utiliza un software llamado MathJax. Consultar la documentaci\u00f3n para conocer la sintaxis en la escritura de f\u00f3rmulas.</p> <p>Activar esta extensi\u00f3n con:</p> <pre><code>markdown_extensions:\n   - pymdownx.arithmatex:\n         generic: true\n</code></pre> <p>Adem\u00e1s de activar la extensi\u00f3n, en el archivo de configuraci\u00f3n <code>mkdocs.yml</code> debemos incluir:</p> <pre><code>extra_javascript:\n  - https://unpkg.com/mathjax@3/es5/tex-mml-chtml.js\n  - javascripts/mathjax.js\n</code></pre> <p>Ya hemos visto que podemos poner un poco de programaci\u00f3n en nuestra p\u00e1gina web, usando el lenguaje javaScript. El par\u00e1metro de configuraci\u00f3n <code>extra_javascript</code> permite indicar una lista de archivos script:</p> <ul> <li>le decimos que incorpore un archivo online</li> <li>a\u00f1adimos nuestra propia pieza de programaci\u00f3n, <code>/docs/javascripts/mathjax.js</code></li> </ul> <p>Tenemos que hacer de programadores inform\u00e1ticos y crear ese archivo <code>mathjax.js</code> Puede que no sepamos mucho sobre el lenguaje de programaci\u00f3n JavaScript, pero da igual. El contenido del fichero es el siguiente texto:</p> <pre><code>window.MathJax = {\n  tex: {\n    inlineMath: [[\"\\\\(\", \"\\\\)\"]],\n    displayMath: [[\"\\\\[\", \"\\\\]\"]],\n    processEscapes: true,\n    processEnvironments: true\n  },\n  options: {\n    ignoreHtmlClass: \".*|\",\n    processHtmlClass: \"arithmatex\"\n  }\n};\n\ndocument$.subscribe(() =&gt; { \n  MathJax.startup.output.clearCache()\n  MathJax.typesetClear()\n  MathJax.texReset()\n  MathJax.typesetPromise()\n})\n</code></pre>"},{"location":"209ExtDiagramas.html#usando-katex","title":"Usando KaTex","text":"<p>MathJax usa una sintaxis de escritura de f\u00f3rmulas que puede resultar algo intimidante. Como alternativa, podemos utilizar KaTex, un software algo m\u00e1s sencillo.</p> <p>En el archivo de configuraci\u00f3n <code>mkdocs.yml</code> escribimos:</p> <pre><code>markdown_extensions:\n  - pymdownx.arithmatex:\n      generic: true\n\nextra_javascript:\n  - javascripts/katex.js\n  - https://unpkg.com/katex@0/dist/katex.min.js\n  - https://unpkg.com/katex@0/dist/contrib/auto-render.min.js\n\nextra_css:\n  - https://unpkg.com/katex@0/dist/katex.min.css\n</code></pre> <p>Y en la carpeta <code>/docs/javascripts</code> ponemos el siguiente archivo <code>katex.js</code>:</p> <pre><code>document$.subscribe(({ body }) =&gt; { \n  renderMathInElement(body, {\n    delimiters: [\n      { left: \"$$\",  right: \"$$\",  display: true },\n      { left: \"$\",   right: \"$\",   display: false },\n      { left: \"\\\\(\", right: \"\\\\)\", display: false },\n      { left: \"\\\\[\", right: \"\\\\]\", display: true }\n    ],\n  })\n})\n</code></pre> <p>Ver documentaci\u00f3n de Material for MkDocs.</p>"},{"location":"210ExtEmergente.html","title":"Ayuda emergente","text":"<p>Todo manual t\u00e9cnico suele mostrar abreviaturas y elementos que, al pasar el rat\u00f3n sobre ellos, podemos hacer que se muestre un peque\u00f1o recuadro emergente con texto explicativo.</p> <p>Material for MkDocs cuenta con varias posibilidades para visualizar contenidos emergentes.</p>"},{"location":"210ExtEmergente.html#tooltips","title":"Tooltips","text":"<p>HTML permite mostrar un recuadro de ayuda al pasar el rat\u00f3n sobre cualquier elemento. Parea ello usamos el atributo \"title\":</p> <pre><code>&lt;p title=\"Texto de ayuda desplegado &lt;br&gt; al pasar el rat\u00f3n sobre el p\u00e1rrafo\"&gt;\nPasa el rat\u00f3n por aqu\u00ed\n&lt;/p&gt;\n</code></pre> <p>Lo que muestra:</p> <p> Pasa el rat\u00f3n por aqu\u00ed </p> <p>La sintaxis markdown permite a\u00f1adir un texto en los enlaces, que act\u00faa como atributo title:</p> <pre><code>[Texto del enlace](https://ejemplo.com \"Texto de ayuda\")\n</code></pre> <p>Para otros elementos, podemos usar la extensi\u00f3n <code>attr_list</code>:</p> <pre><code>markdown_extensions:\n  - attr_list\n</code></pre> <p>lo que permite definir atributos:</p> <pre><code>Pasa con el rat\u00f3n sobre este icono\n:open_file_folder:{ .lg title=\"/mis_documentos\" }\npara visualizar el nombre de la carpeta\n</code></pre> <p>Pasa con el rat\u00f3n sobre este icono   para visualizar el nombre de la carpeta</p> <p>Nota: la clase <code>.lg</code> forma parte de la hoja de estilos de Material for MkDocs, y sirve para resaltar los iconos con mayor tama\u00f1o.</p> <p>Material for MkDocs proporciona unos tooltips m\u00e1s elaborados. A\u00f1adir lo siguiente a <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  name: material\n  features:\n    - content.tooltips\n</code></pre> <p>Con esta caracter\u00edstica activada, se a\u00f1adir\u00e1n tooltips para los siguientes elementos:</p> <ul> <li>En el contenido de la p\u00e1gina: elementos con la propiedad <code>title</code>, permalinks y bot\u00f3n de copiar c\u00f3digo</li> <li>En la cabecera: bot\u00f3n home, t\u00edtulo de cabecera, selector de paleta de colores, y enlace a repositorio</li> <li>En la barra de navegaci\u00f3n: enlaces que son abreviados con elipsis ...</li> </ul>"},{"location":"210ExtEmergente.html#abreviaturas","title":"Abreviaturas","text":"<p>La extensi\u00f3n Abbreviations permite que, si en el texto hay abreviaturas, al pasar el puntero del rat\u00f3n sobre las mismas, se muestre su significado. Si por ejemplo tenemos el texto:</p> <pre><code>Los formatos web est\u00e1n coordinados por el consorcio W3C.\n</code></pre> <p>Queremos que la abreviatura muestre un texto emergente:</p> <p>Los formatos web est\u00e1n coordinados por el consorcio W3C.</p> <p>La palabra W3C se mostrar\u00e1 en un tipo de letra especial y, al pasar el rat\u00f3n por encima, se muestra su significado al cabo de un breve lapso de tiempo.</p> <p>En el p\u00e1rrafo no hay que hacer nada especial, pero para que esto tenga efecto, en cualquier lugar del documento, tenemos que definir la abreviatura. La sintaxis es parecida a la de los enlaces por referencia, anteponiendo un asterisco:</p> <pre><code>Los formatos web est\u00e1n coordinados por el consorcio W3C.\n\n*[W3C]: World Wide Web Consortium\n</code></pre> <p>Hay que activar la extensi\u00f3n en el archivo <code>mdocs.yml</code></p> <pre><code>markdown_extensions:\n    - abbreviations\n</code></pre>"},{"location":"210ExtEmergente.html#anotaciones","title":"Anotaciones","text":"<p>M\u00e1s all\u00e1 de la capacidad de los tooltips, Material for MkDocs permite insertar un icono especial  en aquellos lugares del documento donde deseamos que, al pulsar sobre ese icono, se muestre un recuadro emergente con texto complejo, dise\u00f1ado en formato MarkDown. Por ejemplo, pulse en las siguientes marcas:</p> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing (2) elit.</p> <ol> <li> <p> Soy una anotaci\u00f3n. </p> <pre><code>Puedo contener texto fuente\nde un programa\n</code></pre> <p>Tambi\u00e9n p\u00e1rrafos con texto formateado,  im\u00e1genes, ... y cualquier cosa que se pueda expresar en Markdown.</p> </li> <li> <p>Un texto sencillo</p> </li> </ol> <p>El icono utilizado puede cambiarse por cualquiera de los distribuidos por el tema (o por uno a la medida) en el archivo de configuraci\u00f3n <code>mkdocs.yml</code>. Por ejemplo:</p> <pre><code>theme:\n  icon:\n    annotation: material/arrow-right-circle \n</code></pre> <p>Algunas opciones populares</p> <ul> <li> material/plus-circle</li> <li> material/circle-medium</li> <li> material/record-circle</li> <li> material/arrow-right-circle</li> <li> material/arrow-right-circle-outline</li> <li> material/chevron-right-circle</li> <li> material/star-four-points-circle</li> <li> material/plus-circle-outline</li> </ul> <p>Una anotaci\u00f3n est\u00e1 formada por dos partes, un marcador entre par\u00e9ntesis, en la ubicaci\u00f3n del icono, que puede colocarse en cualquier bloque que tenga la clase <code>.annotate</code>:</p> <pre><code>Lorem ipsum dolor sit amet, (1) consectetur adipiscing (2) elit.\n{ .annotate }\n</code></pre> <p>y una lista de contenidos, ubicada bajo el bloque que tiene los marcadores:</p> <pre><code>Lorem ipsum dolor sit amet, (1) consectetur adipiscing (2) elit.\n{ .annotate }\n\n1.  :man_raising_hand:{.lg} Soy una anotaci\u00f3n.\n\n    Puedo contener `c\u00f3digo`,\n\n    __texto formateado__, im\u00e1genes, ... y cualquier cosa \n    que se pueda expresar en Markdown.\n\n2.  Un texto sencillo\n</code></pre> <p>Si hay bloques anidados, todos sus componentes comparten la misma lista, que se escribe tras el bloque m\u00e1s externo. </p> <p>Si activamos la extensi\u00f3n SuperFences, el texto de las anotaciones puede tener, a su vez, otras anotaciones, con su propia lista:</p> <pre><code>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n{ .annotate }\n\n1.  :man_raising_hand: Soy una anotaci\u00f3n.  (1)\n    { .annotate }\n\n    1.  :woman_raising_hand: \u00a1Y yo tambi\u00e9n!\n</code></pre> <p>Muestra:</p> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> <p> Soy una anotaci\u00f3n. (1)</p> <ol> <li> \u00a1Y yo tambi\u00e9n!</li> </ol> </li> </ol> <p>Otro sitio donde pueden aparecer las anotaciones son en las admoniciones, tanto en la barra de t\u00edtulo como en el texto de la admonici\u00f3n:</p> <pre><code>!!! note annotate \"Phasellus posuere in sem ut cursus (1)\"\n\n    Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et\n    euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo\n    purus auctor massa, nec semper lorem quam in massa.\n\n1.  :man_raising_hand: Soy una anotaci\u00f3n.!\n2.  :woman_raising_hand: \u00a1Y yo tambi\u00e9n!\n</code></pre> <p>En este caso, la clase <code>annotate</code> se indica tras el tipo de admonici\u00f3n:</p> <pre><code>!!! note annotate \"Admonici\u00f3n con marcadores\"\n</code></pre> <p>Las pesta\u00f1as proporcionadas por la extensi\u00f3n tabbed no permiten anotaciones, pero el texto mostrado si. La lista se pone tras cada bloque correspondiente a una pesta\u00f1a:</p> <pre><code>=== \"Tab 1\"\n\n    Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n    { .annotate }\n\n    1.  :man_raising_hand: Soy una anotaci\u00f3n.!\n\n=== \"Tab 2\"\n\n    Phasellus posuere in sem ut cursus (1)\n    { .annotate }\n\n    1.  :woman_raising_hand: \u00a1Y yo tambi\u00e9n!\n</code></pre> <p>Si la clase <code>.annotate</code> es dificil de aplicar, podemos crear una lista de anotaciones para todo un bloque delimitado por etiquetas <code>&lt;div&gt;</code>:</p> <pre><code>&lt;div class=\"annotate\" markdown&gt;\n\n&gt; Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n\n&lt;/div&gt;\n\n1.  :man_raising_hand: Soy una anotaci\u00f3n.!\n</code></pre> <p>Con este truco, las anotaciones pueden aplicarse a citas, listas, y cualquier otro elemento no contemplado por la extensi\u00f3n attr_list</p>"},{"location":"211ExtSnnipets.html","title":"Archivos externos","text":""},{"location":"211ExtSnnipets.html#incluir-archivos","title":"Incluir archivos","text":"<p>La extensi\u00f3n Snippets permite incluir texto de otros ficheros en el actual. Supongamos que tenemos dos archivos. Si en una l\u00ednea del documento 1 escribimos:</p> <pre><code>Texto del documento 1.\n\n--8&lt;-- \"miArchivoExterno2.txt\"\n\nM\u00e1s texto del documento 1.\n</code></pre> <p>al llegar a la marca <code>--8&lt;--</code> MkDocs sustituir\u00e1 esa l\u00ednea por el texto del fichero externo indicado, como paso previo antes de transformar markdown a HTML. Lo que se va a procesar ser\u00e1 el resultado de la inclusi\u00f3n:</p> <pre><code>Texto del documento 1.\n\nTexto del documento2.\n\nM\u00e1s texto del documento 1.\n</code></pre> <p>El nombre del fichero ha de ir entrecomillado y precedido por la marca <code>--8&lt;--</code>. Su ubicaci\u00f3n se establece con referencia al directorio ra\u00edz de proyecto (all\u00ed donde se encuentra <code>mkdocs.yml</code>:</p> <pre><code>--8&lt;-- \"docs/mifichero.md\"\n</code></pre> <p>Esta caracter\u00edstica solo funcionar\u00e1 si esta marca se escribe en l\u00ednea aparte (no tiene efecto como parte de un p\u00e1rrafo). Debemos activar en el archivo de configuraci\u00f3n <code>mkdics.yml</code>:</p> <pre><code>markdown_extensions:\n  - pymdownx.snippets\n</code></pre> <p>Acerca de la marca <code>--8&lt;--</code></p> <p>Curiosa marca <code>--8&lt;--</code>, \u00bfno? En realidad representa la opci\u00f3n de cortar y pegar texto. Se trata de unas tijeras <code>8&lt;</code> entre guiones.</p> <p>Problema</p> <p>Al redactar este cuaderno, me he encontrado con que el texto <code>--8&lt;--</code> no se mostraba como parte de los ejemplos, ya que snippets lo interpretaba como mi intenci\u00f3n de insertar un archivo. Podemos desactivar el efecto anteponiendo un punto y coma <code>;--8&lt;--</code>. Snippets respetar\u00e1 la marca como texto regular y ocultar\u00e1 el car\u00e1cter de punto coma.</p> <p>\u00bfComo resuelve snippets la inclusi\u00f3n de archivos? hay dos aspectos a tener en cuenta:</p> <ul> <li> <p>Toda inclusi\u00f3n se hace antes de la transformaci\u00f3n a HTML. La sintaxis markdown de los archivos incluidos pasar\u00e1 a formar parte del conjunto a procesar.</p> </li> <li> <p>El archivo externo incluido puede, a su vez, tener otras marcas <code>--8&lt;--</code>, lo que hace que se produzca una inclusi\u00f3n de archivos en cascada, es decir, nuestro archivo actual incluye al archivo X, este al archivo Y, y este a su vez, al archivo Z.</p> <p>Esto puede dar lugar a un c\u00edrculo cerrado, cuando X incluye a Y, este a Z, y este \u00faltimo a X. Snippets lo evita ignorando la inclusi\u00f3n de archivos que ya han sido incluidos.</p> </li> </ul> <p>Veamos a continuaci\u00f3n algunas utilidades de la extensi\u00f3n Snippets.</p>"},{"location":"211ExtSnnipets.html#para-incluir-texto-fuente","title":"Para incluir texto fuente","text":"<p>Supongamos que estamos creando un documento con cientos de ejemplos de programaci\u00f3n. Podemos poner esos programas en ficheros aparte, para probar que se ejecutan correctamente, y pedir a MkDocs que los incluya en el texto del manual:</p> <pre><code>```java title=\"Programa de ejemplo 1.1\"\n\n--8&lt;-- \"ejemplos/programa1.1.txt\"\n\n```\n</code></pre> <p>La carpeta hace referencia a una que cuelga del directorio ra\u00edz del proyecto. No ponemos los archivos en la carpeta <code>/docs</code> para evitar que se generen archivos HTML para cada fichero. Solo queremos incluirlos en el documento principal.</p>"},{"location":"211ExtSnnipets.html#para-crear-un-glosario-de-abreviaturas","title":"Para crear un glosario de abreviaturas","text":"<p>En el cap\u00edtulo dedicado al texto emergente hemos visto la extensi\u00f3n Abbreviations, cuyo uso permite que, si en el texto hay abreviaturas, al pasar el puntero del rat\u00f3n sobre las mismas, se muestre su significado. Por ejemplo:</p> <p>Los formatos web est\u00e1n coordinados por el consorcio W3C.</p> <p>Vemos que la palabra W3C se muestra en un tipo de letra especial y, al pasar el rat\u00f3n por encima, se muestra su significado al cabo de un breve lapso de tiempo.</p> <p>\u00bfQue pasa si queremos definir las mismas abreviaturas en varias p\u00e1ginas del documento? Podemos crear un archivo <code>glosario.md</code> con las definiciones de abreviaturas:</p> <pre><code>*[HTML]: Hyper Text Markup Language\n*[W3C]: World Wide Web Consortium\n</code></pre> <p>y de esta forma, todos los t\u00e9rminos incluidos en el glosario podr\u00e1n ser mostrados en cualquier documento con la posibilidad de visualizar su significado al pasar el rat\u00f3n por encima.</p> <p>Pero esto tiene un inconveniente. Al final de cada archivo markdown tenemos que escribir:</p> <pre><code>--8&lt;-- \"glosario.md\"\n</code></pre> <p>Podemos evitarlo si configuramos una lista de archivos a incluir autom\u00e1ticamente en todos los documentos del proyecto:</p> <pre><code>markdown_extensions:\n  - pymdownx.snippets:\n      auto_append:\n        - include/glosario.md\n</code></pre>"},{"location":"211ExtSnnipets.html#para-crear-una-lista-de-enlaces","title":"Para crear una lista de enlaces","text":"<p>N\u00f3tese que, a lo largo de las p\u00e1ginas de este cuaderno, incluimos enlaces varios a las mismas p\u00e1ginas:</p> <ul> <li>Material for MkDocs</li> <li>MkDocs</li> <li>PyMdown</li> </ul> <p>Al final de cada documento tenemos que a\u00f1adir las referencias:</p> <pre><code>[Material for MkDocs]: https://squidfunk.github.io/mkdocs-material\n[MkDocs]: https://www.mkdocs.org\n[PyMdown]: https://facelessuser.github.io/pymdown-extensions/\n</code></pre> <p>lo que se puede evitar creando un archivo de enlaces y configurando <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n    - pymdownx.snippets:\n          auto_append:\n             - include/enlaces.md\n</code></pre>"},{"location":"211ExtSnnipets.html#para-insertar-la-fecha-de-creacion","title":"Para insertar la fecha de creaci\u00f3n","text":"<p>Para compilar el proyecto, podemos crear un script de comandos:</p> <pre><code>cd /micarpeta/miproyecto\ndate \"+Fecha \u00faltima actualizaci\u00f3n: %d-%b-%Y\" &gt; ./include/fecha.md\nmkdocs build\n</code></pre> <p>El funcionamiento del comando \"date\" depende del sistema operativo. En mi caso, trat\u00e1ndose de un Mac, se crea un archivo con una l\u00ednea de texto:</p> <p>Fecha \u00faltima actualizaci\u00f3n: 03-ene-2025</p> <p>En la p\u00e1gina de portada incluimos:</p> <pre><code>--8&lt;-- \"include/fecha.md\"\n</code></pre> <p>y de esta forma, siempre que compilemos el proyecto se mostrar\u00e1 la fecha de actualizaci\u00f3n en la primera p\u00e1gina.</p>"},{"location":"300Metadatos.html","title":"Metadatos","text":"<p>La transformaci\u00f3n de un archivo en p\u00e1ginas web viene configurada en buena parte por la informaci\u00f3n que ponemos en el archivo de configuraci\u00f3n <code>mkdocs.yml</code>. Pero esto afecta a todos los archivos del proyecto. Podemos individualizar determinados par\u00e1metros para un archivo concreto.</p>"},{"location":"300Metadatos.html#front-matter","title":"Front-matter","text":"<p>Para configurar un documento, en las primeras l\u00edneas de todo archivo markdown podemos poner una secci\u00f3n especial de definiciones de \"metadatos\". Se denomina front-matter y se delimita entre dos l\u00edneas formadas por tres guiones.</p> <pre><code>---\ntitle: Mi Documento\nsummary: Una breve descripci\u00f3n de todo esto.\nauthors:\n    - Juan P\u00e9rez\n    - Pepe Ruiz\ndate: 2018-09-12\nsome_url: https://ejemplo.com\n---\n\nPrimer p\u00e1rrafo del documento.\n</code></pre>"},{"location":"300Metadatos.html#algunos-metadatos","title":"Algunos metadatos","text":"<p>\u00bfComo usar los metadatos? MkDocs tiene algunas palabras clave predeterminadas:</p> <ul> <li> <p>template:</p> <p>Cada documento es un texto que se inserta en un archivo de plantilla HTML. Esta variable determina el nombre de la plantilla utilizada en la p\u00e1gina actual. Por defecto se usa:</p> <pre><code>template: main.html\n</code></pre> </li> <li> <p>title:</p> <p>Es el t\u00edtulo del documento. MkDocs intentar\u00e1 determinar el t\u00edtulo a partir de los siguientes elementos (en orden):</p> <ol> <li> <p>El t\u00edtulo definido en el apartado <code>nav</code> del archivo de configuraci\u00f3n:</p> <p>t\u00edtulo: archivo.md </p> </li> <li> <p>El t\u00edtulo definido en el front-matter del documento, bajo la denominaci\u00f3n <code>title</code>.</p> </li> <li> <p>El p\u00e1rrafo de cabecera de nivel 1 en la primera l\u00ednea del cuerpo del documento.</p> </li> <li> <p>El nombre del fichero.</p> </li> </ol> <p>Cuando encuentra un t\u00edtulo, se descarta el resto de los pasos.</p> </li> </ul>"},{"location":"300Metadatos.html#estilo-de-escritura","title":"Estilo de escritura","text":"<p>Los metadatos se pueden escribir en dos formatos alternativos: estilo YAML y estilo Markdown.</p> <p>Los metadatos al estilo YAML consisten en parejas <code>clave:valor</code>. La primera l\u00ednea del documento debe consistir en tres guiones <code>---</code> y el bloque de meta-datos debe finalizar con otra l\u00ednea <code>---</code> o <code>...</code>.</p> <p>El contenido entre ambos delimitadores es analizado con las mismas reglas que se aplican al formato YAML:</p> <p>YAML es capaz de detectar tipos de datos. Recu\u00e9rdese que MkDocs es un programa escrito en Python, por lo que aqu\u00ed hacemos referencia a los tipos contemplados por ese lenguaje de programaci\u00f3n. En el ejemplo anterior, los valores de <code>title</code>, <code>summary</code> y <code>some_url</code> son cadenas de texto, el valor de <code>authors</code> es una lista de cadenas, y el valor de <code>date</code> es un objeto <code>datetime.date</code>.</p> <p>N\u00f3tese que los nombres de par\u00e1metros YAML son case-sensitive. MkDocs espera que las palabras se escriban en min\u00fascula.</p> <p>El nivel superior de YAML debe ser una colecci\u00f3n de parejas clave:valor, que se convertir\u00e1 en un diccionario Python. Si el analizador YAML encuentra un error, MkDocs no reconocer\u00e1 la secci\u00f3n como meta-datos, el atributo <code>meta</code> de la p\u00e1gina estar\u00e1 vac\u00edo, y la secci\u00f3n se eliminar\u00e1 del documento.</p> <p>La otra opci\u00f3n de contemplada por MkDocs son los meta-datos estilo MultiMarkdown. Este es un estilo introducido por el proyecto MultiMarkdown, y los meta-datos consisten en una serie de palabras clave y valor definidos al comienzo del documento. Por ejemplo:</p> <pre><code>title: Mi Documento\nsummary: Una breve descripci\u00f3n de todo esto.\nAuthors: Juan P\u00e9rez\n         Pepe Ruiz\nDate:    January 12, 2017\nblank-value:\nsome_url: https://ejemplo.com\n\nPrimer p\u00e1rrafo del documento.\n</code></pre> <p>Las palabras clave son case-insensitive y pueden consistir en letras, n\u00fameros, caracteres de subrayado y guiones, y deben terminar con dos puntos. El valor consiste en todo lo que sigue a los dos puntos. Puede estar vac\u00edo.</p> <p>Si una l\u00ednea est\u00e1 sangrada cuatro o m\u00e1s espacios, se asume que es una l\u00ednea adicional perteneciente al valor de la anterior. Los valores pueden ser multil\u00ednea, y todas las l\u00edneas se unir\u00e1n para formar una cadena.</p> <p>La primera l\u00ednea en blanco da por finalizados los meta-datos y da comienzo al contenido del documento. La primera l\u00ednea del archivo no puede estar en blanco.</p> <p>MkDocs no contempla los delimitadores yaml (<code>---</code> o <code>...</code>) para los meta-datos estilo MultiMarkdown. De hecho, MkDocs los utiliza para determinar si los metadatos son estilo YAML o MultiMarkdown. Si detecta el uso de delimitadores, pero el contenido no es YAML v\u00e1lido,MkDocs no intentar\u00e1 analizar el contenido como MultiMarkdown.</p>"},{"location":"401ConfAssets.html","title":"CSS y Scripts","text":""},{"location":"401ConfAssets.html#anadir-hojas-de-estilo","title":"A\u00f1adir hojas de estilo","text":"<p>MkDocs transforma nuestros documentos en p\u00e1ginas web, a\u00f1adiendo una barra de cabecera y otra de pie de p\u00e1gina, \u00edndices, un mecanismo de b\u00fasqueda, colores, reglas de estilo y elementos varios. Podemos personalizar el resultado de varias formas. Una de ellas consiste en a\u00f1adir nuestras propias hojas de estilo. </p> <p>Para ello, crearemos uno o varios archivos \".css\" y los dejaremos en la carpeta <code>docs</code>, posiblemente en una subcarpeta:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u251c\u2500 index.md\n\u2502  \u251c\u2500 pagina2.md\n\u2502  \u251c\u2500 pagina3.md\n\u2502  \u2502\n\u2502  \u2514\u2500 estilos/\n\u2502     \u251c\u2500 estilos1.css\n\u2502     \u2514\u2500 estilos2.css\n\u2502\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>En el archivo de configuraci\u00f3n <code>mkdocs.yml</code> tenemos que apuntar a esa lista de archivos mediante el par\u00e1metro <code>extra_css</code>:</p> <pre><code>extra_css:\n  - estilos/estilos1.css\n  - estilos/estilos2.css\n</code></pre> <p>N\u00f3tese que se asume que los elementos de la lista son archivos o subcarpetas ubicados en <code>/docs</code>.</p> <p>Veamos un ejemplo. A m\u00ed me gusta enmarcar determinados p\u00e1rrafos en un recuadro con sombra:</p> <p>Texto a mostrar enmarcado</p> <pre><code>Texto fuente\n</code></pre> <p>Para ello, creo un archivo <code>estilos.css</code> con lo siguiente:</p> <pre><code>.conmarco {box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), \n                       0 6px 20px 0 rgba(0, 0, 0, 0.19);\n           padding: 10px;\n          }\n</code></pre> <p>He creado una clase \"conmarco\" que tiene dos propiedades de estilo. La propiedad <code>box-shadow</code> establece el grosor y color de las sombras. Sin entrar aqu\u00ed en la descripci\u00f3n de la sintaxis CSS, n\u00f3tese que las medidas se establecen en puntos de color (pixels).</p> <p>La propiedad <code>padding</code> establece la cantidad de espacio entre el marco y el contenido, lo que permite separarlo visualmente.</p> <p>Tras crear la hoja de estilos, tenemos que decidir cuales son los elementos del documento a los que se va a aplicar estas reglas. Si por ejemplo queremos enmarcar un p\u00e1rrafo, en el texto markdown le asignamos el atributo <code>class</code>:</p> <pre><code>Texto a mostrar enmarcado\n{: .conmarco }\n</code></pre> <p>Para aplicar estilos a un p\u00e1rrafo de esta forma, hay que activar la extensi\u00f3n attr_list:</p> <pre><code>markdown_extensions:\n    - attr_list\n</code></pre> <p>Para enmarcar un bloque de varios elementos, podemos delimitarlo entre etiquetas <code>&lt;div&gt;</code>:</p> <pre><code>&lt;div class=\"conmarco\" markdown=\"1\"&gt;\n\nTexto a mostrar enmarcado\n\n    Texto fuente\n\n&lt;/div&gt;\n</code></pre> <p>En el archivo de configuraci\u00f3n <code>mkdocs.yml</code>, tenemos que activar la extensi\u00f3n Markdown in HTML si queremos que se tenga en cuenta la sintaxis markdown dentro en un bloque HTML:</p> <pre><code>markdown_extensions:\n  - md_in_html\n</code></pre>"},{"location":"401ConfAssets.html#anadir-scripts","title":"A\u00f1adir scripts","text":"<p>Otra opci\u00f3n de personalizaci\u00f3n es a\u00f1adir nuestras propias funcionalidades mediente un script. Los scripts son peque\u00f1os programas, que se puede incluir directamente en el texto, delimitados entre etiquetas <code>&lt;script&gt;</code>:</p> <pre><code>&lt;script&gt;\n\ninstrucciones a ejecutar\n\n&lt;/script&gt;\n</code></pre> <p>...aunque lo habitual es crear archivos <code>.js</code> con el texto de los scripts, y dejarlos en una carpeta habilitada para ello:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u251c\u2500 index.md\n\u2502  \u251c\u2500 pagina2.md\n\u2502  \u251c\u2500 pagina3.md\n\u2502  \u2502\n\u2502  \u2514\u2500 javascripts/\n\u2502     \u251c\u2500 scripts1.js\n\u2502     \u2514\u2500 scripts2.js\n\u2502\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>y en el archivo de configuraci\u00f3n tenemos que apuntar a esos archivos mediante el par\u00e1metro <code>extra_javascript:</code>:</p> <pre><code>extra_javascript:\n  - javascripts/scripts1.js\n  - javascripts/scripts2.js\n</code></pre> <p>Algunas de las funciones incorporadas por Material for MkDocs requieren que incorporemos alg\u00fan archivo con scripts. Por ejemplo, ya hemos visto que, para utilizar la extensi\u00f3n Arithmatex y escribir f\u00f3rmulas matem\u00e1ticas, en el archivo de configuraci\u00f3n mkdocs.yml debemos incluir:</p> <pre><code>extra_javascript:\n  - https://unpkg.com/mathjax@3/es5/tex-mml-chtml.js\n  - javascripts/mathjax.js\n</code></pre> <p>incorporando un archivo externo, disponible on-line, y otro propio en la carpeta <code>/docs/javascripts</code>.</p>"},{"location":"402ExtenderTema.html","title":"Extender el Tema","text":"<p>Adem\u00e1s de Hojas de estilo y scripts, Material for Mkdocs aporta una presentaci\u00f3n basada en una colecci\u00f3n de archivos que sirven como plantilla. Esos archivos se pueden copiar a nuestro proyecto, introduciendo modificaciones, que tendr\u00e1n prioridad sobre las plantillas oficiales.</p>"},{"location":"402ExtenderTema.html#plantillas","title":"Plantillas","text":"<p>Encontraremos la estructura de plantillas en la documentaci\u00f3n del tema, y los archivos en:</p> <p>https://github.com/squidfunk/mkdocs-material/tree/master/material/templates.</p> <p>La plantilla gen\u00e9rica es <code>main.html</code>:</p> <pre><code>{#-\n  This file was automatically generated - do not edit\n-#}\n{% extends \"base.html\" %}\n</code></pre> <p>Todo lo delimitado entre llaves <code>{ }</code> ser\u00e1 sustituido por otro texto. El contenido de las llaves son instrucciones de reemplazo que siguen la sintaxis Jinja. Por ejemplo, lo siguiente:</p> <pre><code>{#- texto -#}\n</code></pre> <p>son comentarios, a efectos de documentaci\u00f3n, que ser\u00e1n suprimidos del resultado final. Lo siguiente:</p> <pre><code>{% extends \"base.html\" %}\n</code></pre> <p>indica que se inserte ah\u00ed el texto de otra plantilla.</p>"},{"location":"402ExtenderTema.html#usando-nuestras-propias-plantillas","title":"Usando nuestras propias plantillas","text":"<p>En el directorio ra\u00edz del proyecto, vamos a crear una carpeta donde copiaremos los archivos de plantilla a personalizar</p> <pre><code>theme:\n  name: material\n  custom_dir: tema\n</code></pre> <p>Copiamos alguno de esos archivos, respetando los nombres y estructura de subcarpetas. Por ejemplo:</p> <pre><code>.\n\u251c\u2500 tema/\n\u2502  \u251c\u2500 404.html\n\u2502  \u2514\u2500 partials/\n\u2502     \u2514\u2500 footer.html\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Vamos a modificar la p\u00e1gina de error <code>404.html</code> que se muestra cuando un enlace no es correcto. La original es:</p> <pre><code>{#-\n  This file was automatically generated - do not edit\n-#}\n{% extends \"main.html\" %}\n{% block content %}\n  &lt;h1&gt;404 - Not found&lt;/h1&gt;\n{% endblock %}\n</code></pre> <p>Modificamos el contenido:</p> <pre><code>{% extends \"main.html\" %}\n\n{% block content %}\n\n  &lt;p&gt;vaya, algo ha fallado...&lt;/p&gt; \n  &lt;h1&gt;p\u00e1gina no encontrada&lt;/h1&gt;\n\n{% endblock %}\n</code></pre>"},{"location":"402ExtenderTema.html#partials","title":"Partials","text":"<p>La carpeta <code>/partials</code> no contiene plantillas de documentos completos, sino de partes de un documento. Por ejemplo, si queremos cambiar el pie de p\u00e1gina, copiamos el archivo <code>partials/footer.html</code>:</p> <pre><code>.\n\u251c\u2500 tema/\n\u2502  \u2514\u2500 partials/\n\u2502     \u2514\u2500 footer.html\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Seguidamente, introducir los cambios deseados en el contenido del archivo.</p>"},{"location":"402ExtenderTema.html#bloques","title":"Bloques","text":"<p>El contenido de un archivo puede contener bloques:</p> <pre><code>{% block nombre_del_bloque %}\n\n  ... contenido del bloque\n\n{% endblock %}\n</code></pre> <p>En lugar de sobreescribir una plantilla completa, es posible limitarnos a un bloque. Se respetar\u00e1 el resto de la plantilla.</p> <p>Para ello, crear un archivo <code>main.html</code> en el directorio raiz de la estructura de plantillas:</p> <pre><code>.\n\u251c\u2500 tema/\n\u2502  \u2514\u2500 main.html\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Supongamos que queremos modificar la barra de t\u00edtulo del sitio. Agregar lo siguiente a <code>main.html</code>:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block htmltitle %}\n\n  &lt;title&gt;Texto nuevo&lt;/title&gt;\n\n{% endblock %}\n</code></pre> <p>Este archivo <code>main.html</code> sustituye al est\u00e1ndar, y adem\u00e1s de extender <code>base.html</code>, redefine los bloques que pongamos aqu\u00ed. El bloque original lo encontraremos en <code>base.html</code>:</p> <pre><code>{% block htmltitle %}\n  {% if page.meta and page.meta.title %}\n    &lt;title&gt;{{ page.meta.title }} - {{ config.site_name }}&lt;/title&gt;\n  {% elif page.title and not page.is_homepage %}\n    &lt;title&gt;{{ page.title | striptags }} - {{ config.site_name }}&lt;/title&gt;\n  {% else %}\n    &lt;title&gt;{{ config.site_name }}&lt;/title&gt;\n  {% endif %}\n{% endblock %}\n</code></pre> <p>Si en lugar de sustituir un bloque por otro, lo que queremos es hacer un a\u00f1adido, all\u00ed donde queremos el contenido original poner:</p> <pre><code>{{ super() }}\n</code></pre> <p>Por ejemplo, el archivo <code>base.html</code> tiene lo siguiente:</p> <pre><code>{% block scripts %}\n  &lt;script src=\"{{ 'assets/javascripts/bundle.88dd0f4e.min.js' | url }}\"&gt;&lt;/script&gt;\n  {% for script in config.extra_javascript %}\n    {{ script | script_tag }}\n  {% endfor %}\n{% endblock %}\n</code></pre> <p>En <code>main.html</code> podemos escribir:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block scripts %}\n\n  &lt;!-- poner nuevos scripts aqu\u00ed --&gt;\n\n  {{ super() }}\n\n  &lt;!-- poner m\u00e1s scripts nuevos --&gt;\n\n{% endblock %}\n</code></pre>"},{"location":"403ConfColores.html","title":"Colores","text":"<p>Material for MkDocs aporta una configuraci\u00f3n de colores basada en el tema Material de Google. M\u00e1s all\u00e1 de este est\u00e1ndar, podemos personalizar nuestras p\u00e1ginas web usando otros colores que sean de nuestro agrado.</p>"},{"location":"403ConfColores.html#esquemas-de-color","title":"Esquemas de color","text":"<p>Al conjunto de colores aplicado se le llama \"esquema\". Material for MkDocs incluye de serie dos esquemas de color, uno claro y otro oscuro, llamados <code>default</code> y <code>slate</code> respectivamente. Como su nombre indica, el esquema por defecto es el claro.</p> <p>Si queremos un tema oscuro, podemos establecerlo en <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  name: material\n  palette:\n    scheme: slate\n</code></pre> <p>O si queremos optar por el color claro de forma expl\u00edcita:</p> <pre><code>theme:\n  name: material\n  palette:\n    scheme: default\n</code></pre>"},{"location":"403ConfColores.html#selector-de-paleta","title":"Selector de paleta","text":"<p>Podemos hacer uso a la vez de ambos esquemas mencionados, el claro y el oscuro, mostrando en la cabecera del documento un selector en forma de icono sobre el que se pueda pulsar. Cada icono representa un esquema. En el archivo <code>mkdocs.yml</code> tenemos que escribir algo as\u00ed como:</p> <pre><code>theme:\n  name: material\n  palette: \n\n  - scheme: default\n      toggle:\n        icon: material/toggle-switch-off-outline \n        name: Modo oscuro\n\n  - scheme: slate \n      toggle:\n        icon: material/toggle-switch\n        name: Modo claro\n</code></pre> <p>V\u00e9ase que, en este caso, el par\u00e1metro <code>palette</code> cambia de naturaleza, convirti\u00e9ndose en una lista de dos elementos:</p> <pre><code>theme:\n  palette: \n  - scheme: default\n  - scheme: slate \n</code></pre> <p>Cada esquema lleva asociado un bot\u00f3n selector (toggle) con dos propiedades:</p> <ul> <li><code>name</code> es el texto emergente que se muestra al pasar el rat\u00f3n por el icono</li> <li> <p><code>icon</code> es uno de los proporcionados por Material for MkDocs, como vimos en el cap\u00edtulo dedicado a iconos. Algunos de los m\u00e1s adecuados para este prop\u00f3sito pueden ser:</p> <ul> <li> +  \u2013 <code>material/toggle-switch-off-outline</code> +<code>material/        toggle-switch</code></li> <li> +  \u2013 <code>material/weather-sunny</code> + <code>material/weather-night</code></li> <li> +  \u2013 <code>material/eye-outline</code> + <code>material/eye</code></li> <li> +  \u2013 <code>material/lightbulb-outline</code> + <code>material/lightbulb</code></li> <li> +  \u2013 <code>material/brightness-4</code> + <code>material/brightness-7</code></li> </ul> </li> </ul>"},{"location":"403ConfColores.html#ajustar-la-paleta-al-sistema-de-forma-automatica","title":"Ajustar la paleta al sistema de forma autom\u00e1tica","text":"<p>Podemos ajustar la paleta de colores a la configuraci\u00f3n del ordenador donde se est\u00e1 visualizando la documentaci\u00f3n, indicando el esquema a aplicar a cada caso:</p> <pre><code>theme:\n  name: material\n  palette:\n\n    - media: \"(prefers-color-scheme: light)\" \n      scheme: default\n      toggle:\n        icon: material/toggle-switch-off-outline\n        name: Modo oscuro\n\n    - media: \"(prefers-color-scheme: dark)\" \n      scheme: slate\n      toggle:\n        icon: material/toggle-switch\n        name: Modo claro\n</code></pre> <p>Cuando el usuario entra en el sitio web, se eval\u00faa cada \"media\" y se toma el primer esquema que coincida con el sistema.</p>"},{"location":"403ConfColores.html#color-primario","title":"Color primario","text":"<p>M\u00e1s all\u00e1 de la selecci\u00f3n de un esquema claro u obscuro, podemos cambiar el color de determinados elementos. El denominado color primario es aquel que se usa para la cabecera de la p\u00e1gina web, as\u00ed como elementos tales como los enlaces. Por defecto es \u00a0indigo\u00a0, una especie de azul oscuro intenso. Podemos configurarlo:</p> <pre><code>theme:\n  name: material\n  palette:\n    primary: indigo\n</code></pre> <p>...y cambiarlo por:</p> <ul> <li>\u00a0  primary: red           \u00a0</li> <li>\u00a0  primary: ink           \u00a0</li> <li>\u00a0  primary: purple        \u00a0</li> <li>\u00a0  primary: deep purple   \u00a0</li> <li>\u00a0  primary: indigo        \u00a0</li> <li>\u00a0  primary: blue          \u00a0</li> <li>\u00a0  primary: light blue    \u00a0</li> <li>\u00a0  primary: cyan          \u00a0</li> <li>\u00a0  primary: teal          \u00a0</li> <li>\u00a0  primary: green         \u00a0</li> <li>\u00a0  primary: light green   \u00a0</li> <li>\u00a0  primary: lime          \u00a0</li> <li>\u00a0  primary: yellow        \u00a0</li> <li>\u00a0  primary: amber         \u00a0</li> <li>\u00a0  primary: orange        \u00a0</li> <li>\u00a0  primary: deep orange   \u00a0</li> <li>\u00a0  primary: brown         \u00a0</li> <li>\u00a0  primary: grey          \u00a0</li> <li>\u00a0  primary: blue grey     \u00a0</li> <li>\u00a0  primary: black         \u00a0</li> <li>\u00a0  primary: white         \u00a0</li> </ul>"},{"location":"403ConfColores.html#color-de-resalte","title":"Color de resalte","text":"<p>El Accent Color se usa para resaltar elementos con los que podemos interaccionar, como por ejemplo, al pasar el rat\u00f3n por un enlace.</p> <pre><code>theme:\n  name: material\n  palette:\n    accent: indigo\n</code></pre> <p>Por defecto es <code>indigo</code>. Puede ser:</p> <pre><code>red      pink    purple        deep purple\nindigo   blue    light blue    cyan\nteal     green   light green   lime\nyellow   amber   orange        deep orange\n</code></pre>"},{"location":"403ConfColores.html#colores-personalizados","title":"Colores personalizados","text":"<p>\u00bfQue hacer si ninguno de los colores est\u00e1ndar mencionados coincide con nuestro color corporativo? Material for MkDocs asocia cada color a un nombre identificador, lo que en el mundo de las p\u00e1ginas web se llama \"variables CSS\". Por ejemplo, el color primario se representa internamente mediante la variable <code>md-primary-fg-color</code>. De esta forma, en una hoja de estilos CSS podemos redefinir esa variable, asoci\u00e1ndola a un nombre de color tomado del est\u00e1ndar CSS:</p> <pre><code>--md-primary-fg-color: crimson;\n</code></pre> <p>...o bien, usando c\u00f3digos de color:</p> <pre><code>--md-primary-fg-color: #dc143c;\n</code></pre> <p>Para aquellos que sean ne\u00f3fitos en la sintaxis CSS, diremos que los colores se pueden representar mediante su nombre simb\u00f3lico o su c\u00f3digo de color. Ver referencia de nombres y c\u00f3digos en:</p> <p>https://www.w3.org/wiki/CSS/Properties/color/keywords</p> <p>Vamos a aplicar nuestros colores favoritos modificando las variables de Material for MkDocs. En el archivo de configuraci\u00f3n escribimos:</p> <pre><code>theme:\n  name: material\n  palette:\n    primary: custom\n</code></pre> <p>Seguidamente tenemos que crear una hoja de estilos donde modificar los valores de las variables. Lo indicamos en la configuraci\u00f3n:</p> <pre><code>extra_css:\n  - estilos/mis_estilos.css\n</code></pre> <p>El siguiente paso es crear una carpeta <code>/docs/estilos</code> y poner all\u00ed nuestro archivo <code>mis_estilos.css</code>. Entre otras cosas, en el texto de ese archivo incluimos algo as\u00ed como:</p> <pre><code>:root {\n  --md-primary-fg-color:        #EE0F0F;\n  --md-primary-fg-color--light: #ECB7B7;\n  --md-primary-fg-color--dark:  #90030C;\n}\n</code></pre> <p>V\u00e9ase que aplicamos esta regla CSS a la clase gen\u00e9rica <code>:root</code>, que representa todo el documento. \u00bfComo averiguar los nombres del resto de variables? Podemos tomar como gu\u00eda las definiciones de colores de Material for Mkdocs.</p> <p>\u00bfCual es el c\u00f3digo de cada color? Lo veremos a continuaci\u00f3n.</p>"},{"location":"403ConfColores.html#codigos-de-colores","title":"C\u00f3digos de colores","text":"<p>\u00bfComo es posible que cada color tenga un c\u00f3digo? Para un reci\u00e9n llegado al mundo de las im\u00e1genes digitales, esto puede parecer sorprendente. A fin de cuentas, en la fotograf\u00eda de un paisaje podemos tener millones de tonalidades, lo que aparentemente es dif\u00edcil de catalogar. Pero no debemos olvidar que todo color es una combinaci\u00f3n de otros tres b\u00e1sicos, rojo, verde y azul.</p> <p>Imaginemos que la cantidad de cada color b\u00e1sico va de 0 a 100. Supongamos que queremos obtener un verde azulado  . Tendr\u00edamos:</p> <ul> <li>Rojo: 0</li> <li>Verde: 50, en una escala de 0 a 100</li> <li>Azul: 50, idem</li> </ul> <p>Con lo que el verde azulado se indica como 0, 50, 50.</p> <p>Los valores 0, 0, 0 para los tres colores b\u00e1sicos representan la ausencia de color, es decir, el negro. Por el contrario, los valores 100, 100, 100 representar\u00edan el blanco. La siguiente combinaci\u00f3n:</p> <ul> <li>Rojo: 0</li> <li>Verde: 100, en una escala de 0 a 100</li> <li>Azul: 100, idem</li> </ul> <p>Representar\u00eda un verde azulado m\u00e1s luminoso, un color conocido como cian  .</p> <p>\u00bfCuantos colores podemos representar con este sistema? En principio podemos lograr 100 x 100 x 100 combinaciones de colores diferentes, es decir, un mill\u00f3n. Pero en el mundo de los fotograf\u00eda digital, la cantidad de cada color b\u00e1sico se mide tomando valores de 0 a 255, lo que nos proporciona 16.777.216 millones de combinaciones, suficiente para el ojo humano, que seg\u00fan los estudios realizados, no llega a distinguir tantas tonalidades.</p> <p>Por lo tanto:</p> <ul> <li>255, 0, 0 representa un rojo puro  </li> <li>0, 255, 0 representa el verde puro  </li> <li>0, 0, 255 representa el azul  </li> <li>0, 0, 0 representa el negro  </li> <li>255, 255, 255, es el blanco</li> </ul>"},{"location":"403ConfColores.html#representacion-hexadecimal","title":"Representaci\u00f3n hexadecimal","text":"<p>En el mundo de la inform\u00e1tica, es costumbre representar los valores num\u00e9ricos en sistema de numeraci\u00f3n hexadecimal, en lugar del decimal, al que estamos habituados. En este cuaderno no vamos a hacer una introducci\u00f3n a los sistemas de numeraci\u00f3n. Basta con saber que en hexadecimal se cuenta de diecis\u00e9is en diecis\u00e9is, y se utilizan los siguientes s\u00edmbolos:</p> <pre><code>0 1 2 3 4 5 6 7 8 9 A B C D E F\n</code></pre> <p>Veamos una simple calculadora hexadecimal. Introduzca en la casilla superior un valor en sistema decimal o hexadecimal. Pulsando en alguno de los dos botones, se hace la conversi\u00f3n deseada y se muestra el resultado.</p> <p> Introduzca valor:                 </p> <p> </p> <p> Resultado:                </p> <p>Usando el sistema hexadecimal, en lugar de usar un rango de valores de 0 a 255, los colores b\u00e1sicos van de 0 a FF, con lo cual:</p> <ul> <li>FF, 0, 0 es el rojo  </li> <li>0, FF, 0 es el verde  </li> <li>0, 0, FF es el azul  </li> <li>0, 0, 0 es el negro  </li> <li>FF, FF, FF es el blanco</li> </ul>"},{"location":"403ConfColores.html#representando-colores","title":"Representando colores","text":"<p>Los c\u00f3digos hexadecimales se pueden escribir en may\u00fasculas o min\u00fasculas, y en las hojas de estilo van precedidos por un s\u00edmbolo <code>#</code>. Para indicar un color se usan seis d\u00edgitos, los dos primeros para la cantidad de rojo, de 00 a FF, los dos siguientes para el verde, y los dos \u00faltimos para el azul. Por ejemplo, si queremos los p\u00e1rrafos de cabecera en rojo:</p> <pre><code>h1 {\n  color: #ff0000;\n}\n</code></pre> <p>Veamos varios ejemplos de colores:</p> Color C\u00f3digo rojo <code>#FF0000</code> verde <code>#00FF00</code> azul <code>#0000FF</code> amarillo <code>#FFFF00</code> cian <code>#00FFFF</code> fucsia <code>#FF00FF</code> negro <code>#000000</code> gris <code>#808080</code> gris claro <code>#C0C0C0</code> blanco <code>#FFFFFF</code> marr\u00f3n <code>#800000</code> verde oscuro <code>#008000</code> azul oscuro <code>#000080</code> dorado <code>#808000</code> p\u00farpura <code>#800080</code> verde azulado <code>#008080</code> <p>Veamos una sencilla calculadora de c\u00f3digos de color:</p> <p> Pulse en el bot\u00f3n para seleccionar un color: C\u00f3digo de color seleccionado:        #000000       Rojo: #000000       Verde: #000000       Azul: #000000 </p> <p>Esta codificaci\u00f3n se denomina RGB, abreviatura de los tres colores b\u00e1sicos, red, green y blue. Como alternativa, se pueden usar otras codificaciones, como es el caso de HSL, que tambi\u00e9n utiliza tres c\u00f3digos para cada color, indicando los valores de Matiz, Saturaci\u00f3n y Luminosidad. V\u00e9ase art\u00edculo en la Wikipedia. </p> <p>Dado que este cuaderno no es un tutorial de CSS, no profundizaremos en ello.</p>"},{"location":"403ConfColores.html#colores-de-elementos","title":"Colores de elementos","text":"<p>M\u00e1s all\u00e1 de los esquemas, y de la configuraci\u00f3n de variables que representan colores, podemos asignar manualmente el color de un elemento o un grupo de elementos. Por ejemplo, si queremos un p\u00e1rrafo en color rojo, podemos escribir:</p> <pre><code>Texto en color rojo\n{: style=\"color:red;\"}\n</code></pre> <p>Recu\u00e9rdese que, para aplicar reglas de estilo a un p\u00e1rrafo en formato markdown, tenemos que activar la extensi\u00f3n      attr_list.</p> <p>Tambi\u00e9n podemos usar reglas de estilo en archivos de hojas de estilos:</p> <ul> <li> <p>Para cambiar el color de los p\u00e1rrafos de cabeceras:</p> <pre><code>.md-typeset h1 {color: SteelBlue; }\n\n.md-typeset h2 {color: CadetBlue; }\n\n.md-typeset h3 {color: CadetBlue; }\n</code></pre> </li> <li> <p>Para cambiar el color de texto y color de fondo en las cabeceras de tablas:</p> <pre><code>.md-typeset__table thead { color: white;\n                           background-color: #5382B0;}\n</code></pre> </li> </ul> <p>Vemos que Material for MkDocs define una clase <code>md-typeset</code> a la que pertenecen los textos del documento.</p> <p>\u00a1Cuidado! El uso de reglas CSS muy personalizadas puede entrar en conflicto con los esquemas generados por Material for MkDocs. Adem\u00e1s, no tenemos garant\u00eda de que nuestro dise\u00f1o sea compatible con futuras versiones del software. El \"tuneado\" de colores se debe hace de manera muy sobria, y asumiendo los posibles riesgos.</p>"},{"location":"404ConfFuentes.html","title":"Fuentes","text":"<p>Material for MkDocs se integra con Google Fonts, y puede ser f\u00e1cilmente configurado.</p>"},{"location":"404ConfFuentes.html#fuente-regular","title":"Fuente regular","text":"<p>Por defecto se usa Roboto, con una tipograf\u00eda de 300, 400, 400i y 700. V\u00e9ase tipograf\u00edas de esta fuente.</p> <p>Podemos usar cualquier fuente Google configur\u00e1ndolo en <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  font:\n    text: Roboto\n</code></pre>"},{"location":"404ConfFuentes.html#fuente-monoespaciada","title":"Fuente monoespaciada","text":"<p>Para los p\u00e1rrafos preformateados  se usa una fuente monoespaciada, es decir, todos los caracteres tienen la misma anchura. Por defecto se usa Roboto Mono, con una tipograf\u00eda de 400. Como sucede con el texto regular, podemos establecer otra fuente:</p> <pre><code>theme:\n  font:\n    code: Roboto Mono\n</code></pre>"},{"location":"404ConfFuentes.html#autoloading","title":"Autoloading\u00b6","text":"<p>Quiz\u00e1s queramos evitar que las tipograf\u00edas se carguen de Google Fonts, por ejemplo, por motivos de privacidad, y usar las fuentes del sistema. En ese caso a\u00f1adir lo siguiente a <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  font: false\n</code></pre>"},{"location":"405ConfIdioma.html","title":"Idioma","text":"<p>Material for Mkdocs genera una colecci\u00f3n de elementos a\u00f1adidos al texto de nuestros documentos, barra de navegaci\u00f3n, caja de b\u00fasqueda, etc. Por defecto todos estos componentes se crean en ingl\u00e9s, pero podemos configurar el proceso para que se adapte a otros idiomas.</p>"},{"location":"405ConfIdioma.html#seleccionar-idioma","title":"Seleccionar idioma","text":"<p>Para adaptar el proceso al idioma espa\u00f1ol, en el archivo de configuraci\u00f3n <code>mkdocs.yml</code> escribimos:</p> <pre><code>theme:\n  language: es\n</code></pre> <p>se utilizar\u00e1 el siguiente archivo, que contiene los textos traducidos:</p> <p>https://github.com/squidfunk/mkdocs-material/blob/master/src/templates/partials/languages/es.html</p>"},{"location":"405ConfIdioma.html#personalizar-textos","title":"Personalizar textos","text":"<p>Para poner nuestros propios textos, en lugar del archivo <code>es.html</code> mencionado, tenemos que crear uno propio. Podemos replicar en nuestro ordenador los archivos utilizados por Material for MkDocs, siempre que respetemos los nombres de archivo y estructura de directorios.</p> <p>Comenzamos por crear una carpeta <code>/tema</code> en el directorio ra\u00edz de nuestro proyecto (el que tiene el archivo <code>mkdocs.yml</code>). Seguidamente creamos la subcarpeta <code>tema/partials/languages/</code>. Copiamos el archivo <code>es.html</code> mencionado, y lo guardamos como <code>tema/partials/languages/custom.html</code>.</p> <p>En el archivo de configuraci\u00f3n <code>mkdocs.yml</code> escribimos:</p> <pre><code>theme:\n  language: custom\n  custom_dir: tema\n</code></pre> <p>El texto de ese archivo puede ser algo as\u00ed como:</p> <pre><code>&lt;!-- Import traducciones para lenguaje y alternativo --&gt;\n{% import \"partials/languages/es.html\" as language %}\n{% import \"partials/languages/en.html\" as fallback %} \n\n&lt;!-- Definir texto personalizado --&gt;\n{% macro override(key) %}{{ {\n\n  \"source.file.date.created\": \"Creado\",\n  \"source.file.date.updated\": \"Actualizado\",\n\n}[key] }}{% endmacro %}\n\n&lt;!-- Re-exportar traducciones --&gt;\n{% macro t(key) %}{{\n  override(key) or language.t(key) or fallback.t(key)\n}}{% endmacro %}\n</code></pre> <p>Lo delimitado entre <code>{% %}</code> son instrucciones para generar el HTML definitivo. Las l\u00edneas:</p> <pre><code>{% import \"partials/languages/es.html\" as language %}\n{% import \"partials/languages/en.html\" as fallback %} \n</code></pre> <p>incorporan los textos est\u00e1ndar, por lo que solo habr\u00e1 que redefinir lo que nos interese. V\u00e9ase como lo hacemos en las l\u00edneas:</p> <pre><code>\"source.file.date.created\": \"Creado\",\n\"source.file.date.updated\": \"Actualizado\",\n</code></pre>"},{"location":"406ConfLogos.html","title":"Logo e iconos","text":"<p>Material for MkDocs se suministra con m\u00e1s de 8000 \u00edconos listos para usarse de dos formas:</p> <ul> <li>para personalizar partes espec\u00edficas del tema</li> <li>para incluirlos como parte del texto Markdown</li> </ul>"},{"location":"406ConfLogos.html#cambiar-el-logo","title":"Cambiar el logo","text":"<p>Por defecto, el logo que aparece en la cabecera es   . Para usar uno de los iconos incluidos, podemos configurarlo de la siguiente forma:</p> <pre><code>theme:\n  icon:\n    logo: material/library \n</code></pre> <p>Lo que mostrar\u00e1  . Si por ejemplo escribimos:</p> <pre><code>theme:\n  icon:\n    logo: octicons/pencil-24 \n</code></pre> <p>Mostrar\u00e1    como logo.</p> <p>Podemos buscar iconos en la documentaci\u00f3n, donde hay una b\u00fasqueda interactiva.</p> <p>Para  usar un fichero de imagen, escribimos:</p> <pre><code>theme:\n  logo: objetos/logo.png\n</code></pre> <p>siendo <code>objetos</code> una carpeta dentro de <code>docs</code>.</p>"},{"location":"406ConfLogos.html#enlace","title":"Enlace","text":"<p>Al pulsar en el logo de cabecera, t\u00edpicamente enlazamos con la p\u00e1gina principal del proyecto. Podemos especificar otra url si en <code>mkdocs.yml</code> incluimos:</p> <pre><code>extra:\n  homepage: https://ejemplo.com\n</code></pre>"},{"location":"406ConfLogos.html#favicon","title":"Favicon","text":"<p>El favicon es el icono que aparece en la pesta\u00f1a del navegador. Podemos usar un fichero de imagen dentro de una carpeta en el directorio <code>docs</code>:</p> <pre><code>theme:\n  favicon: objetos/favicon.png\n</code></pre>"},{"location":"406ConfLogos.html#resto-de-iconos-del-sitio","title":"Resto de iconos del sitio","text":"<p>Los iconos de navegaci\u00f3n, b\u00fasqueda, etc, pueden cambiarse por otros. Por ejemplo, las flechas p\u00e1gina siguiente/anterior que aparecen al pie de p\u00e1gina:</p> <pre><code>theme:\n  icon:\n    previous: fontawesome/solid/angle-left\n    next: fontawesome/solid/angle-right\n</code></pre> <p>Los siguientes est\u00e1n disponibles:</p> Icono Prop\u00f3sito logo Logo de la cabecera menu Abre el men\u00fa alternate Cambiar idioma search Abrir b\u00fasqueda share Compartir close Descartar b\u00fasqueda top Inicio del documento edit Editar p\u00e1gina view Ver texto fuente repo Repositorio admonition Iconos de notas. Ver extensi\u00f3n Admonition tag Ver extensi\u00f3n Tags previous P\u00e1gina anterior next Siguiente p\u00e1gina"},{"location":"407ConfNavegacion.html","title":"Navegaci\u00f3n","text":"<p>Material for MkDocs aporta unos mecanismos de navegaci\u00f3n que permiten desplazarse entre p\u00e1ginas y apartados. El \u00edndice lateral, la tabla de contenidos, los botones p\u00e1gina siguiente y anterior, y otra serie de elementos, nos aportan funcionalidad, y adem\u00e1s, son configurables.</p>"},{"location":"407ConfNavegacion.html#ocultar-barras-laterales","title":"Ocultar barras laterales","text":"<p>Por defecto se muestran dos paneles, un \u00edndice de p\u00e1ginas a la izquierda y una tabla de contenido a la derecha, con la lista de apartados del documento actual. Se pueden ocultar indic\u00e1ndolo en el front matter.</p> <p>\u00bfQue es el front matter? Es un fragmento de texto, en la cabecera de cada documento, que permite a\u00f1adir par\u00e1metros de configuraci\u00f3n espec\u00edficos para esa p\u00e1gina. Se delimita entre dos l\u00edneas formadas por tres guiones:</p> <pre><code>---\n\nparametro1 : valor1\nparametro2 : valor2\n\n---\n\nTexto markdown del documento\n</code></pre> <p>Podemos usar el front matter para ocultar el \u00edndice de navegaci\u00f3n de p\u00e1ginas, la tabla de contenido (toc) o ambas:</p> <pre><code>---\nhide:\n  - navigation\n  - toc\n---\n</code></pre> <p>\u00bfQue utilidad tiene? Resulta \u00fatil, por ejemplo, para una primera p\u00e1gina de portada.</p>"},{"location":"407ConfNavegacion.html#niveles","title":"Niveles","text":"<p>En el archivo de configuraci\u00f3n <code>mkdocs.yml</code> tendremos una secci\u00f3n <code>nav</code> con la lista de p\u00e1ginas que aparecen en el \u00edndice lateral:</p> <pre><code>nav:\n  - Introducci\u00f3n: index.md\n  - P\u00e1gina 1: pagina01.md\n  - P\u00e1gina 2: pagina02.md\n  - P\u00e1gina 3: pagina03.md\n  - P\u00e1gina 4: pagina04.md\n  - P\u00e1gina 5: pagina05.md\n</code></pre> <p>Podemos agrupar las p\u00e1ginas en secciones y subsecciones:</p> <pre><code>nav:\n  - Introducci\u00f3n: index.md\n  - Secci\u00f3n 1:\n    - P\u00e1gina 1.1: pagina0101.md\n    - P\u00e1gina 1.2: pagina0102.md\n    - Secci\u00f3n 1.3:\n      - P\u00e1gina 1.3.1: pagina010301.md\n      - P\u00e1gina 1.3.2: pagina010302.md\n  - Secci\u00f3n 2:\n    - P\u00e1gina 2.1: pagina0201.md\n    - P\u00e1gina 2.2: pagina0202.md\n  - P\u00e1gina 3: pagina05.md\n</code></pre> <p>De esta forma, las entradas que representan un documento se escriben en formato:</p> <pre><code>texto: documento.md\n</code></pre> <p>mientras que las entradas que representan una secci\u00f3n:</p> <pre><code>texto seccion:\n  - texto: documento1.md\n  - texto: documento2.md\n</code></pre> <p>... y las entradas de una secci\u00f3n pueden ser, a su vez, subsecciones.</p>"},{"location":"407ConfNavegacion.html#pestanas","title":"Pesta\u00f1as","text":"<p>Podemos hacer que las entradas del nivel 1 se muestren como pesta\u00f1as (tabs) en la barra superior, pero solo tendr\u00e1 efecto si la ventana del navegador es mayor que 1220 pixels (puntos de color). No funcionar\u00e1 en dispositivos m\u00f3viles. Activar esta caracter\u00edstica con:</p> <pre><code>theme:\n  features:\n    - navigation.tabs\n</code></pre>"},{"location":"407ConfNavegacion.html#fijar-pestanas","title":"Fijar pesta\u00f1as","text":"<p>Cuando la p\u00e1gina se desplaza hacia abajo, las pesta\u00f1as desaparecen de la vista. Podemos hacer que sigan visibles con:</p> <pre><code>theme:\n  features:\n    - navigation.tabs\n    - navigation.tabs.sticky\n</code></pre>"},{"location":"407ConfNavegacion.html#secciones-como-grupos","title":"Secciones como grupos","text":"<p>Por defecto, las secciones muestran su contenido con un sangrado por cada nivel:</p>  Introducci\u00f3n Apartado 1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0P\u00e1gina 1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0P\u00e1gina 2 Apartado 2 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0P\u00e1gina 3 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0P\u00e1gina 4 P\u00e1gina 5  <p>Podemos hacer que las secciones de primer nivel se muestren con el mismos sangrado que su contenido, con un resalte que las identifica como cabeceras:</p>  Introducci\u00f3n Apartado 1 P\u00e1gina 1 P\u00e1gina 2 Apartado 2 P\u00e1gina 3 P\u00e1gina 4 P\u00e1gina 5  <p>Para ello, incluimos en <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - navigation.sections\n</code></pre>"},{"location":"407ConfNavegacion.html#expansion","title":"Expansion","text":"<p>Por defecto, las secciones se muestran contra\u00eddas, acompa\u00f1adas de un icono <code>&gt;</code> que permite desplegar su contenido. Podemos mostrar las secciones expandidas autom\u00e1ticamente mediante:</p> <pre><code>theme:\n  features:\n    - navigation.expand\n</code></pre>"},{"location":"407ConfNavegacion.html#podado","title":"Podado","text":"<p>Podemos hacer que solo los elementos de navegaci\u00f3n visibles sean incluidos en el \u00edndice HTML, reduciendo el tama\u00f1o de la p\u00e1gina web considerablemente. Las secciones no ser\u00e1n expandibles, y en su lugar, se sustituir\u00e1n por enlaces a la primera  p\u00e1gina de la secci\u00f3n en cuesti\u00f3n.</p> <p>Esta caracter\u00edstica se activa con:</p> <pre><code>theme:\n  features:\n    - navigation.prune \n</code></pre> <p>y resulta incompatible con:</p> <pre><code>navigation.expand\n</code></pre>"},{"location":"407ConfNavegacion.html#paginas-indice-de-cada-seccion","title":"P\u00e1ginas \u00edndice de cada secci\u00f3n","text":"<p>En principio, al pulsar sobre el nombre de una secci\u00f3n, se despliega su lista de documentos, pero hay que pulsar sobre el primero de ellos para navegar hacia el mismo. Podemos hacer que un t\u00edtulo de secci\u00f3n se convierta en enlace a un documento introductorio de la secci\u00f3n. Tenemos que activar:</p> <pre><code>theme:\n  features:\n    - navigation.indexes \n</code></pre> <p>Para ligar un enlace de p\u00e1gina a una secci\u00f3n, tenemos que:</p> <ul> <li>agrupar los documentos en una carpeta de secci\u00f3n</li> <li>crear un documento introductorio llamado <code>index.md</code> en esa carpeta:</li> <li> <p>incorporar el documento en la lista de navegaci\u00f3n, sin especificar t\u00edtulo, ya que se mostrar\u00e1 como tal el texto de la secci\u00f3n:</p> <pre><code>nav:\n  - Texto seccion:\n    - seccion/index.md \n    - P\u00e1gina 1: seccion/pagina-1.md\n    ...\n    - P\u00e1gina n: seccion/pagina-n.md\n</code></pre> </li> </ul> <p>esto muestra:</p>  Texto seccion \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0P\u00e1gina 1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0P\u00e1gina 2 <p>Y al pulsar sobre el t\u00edtulo de la secci\u00f3n, no solo se despliega la lista de documentos, sino que se visualiza el documento <code>/docs/seccion/index.md</code></p>"},{"location":"407ConfNavegacion.html#seguir-tabla-de-contenido","title":"Seguir tabla de contenido","text":"<p>La tabla de contenido de la derecha se desplaza con la p\u00e1gina. Si queremos que se desplace para que el enlace al apartado actual este siempre visible, configurar lo siguiente:</p> <pre><code>theme:\n  features:\n    - toc.follow\n</code></pre>"},{"location":"407ConfNavegacion.html#integrar-tabla-de-contenido","title":"Integrar tabla de contenido","text":"<p>Para integrar la tabla de contenido en el \u00edndice lateral izquierdo, configurar:</p> <pre><code>theme:\n  features:\n    - toc.integrate \n</code></pre> <p>La tabla de contenido desaparecer\u00e1 de la derecha, quedando m\u00e1s espacio para el texto del documento.</p>"},{"location":"407ConfNavegacion.html#boton-back-to-top","title":"Bot\u00f3n Back to top","text":"<p>Si desplazamos la p\u00e1gina hacia abajo y de nuevo hacia arriba, se mostrar\u00e1 un bot\u00f3n back-to-top en el centro, bajo la barra de cabecera:</p> <pre><code>theme:\n  features:\n    - navigation.top\n</code></pre> <p>Pulsando en ese bot\u00f3n, la p\u00e1gina se desplazar\u00e1 completamente hasta llegar al inicio del documento.</p>"},{"location":"407ConfNavegacion.html#carga-instantanea","title":"Carga instant\u00e1nea","text":"<p>Con esta caracter\u00edstica activada, las pulsaciones en enlaces a apartados internos no requieren recargar la p\u00e1gina. Para lograrlo, a\u00f1adir a mkdocs.yml:</p> <pre><code>theme:\n  features:\n    - navigation.instant\n</code></pre> <p>Material for MkDocs ahora se comporta como una aplicaci\u00f3n de una sola p\u00e1gina. N\u00f3tese que debemos configurar <code>site_url</code> para que esto funcione correctamente:</p> <pre><code>site_url: https://ejemplo.com\n</code></pre>"},{"location":"407ConfNavegacion.html#barra-de-progreso","title":"Barra de progreso","text":"<p>En conexiones lentas, la carga instant\u00e1nea puede llevar su tiempo. Podemos visualizar una barra de progreso al cargar la p\u00e1gina. Activarla con:</p> <pre><code>theme:\n  features:\n    - navigation.instant\n    - navigation.instant.progres\n</code></pre> <p>Se visualiza solo tras 400ms, por lo que las conexiones r\u00e1pidas no la visualizar\u00e1n.</p>"},{"location":"407ConfNavegacion.html#anchor-tracking","title":"Anchor tracking","text":"<p>Esta opci\u00f3n hace que la URL en la barra de direcci\u00f3n del navegador se actualice continuamente, sustituyendo el enlace a la p\u00e1gina por el enlace al apartado resaltado en la tabla de contenido:</p> <pre><code>theme:\n  features:\n    - navigation.tracking\n</code></pre>"},{"location":"407ConfNavegacion.html#teclas-de-atajo","title":"Teclas de atajo","text":"<p>Material for MkDocs proporciona pulsaciones de teclas para navegar por la documentaci\u00f3n. Hay dos modos de trabajo:</p> <ul> <li> <p>Modo b\u00fasqueda, activo cuando estamos examinando una lista de resultados. Ah\u00ed tenemos:</p> <p>++Down++ , ++Up++ : resultado siguiente / anterior ++Esc++ , ++Tab++ : cierra di\u00e1logo ++Enter++ : ir a resultado</p> </li> <li> <p>Modo global, activo cuando no estamos en modo b\u00fasqueda ni tenemos un elemento con foco y pendiente de entrada de usuario:</p> </li> <li> <p>++F++ , ++S++ , ++/++ : abre di\u00e1logo de b\u00fasqueda</p> </li> <li>++P++ , ++,++ : p\u00e1gina anterior</li> <li>++N++ , ++.++ : siguiente p\u00e1gina</li> </ul> <p>Supongamos que queremos asociar una acci\u00f3n a la tecla X. Podemos crear nuestros propios scripts relacionados con esa pulsaci\u00f3n. En <code>mkdocs.yml</code> escribimos:</p> <pre><code>extra_javascript:\n    - javascripts/atajos.js\n</code></pre> <p>y creamos un archivo <code>docs/javascripts/atajos.js</code></p> <pre><code>keyboard$.subscribe(function(key) {\n  if (key.mode === \"global\" &amp;&amp; key.type === \"x\") {\n\n    ... instrucciones a ejecutar ...\n\n    key.claim() \n  }\n})\n</code></pre>"},{"location":"407ConfNavegacion.html#ancho-del-area-de-contenido","title":"Ancho del \u00e1rea de contenido","text":"<p>El ancho del contenido de la p\u00e1gina se establece de modo que la longitud de cada l\u00ednea no exceda de los 80-100 caracteres, dependiendo del ancho de los caracteres. Si bien este es un valor predeterminado razonable, ya que las l\u00edneas m\u00e1s largas tienden a ser m\u00e1s dif\u00edciles de leer, puede ser conveniente modificarlo. Esto se puede lograr f\u00e1cilmente con una hoja de estilo adicional y unas pocas l\u00edneas de CSS:</p> <ul> <li> <p>en el archivo <code>docs/estilos/mis_estilos.css</code> incluimos algo as\u00ed como:</p> <pre><code>.md-grid {\n  max-width: 1440px; \n}\n</code></pre> </li> <li> <p>y en el archivo <code>mkdocs.yml</code>:</p> <pre><code>extra_css:\n  - estilos/mis_estilos.css\n</code></pre> </li> </ul>"},{"location":"408ConfBusquedas.html","title":"B\u00fasquedas","text":"<p>Material for MkDocs proporciona un funci\u00f3n de b\u00fasqueda de texto en la barra de cabecera cuando nuestro proyecto est\u00e1 formado por m\u00e1s de un documento:</p> <p></p> <p>Introduciendo un texto en la caja de b\u00fasqueda, se muestra una lista desplegable de resultados, y pulsando sobre uno de ellos, se navega hacia la p\u00e1gina correspondiente.</p>"},{"location":"408ConfBusquedas.html#busqueda-integrada","title":"B\u00fasqueda integrada","text":"<p>Material for MkDocs implementa las b\u00fasquedas mediante un complemento que se integra por defecto, sin que tengamos que hacer nada. Sin embargo, debe volver a agregarse a <code>mkdocs.yml</code> cuando se utilizan otros complementos:</p> <pre><code>plugins:\n  - search\n</code></pre> <p>Incluye b\u00fasqueda multiling\u00fce utilizando dos piezas de software, lunr y lunr-languages.</p>"},{"location":"408ConfBusquedas.html#funcionamiento","title":"Funcionamiento","text":"<p>El complemento de b\u00fasqueda analiza el texto HTML generado y crea un \u00edndice de palabras para todas las p\u00e1ginas y secciones. En las visitas a la p\u00e1gina web, este \u00edndice se descarga junto al texto de la p\u00e1gina web.</p>"},{"location":"408ConfBusquedas.html#configuracion","title":"Configuraci\u00f3n","text":"<p>Cuando estamos desarrollando un proyecto, quiz\u00e1s queramos desactivar este complemento para agilizar el trabajo:</p> <pre><code>plugins:\n  - search:\n      enabled: false\n</code></pre>"},{"location":"408ConfBusquedas.html#idioma","title":"Idioma","text":"<p>Los algoritmos de b\u00fasqueda est\u00e1n optimizados para el idioma especificado en la configuraci\u00f3n del proyecto. Pero podemos establecer el idioma expl\u00edcitamente:</p> <pre><code>plugins:\n  - search:\n      lang: es\n</code></pre> <p>... o incluso indicar varias lenguas:</p> <pre><code>plugins:\n  - search:\n      lang: \n      - es\n      - en\n</code></pre>"},{"location":"408ConfBusquedas.html#autocompletado","title":"Autocompletado","text":"<p>Cuando introducimos un texto de b\u00fasqueda, podemos activar la funci\u00f3n de sugerencia de texto, que ser\u00e1 aceptado pulsando la tecla Right</p> <pre><code>theme:\n  features:\n    - search.suggest\n</code></pre>"},{"location":"408ConfBusquedas.html#resaltado","title":"Resaltado","text":"<p>Cuando el usuario pulsa sobre uno de los resultados de b\u00fasqueda, se ir\u00e1 a la p\u00e1gina correspondiente. Podemos hacer que los textos coincidentes se muestren resaltados activando lo siguiente:</p> <pre><code>theme:\n  features:\n    - search.highlight\n</code></pre>"},{"location":"408ConfBusquedas.html#compartir-resultados","title":"Compartir resultados","text":"<p>Cuando se activa la compartir b\u00fasqueda, se muestra un bot\u00f3n de compartir   junto al bot\u00f3n de cierre X de la caja de b\u00fasqueda, lo que permite copiar al portapapeles un enlace a la consulta de b\u00fasqueda actual y al resultado. Agregue las siguientes l\u00edneas a mkdocs.yml:</p> <pre><code>theme:\n  features:\n    - search.share\n</code></pre>"},{"location":"408ConfBusquedas.html#relevancia","title":"Relevancia","text":"<p>En el front matter de una p\u00e1gina podemos establecer su relevancia en la lista de resultados:</p> <pre><code>---\nsearch:\n  boost: 2 \n---\n\ntexto de la p\u00e1gina\n</code></pre> <p>Un valor por encima de 1 incrementa la relevancia, y uno inferior, la disminuye:</p> <pre><code>---\nsearch:\n  boost: 0.5\n---\n</code></pre> <p>Podemos excluir determinadas p\u00e1ginas de la b\u00fasqueda:</p> <pre><code>---\nsearch:\n  exclude: true\n---\n\ntexto de la p\u00e1gina\n</code></pre>"},{"location":"408ConfBusquedas.html#excluir-secciones-y-bloques","title":"Excluir secciones y bloques","text":"<p>Si activamos el complemento attr_list:</p> <pre><code>markdown_extensions:\n  - attr_list\n</code></pre> <p>Podemos excluir secciones a\u00f1adiendo tras la cabecera un atributo especial incorporado por Material for MkDocs, <code>data-search-exclude</code>.</p> <pre><code># T\u00edtulo\n\n## Secci\u00f3n 1\n\nContenido incluido\n\n## Secci\u00f3n 2 { data-search-exclude }\n\nContenido exclu\u00eddo\n</code></pre> <p>Tambi\u00e9n podemos excluir un bloque:</p> <pre><code># T\u00edtulo\n\nContenido incluido\n\nContenido excluido\n{ data-search-exclude }\n</code></pre>"},{"location":"409ConfCabeceraPie.html","title":"Cabecera y Pie","text":"<p>Las p\u00e1ginas generadas por Material for MkDocs muestran una barra superior de cabecera, con el t\u00edtulo de la p\u00e1gina, la caja de b\u00fasqueda e iconos varios, y una barra inferior. Tenemos algunas opciones de personalizaci\u00f3n de estos elementos.</p>"},{"location":"409ConfCabeceraPie.html#ocultar-cabecera","title":"Ocultar cabecera","text":"<p>Podemos hacer que el encabezado se oculta autom\u00e1ticamente cuando el usuario se desplaza m\u00e1s all\u00e1 de un cierto umbral, dejando m\u00e1s espacio para el contenido. Activar a\u00f1adiendo las siguientes l\u00edneas a <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - header.autohide\n</code></pre>"},{"location":"409ConfCabeceraPie.html#barra-de-anuncios","title":"Barra de anuncios","text":"<p>Material for MkDocs incluye una barra de anuncios sobre la de cabecera, donde podemos poner informaci\u00f3n sobre novedades o informaci\u00f3n importante para el usuario. Al desplegar la p\u00e1gina, desaparecer\u00e1. </p> <p>Para a\u00f1adir una barra de anuncios, tenemos que extender el tema, y en el archivo <code>main.html</code> incluir un bloque <code>announce</code>:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block announce %}\n\n    ... incluir aqu\u00ed lo que deseamos mostrar ...\n\n{% endblock %}\n</code></pre> <p>Podemos incluir en la barra un bot\u00f3n de cierre para hacer que los anuncios se identifiquen como \"leidos\". A\u00f1adir a <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - announce.dismiss\n</code></pre> <p>Al pulsar sobre el bot\u00f3n, los anuncios no se vuelven a mostrar a menos que sean modificados.</p>"},{"location":"409ConfCabeceraPie.html#botones-de-navegacion","title":"Botones de navegaci\u00f3n","text":"<p>El pie de p\u00e1gina puede incluir dos enlaces a la p\u00e1gina siguiente o anterior. Tenemos que activarlo con:</p> <pre><code>theme:\n  features:\n    - navigation.footer\n</code></pre>"},{"location":"409ConfCabeceraPie.html#ocultar-barra-de-botones","title":"Ocultar barra de botones","text":"<p>Podemos ocultar la barra de botones siguiente/anterior en determinadas p\u00e1ginas. En el front matter poner lo siguiente:</p> <pre><code>---\nhide:\n  - footer\n---\n</code></pre>"},{"location":"409ConfCabeceraPie.html#enlaces-a-redes-sociales","title":"Enlaces a redes sociales","text":"<p>Junto al copyright que aparece en el pie de p\u00e1gina, podemos poner enlaces a redes sociales. A\u00f1adir una lista a <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/squidfunk\n    - icon: fontawesome/brands/docker\n      link: https://hub.docker.com/r/squidfunk/mkdocs-material/\n    - icon: fontawesome/brands/python\n      link: https://pypi.org/project/mkdocs-material/\n    - icon: fontawesome/brands/bluesky\n      link: https://bsky.app/profile/squidfunk.bsky.social\n    - icon: fontawesome/brands/mastodon\n      link: https://fosstodon.org/@squidfunk\n    - icon: fontawesome/brands/x-twitter\n      link: https://x.com/squidfunk\n</code></pre> <p>La propiedad <code>icon</code> debe ser uno de los iconos suministrados con el tema. Algunos ejemplos:</p> <ul> <li> fontawesome/brands/github</li> <li> fontawesome/brands/gitlab</li> <li> fontawesome/brands/x-twitter</li> <li> fontawesome/brands/docker</li> <li> fontawesome/brands/facebook</li> <li> fontawesome/brands/instagram</li> <li> fontawesome/brands/linkedin</li> <li> fontawesome/brands/slack</li> <li> fontawesome/brands/discord</li> </ul> <p>La propiedad <code>link</code> es el enlace al que se acude tras pulsar en el icono. Puede ser una direcci\u00f3n de correo:</p> <pre><code>extra:\n  social:\n    - icon: fontawesome/solid/paper-plane\n      link: mailto:&lt;email-address&gt;\n</code></pre> <p>Podemos a\u00f1adir un nombre a mostrar:</p> <pre><code>extra:\n  social:\n    - icon: fontawesome/brands/mastodon\n      link: https://fosstodon.org/@squidfunk\n      name: squidfunk on Fosstodon\n</code></pre>"},{"location":"409ConfCabeceraPie.html#copyright","title":"Copyright","text":"<p>Podemos incluir un texto de copyright como parte del pie de p\u00e1gina. Incluir en <code>mkdocs.yml</code></p> <pre><code>copyright: Copyright &amp;copy; 2016 - 2020 Nombre del autor\n</code></pre> <p>Por defecto, el pie de p\u00e1gina muestra un texto \"Made with Material for MkDocs\" que podemos ocultar con:</p> <pre><code>extra:\n  generator: false\n</code></pre> <p>Considerando que Made with Material for MkDocs es un software Open Source que se distribuye para ser utilizado de forma gratuita, parece l\u00f3gico pensar que la eliminaci\u00f3n de este peque\u00f1o texto no ayuda mucho a la continuidad del proyecto...</p>"},{"location":"410ConfRepositorio.html","title":"Enlace a repositorio","text":"<p>Podemos mostrar en la cabecera de nuestra documentaci\u00f3n un enlace al repositorio GitHub, incluyendo informaci\u00f3n sobre estrellas y forks, fecha de actualizaci\u00f3n, y contribuidores.</p>"},{"location":"410ConfRepositorio.html#repositorio","title":"Repositorio","text":"<p>Para mostrar el enlace al repositorio, en <code>mkdocs.yml</code> a\u00f1adimos la URL. Por ejemplo:</p> <pre><code>repo_url: https://github.com/squidfunk/mkdocs-material\n</code></pre> <p>En repositorio como GitHub or GitLab, se mostrar\u00e1 el n\u00famero de versi\u00f3n, estrellas y forks de forma autom\u00e1tica.</p>"},{"location":"410ConfRepositorio.html#nombre-del-repositorio","title":"Nombre del repositorio","text":"<p>El nombre que aparece en el enlace es deducido autom\u00e1ticamente en el caso de GitHub, GitLab o Bitbucket. Podemos configurarlo manualmente con:</p> <pre><code>repo_name: squidfunk/mkdocs-material\n</code></pre>"},{"location":"410ConfRepositorio.html#icono","title":"Icono","text":"<p>Podemos sustituir el icono por defecto por otro:</p> <pre><code>theme:\n  icon:\n    repo: fontawesome/brands/git-alt \n</code></pre> <p>Algunas posibilidades:</p> <ul> <li> fontawesome/brands/git</li> <li> fontawesome/brands/git-alt</li> <li> fontawesome/brands/github</li> <li> fontawesome/brands/github-alt</li> <li> fontawesome/brands/gitlab</li> <li> fontawesome/brands/gitkraken</li> <li> fontawesome/brands/bitbucket</li> <li> fontawesome/solid/trash</li> </ul>"},{"location":"410ConfRepositorio.html#acceso-al-texto-fuente","title":"Acceso al texto fuente","text":"<p>Si <code>repo_url</code> apunta a un repositorio v\u00e1lido en casos como GitHub, GitLab o Bitbucket, MkDocs proporciona un par\u00e1metro <code>edit_uri</code> que permite apuntar a una subcarpeta donde se aloja la documentaci\u00f3n. Si la rama es main:</p> <pre><code>edit_uri: edit/main/docs/\n</code></pre> <p>Una vez hecho esto, podemos a\u00f1adir botones para visualizar y editar el texto original (GitHub):</p> <pre><code>theme:\n  features:\n    - content.action.edit\n    - content.action.view\n</code></pre> <p>Los iconos pueden modificarse con:</p> <pre><code>theme:\n  icon:\n    edit: material/pencil \n    view: material/eye\n</code></pre>"},{"location":"410ConfRepositorio.html#versiones","title":"Versiones","text":"<p>Para mostrar la fecha de creaci\u00f3n, \u00faltima actualizaci\u00f3n del documento, y lista de autores y contribuidores, tenemos que instalar un complemento python en el terminal de comandos:</p> <pre><code>pip install mkdocs-git-revision-date-localized-plugin\n</code></pre> <p>Seguidamente, a\u00f1adir a <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - git-revision-date-localized:\n      enable_creation_date: true\n</code></pre> <p>Esto muestra la fecha de creaci\u00f3n del documento. El formato puede ser <code>date</code>, <code>datetime</code>, <code>iso_date</code>, <code>iso_datetime</code> o <code>timeago</code>:</p> <pre><code>plugins:\n  - git-revision-date-localized:\n      type: date\n</code></pre>"},{"location":"901GitHub.html","title":"Subir archivos a Internet","text":"<p>Los sitios web creados con MkDocs consisten en una colecci\u00f3n de archivos en formato <code>HTML</code> que pueden subirse a cualquier servidor web configurado para admitir p\u00e1ginas de tipo \"est\u00e1tico\", es decir, archivos que se descargan y visualizan en nuestro navegador sin sufrir modificaciones.</p> <p>Yo utilizo GitHub como repositorio, y hago uso de un servicio llamado GitHub Pages, que permite visualizar la documentaci\u00f3n en forma de sitio web. Para subir los documentos utilizo GitHub Desktop, un programa que podemos descargar e instalar en nuestro ordenador, y cuyo uso requiere de que tengamos instalado un programa llamado Git.</p>"},{"location":"901GitHub.html#acerca-de-git","title":"Acerca de Git","text":"<p>Git es un programa concebido para el control de versiones de nuestros documentos subidos a repositorios remotos. Resulta especialmente \u00fatil en el caso de proyectos en los que participan varias personas, facilitando la coordinaci\u00f3n del trabajo en grupo. </p> <p>Git es un software open source, concebido inicialmente por Linus Torvalds, el creador del sistema operativo Linux.</p> <p>Vamos a utilizar Git para subir nuestros documentos al repositorio de p\u00e1ginas web. Podemos comprobar que nuestro sistema operativo lo trae de serie si abrimos un terminal de comandos e introducimos:</p> <pre><code>$ git --version\n</code></pre> <p>Si necesitamos instalarlo en nuestro equipo, podemos ir al repositorio de software de nuestro sistema operativo, o bien descargarlo de la p\u00e1gina web oficial de Git.</p> <p>Git es un software para profesionales, complejo y con muchas funcionalidades que posiblemente no necesitaremos. En todo caso tenemos un libro sobre la materia de libre acceso y descarga en esta p\u00e1gina.</p>"},{"location":"901GitHub.html#acerca-de-github","title":"Acerca de GitHub","text":"<p>GitHub es una plataforma de desarrollo colaborativo que permite alojar proyectos, tanto personales como comunitarios, utilizando el sistema de control de versiones Git. Cada usuario puede tener uno o varios repositorios, de forma que cada uno de ellos sirve para alojar un proyecto.</p> <p>Desde junio de 2018, GitHub es propiedad de Microsoft. Aunque esto produjo ciertos recelos iniciales, GitHub contin\u00faa siendo una plataforma importante para proyectos de c\u00f3digo abierto.</p> <p>Para registrarnos como usuarios necesitamos una cuenta de correo. Acudimos a la p\u00e1gina principal de GitHub, https://github.com, donde veremos dos enlaces:</p> <ul> <li><code>Sign In</code>, para acceder si ya tenemos un c\u00f3digo de usuario y contrase\u00f1a</li> <li><code>Sign Up</code>, para crear una nueva cuenta de usuario.</li> </ul> <p>Pulsamos en <code>Sign_Up</code> y seguimos el proceso para crear una cuenta. Se nos pedir\u00e1 que establezcamos un nuevo nombre de usuario, una contrase\u00f1a, y se nos pedir\u00e1 nuestro correo.</p> <p>Para aprender a manejarnos con <code>GitHub</code> encontraremos los tutoriales en https://docs.github.com/</p>"},{"location":"901GitHub.html#iniciar-sesion-en-github","title":"Iniciar sesi\u00f3n en GitHub","text":"<p>En la p\u00e1gina principal de GitHub, https://github.com, pulsamos en el enlace <code>Sign In</code>. Se nos pedir\u00e1 nuestro nombre de usuario o correo electr\u00f3nico y la contrase\u00f1a.</p> <p>Tras iniciar la sesi\u00f3n, vemos que en todo momento tenemos un icono en la esquina superior derecha con nuestra imagen de usuario. Pulsando sobre ese icono, veremos un men\u00fa de opciones. Algunas de ellas son:</p> <ul> <li>Sign out - cierra la sesi\u00f3n y sale de GitHub</li> <li>GitHub docs - documentaci\u00f3n de GHitHub</li> <li>Settings - configuraci\u00f3n de nuestra cuenta</li> <li>Your profile - muestra un resumen de nuestra cuenta y repositorios</li> <li>Your repositories - lista de repositorios</li> </ul>"},{"location":"901GitHub.html#creando-un-repositorio","title":"Creando un repositorio","text":"<p>Vamos a crear un repositorio para cada proyecto de documentaci\u00f3n. Tras desplegar el men\u00fa de opciones y  pulsar en el enlace <code>Your repositories</code>, aparecer\u00e1 una lista de nuestros repositorios, todav\u00eda vac\u00eda. Pulsamos en el bot\u00f3n <code>New</code>. Se muestra un formulario para introducir los par\u00e1metros del nuevo repositorio:</p> <ul> <li>Nombre del repositorio</li> <li>Si es p\u00fablico o privado</li> <li>Si queremos iniciarlo vac\u00edo o con tres posibles archivos:<ul> <li>README.md - Un resumen explicativo de lo que contiene el repositorio. es un archivo de texto markdown.</li> <li><code>.gitignore</code> - Se usar\u00e1 al transferir los archivos desde nuestro ordenador. Contiene una lista de ficheros o carpetas que no deseamos incluir en la transferencia</li> <li>Licencia - Tipo de licencia aplicable a nuestros contenidos. Ver licencias</li> </ul> </li> </ul> <p>Una vez dentro del repositorio, en la barra superior tendremos una serie de etiquetas. Las que m\u00e1s vamos a utilizar son:</p> <ul> <li> <p>Code muestra la lista de archivos en el repositorio. Si tenemos un archivo <code>README.md</code> se muestra su contenido debajo de la lista, como resumen explicativo del repositorio.</p> </li> <li> <p>Settings permite configurar el repositorio (\u00a1incluida su eliminaci\u00f3n!).</p> </li> </ul>"},{"location":"901GitHub.html#ramas","title":"Ramas","text":"<p>GitHub  es un portal colaborativo donde un equipo de personas pueden trabajar en el mismo proyecto. Es posible mantener varias versiones de un repositorio, llamadas \"ramas\". Al visualizar la lista de archivos, podemos seleccionar la rama (branch) deseada. Por ahora, nos arreglaremos con la rama \"main\".</p>"},{"location":"901GitHub.html#compilar-el-proyecto","title":"Compilar el proyecto","text":"<p>Una vez que tenemos una cuenta en GitHub y hemos creado un repositorio para nuestro proyecto, vamos a volver al entorno local de nuestro ordenador y preparar la subida de archivos.</p> <p>Tras redactar nuestros documentos, tenemos que compilarlos y crear un sitio web en nuestro ordenador:</p> <pre><code>mkdocs build\n</code></pre> <p>Tras obtener los archivos del sitio web en la carpeta <code>site</code>, vamos a a\u00f1adir alg\u00fan archivo que queramos incluir en la subida:</p> <ul> <li> <p>creamos un archivo llamado <code>README.md</code> con una descripci\u00f3n del proyecto. </p> </li> <li> <p>a\u00f1adimos un archivo <code>.gitignore.md</code> con una lista de archivos que no queremos subir. Recu\u00e9rdese que, en Linux/Mac, los archivos con un prefijo <code>.</code> se consideran como ocultos. En esa lista de archivos a ignorar, ponemos:</p> <pre><code>.DS_Store\n.gitignore\n</code></pre> </li> </ul> <p>No voy a subir el propio archivo <code>.gitignore</code>. Por otra parte, como yo tengo un Mac de Apple, tambi\u00e9n excluyo <code>.DS_Store</code>, que es un archivo oculto en las carpetas de los Mac para controlar la visualizaci\u00f3n del contenido de la carpeta en el ordenador.</p> <p>Una vez compilada la documentaci\u00f3n, nos situamos en la carpeta que contiene los archivos a subir:</p> <pre><code>$ cd site\n</code></pre> <p>Seguidamente hay que configurarlo como repositorio git:</p> <pre><code>$ git init\n</code></pre> <p>Esto crea en la carpeta <code>site</code> una carpeta oculta que se llama <code>.git</code>, que contiene informaci\u00f3n para coordinar la transferencia de documentos.</p> <p>Podemos crear un archivo de comandos para automatizar todo el proceso. En Windows, ser\u00e1 un archivo de texto con la extensi\u00f3n <code>.bat</code>. Basta con hacer doble clic sobre el mismo para que se ejecute. </p> <p>En los ordenadores Mac, para poder ejecutarlo tenemos que pulsar con el bot\u00f3n secundario del rat\u00f3n sobre ese archivo de texto, seleccionar la opci\u00f3n \"Obtener Informaci\u00f3n\", y establecer Abrir con: Terminal, para que siempre que pulsemos sobre el archivo se ejecute en una ventana de Terminal de comandos.</p> <p>El texto del script puede ser algo as\u00ed como:</p> <pre><code>cd /home/nombreusuario/Documents/proyectos/nombreproyecto\nmkdocs build\ncp README.md site/README.md\ncp ignorar.md site/.gitignore\ncd site\ngit init\n</code></pre> <p>V\u00e9ase que en la carpeta raiz de cada proyecto tenemos dos archivos <code>README.md</code> y <code>.gitignore</code>, que copiamos a la carpeta <code>/site</code> en cada compilaci\u00f3n.</p>"},{"location":"901GitHub.html#github-desktop","title":"GitHub Desktop","text":"<p>GitHub Desktop es un programa que permite interaccionar con el repositorio remoto desde nuestro ordenador. Una vez descargado e instalado, al ejecutarse muestra lo siguiente:</p> <p></p> <p>Pulsamos sobre el bot\u00f3n <code>sign in</code>. Al conectarnos a GitHub en el navegador web, se nos pedir\u00e1 que activemos la autorizaci\u00f3n para que GitHub Desktop acceda a nuestros repositorios.</p> <p>Seguimos con el proceso de configuraci\u00f3n e introducimos nuestras credenciales de GitHub:</p> <p></p> <p>Una vez configurado, cada vez que iniciemos GitHub Desktop tendremos un resumen de nuestros repositorios. Pulsamos en Add repository from local drive:</p> <p></p> <p>Vemos un resumen del repositorio. En la esquina superior izquierda tenemos una lista desplegable para seleccionar otros repositorios o crear uno nuevo:</p> <p></p> <p>hacemos la primera subida de archivos pulsando en Publish branch.</p>"},{"location":"901GitHub.html#actualizaciones","title":"Actualizaciones","text":"<p>Tras la primera subida de documentos, nuestro proyecto sufrir\u00e1 modificaciones \u00a1Importante! Nunca debemos modificar los archivos directamente en el repositorio remoto. Hacerlo en local y subir los cambios, para un mejor control.</p> <p>Al abrir GitHub Desktop y seleccionar un proyecto, veremos un resumen de archivos en nuestro entorno local, indicando los cambios realizados y pendientes de subir:</p> <p></p> <p>Para actualizar el repositorio remoto, hacer lo siguiente:</p> <ul> <li> <p>pulsar en el bot\u00f3n <code>Fetch origin</code> para actualizar la sincronizaci\u00f3n de cambios</p> </li> <li> <p>bajo la lista de archivos, rellenar la casilla \"Summary\" con el texto de la operaci\u00f3n a realizar. Por ejemplo, \"actualizaci\u00f3n\". Los archivos modificados en el repositorio remoto se mostrar\u00e1n con ese texto.</p> </li> <li> <p>pulsar en el bot\u00f3n <code>commit</code></p> </li> <li> <p>pulsar en el bot\u00f3n <code>Push origin</code></p> </li> </ul>"},{"location":"901GitHub.html#configurar-como-github-pages","title":"Configurar como GitHub Pages","text":"<p>Una vez subida la documentaci\u00f3n, accedemos a GitHub con nuestra contrase\u00f1a de usuario y verificamos el contenido del repositorio. El contenido del archivo <code>README.md</code> se visualizar\u00e1 como resumen del proyecto.</p> <p>El siguiente paso es activar GitHub Pages  para que los documentos sean visibles como p\u00e1ginas web. Hacer lo siguiente:</p> <ul> <li>Entrar en el repositorio. Veremos la lista de archivos subidos</li> <li>Pulsar en Settings</li> <li>En la barra lateral, pulsar en Pages.</li> <li>En el apartado <code>Source</code> seleccionar la \u00fanica versi\u00f3n (branch) que tenemos: <code>main</code></li> <li>Pulsar en <code>Save</code></li> </ul> <p>Aparecer\u00e1 el mensaje:</p> <p>\"Your site is ready to be published at \"https://usuario.github.io/repositorio/\". </p> <p>Pasado un breve lapso de tiempo, si refrescamos la p\u00e1gina, veremos el mensaje:</p> <p>\"Your site is live at \"https://usuario.github.io/repositorio/\"</p> <p>Gracias a los servicios de GitHub Pages, nuestra documentaci\u00f3n ser\u00e1 accesible mediante la URL:</p> <pre><code>https://usuario.github.io/nombreproyecto/\n</code></pre> <p>sustituyendo \"usuario\" por nuestro nombre de usuario y \"nomproyecto\" por el nombre del repositorio.</p>"},{"location":"901GitHub.html#pagina-principal-del-sitio-web","title":"P\u00e1gina principal del sitio web","text":"<p>Todos nuestros proyectos se visualizan mediante la URL:</p> <pre><code>https://usuario.github.io/nombrerepositorio/\n</code></pre> <p>Podemos crear una p\u00e1gina principal accesible bajo el nombre:</p> <pre><code>https://usuario.github.io/\n</code></pre> <p>Para ello, debemos alojarla en un repositorio llamado <code>usuario.github.io</code>, incluyendo los puntos en el nombre y cambiando usuario por nuestro nombre. </p> <p>Por ejemplo, en mi caso:</p> <ul> <li> <p>P\u00e1gina de proyecto: </p> <ul> <li>URL: https://trezebits.github.io/tutorial_mkdocs/</li> <li>Repositorio: https://github.com/trezebits/tutorial_mkdocs/</li> </ul> </li> <li> <p>P\u00e1gina principal, con \u00edndice de cuadernos:</p> <ul> <li>URL: https://trezebits.github.io/</li> <li>Repositorio: https://github.com/trezebits/trezebits.github.io/</li> </ul> </li> </ul> <p>En el texto de la p\u00e1gina principal <code>https://usuario.github.io/</code> podemos poner enlaces a cada proyecto:</p> <pre><code># Mi portal de documentaci\u00f3n\n\nIndice de proyectos:\n\n-   [Proyecto 1](&lt;https://usuario.github.io/repositorio1/&gt;)\n-   [Proyecto 2](&lt;https://usuario.github.io/repositorio2/&gt;)\n</code></pre>"}]}